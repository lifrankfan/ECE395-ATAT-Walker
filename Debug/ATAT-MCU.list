
ATAT-MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056fc  080056fc  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  080056fc  080056fc  000066fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005704  08005704  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005704  08005704  00006704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005708  08005708  00006708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800570c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000084  08005790  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005790  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d886  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee4  00000000  00000000  0001493a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00016820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1e  00000000  00000000  00017500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f51  00000000  00000000  00017f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe83  00000000  00000000  00019e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b26  00000000  00000000  00029cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000fc85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001004e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800566c 	.word	0x0800566c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	0800566c 	.word	0x0800566c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b090      	sub	sp, #64	@ 0x40
 8000da0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000da2:	f001 f94b 	bl	800203c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000da6:	f000 fcc5 	bl	8001734 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000daa:	f000 fea7 	bl	8001afc <MX_GPIO_Init>
	MX_TIM2_Init();
 8000dae:	f000 fd23 	bl	80017f8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000db2:	f000 fd9b 	bl	80018ec <MX_TIM3_Init>
	MX_TIM4_Init();
 8000db6:	f000 fe13 	bl	80019e0 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000dba:	f000 fe75 	bl	8001aa8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	483d      	ldr	r0, [pc, #244]	@ (8000eb8 <main+0x11c>)
 8000dc2:	f002 fad5 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	483b      	ldr	r0, [pc, #236]	@ (8000eb8 <main+0x11c>)
 8000dca:	f002 fad1 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4839      	ldr	r0, [pc, #228]	@ (8000eb8 <main+0x11c>)
 8000dd2:	f002 facd 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000dd6:	210c      	movs	r1, #12
 8000dd8:	4837      	ldr	r0, [pc, #220]	@ (8000eb8 <main+0x11c>)
 8000dda:	f002 fac9 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4836      	ldr	r0, [pc, #216]	@ (8000ebc <main+0x120>)
 8000de2:	f002 fac5 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000de6:	210c      	movs	r1, #12
 8000de8:	4834      	ldr	r0, [pc, #208]	@ (8000ebc <main+0x120>)
 8000dea:	f002 fac1 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dee:	2104      	movs	r1, #4
 8000df0:	4832      	ldr	r0, [pc, #200]	@ (8000ebc <main+0x120>)
 8000df2:	f002 fabd 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df6:	2100      	movs	r1, #0
 8000df8:	4830      	ldr	r0, [pc, #192]	@ (8000ebc <main+0x120>)
 8000dfa:	f002 fab9 	bl	8003370 <HAL_TIM_PWM_Start>



	HAL_UART_Receive_IT(&huart1, Degree, sizeof(Degree));
 8000dfe:	2202      	movs	r2, #2
 8000e00:	492f      	ldr	r1, [pc, #188]	@ (8000ec0 <main+0x124>)
 8000e02:	4830      	ldr	r0, [pc, #192]	@ (8000ec4 <main+0x128>)
 8000e04:	f003 f817 	bl	8003e36 <HAL_UART_Receive_IT>
	CCR_reg = 0;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <main+0x12c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
	//  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, CCR_reg); //PWM4 110 hip
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, CCR_reg); //PWM5 110 knee
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, CCR_reg); //PWM6	110 hip
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, CCR_reg); //PWM7 110 knee
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, CCR_reg); //PWM8 110 hip
	uint8_t start = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint32_t counter = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
	/* USER CODE END WHILE */


	  if (start) {
 8000e18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d018      	beq.n	8000e52 <main+0xb6>
		  strcpy(buffer, "initializing legs\r\n");
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4a2a      	ldr	r2, [pc, #168]	@ (8000ecc <main+0x130>)
 8000e24:	461c      	mov	r4, r3
 8000e26:	4615      	mov	r5, r2
 8000e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	6023      	str	r3, [r4, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff f9ec 	bl	8000210 <strlen>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	1d39      	adds	r1, r7, #4
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	4820      	ldr	r0, [pc, #128]	@ (8000ec4 <main+0x128>)
 8000e44:	f002 ff6c 	bl	8003d20 <HAL_UART_Transmit>

		  init_legs();
 8000e48:	f000 f846 	bl	8000ed8 <init_legs>
		  start = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  }
	  rest_legs();
 8000e52:	f000 f96d 	bl	8001130 <rest_legs>

	  // hip, knee
	  move_leg(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2); // leg 2
 8000e56:	2204      	movs	r2, #4
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <main+0x120>)
 8000e5c:	f000 fa94 	bl	8001388 <move_leg>
	  move_leg(&htim2, TIM_CHANNEL_4, TIM_CHANNEL_3); // leg 4
 8000e60:	2208      	movs	r2, #8
 8000e62:	210c      	movs	r1, #12
 8000e64:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <main+0x11c>)
 8000e66:	f000 fa8f 	bl	8001388 <move_leg>
	  move_leg(&htim3, TIM_CHANNEL_4, TIM_CHANNEL_3); // leg 1
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <main+0x120>)
 8000e70:	f000 fa8a 	bl	8001388 <move_leg>
	  move_leg(&htim2, TIM_CHANNEL_2, TIM_CHANNEL_1); // leg 3
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	480f      	ldr	r0, [pc, #60]	@ (8000eb8 <main+0x11c>)
 8000e7a:	f000 fa85 	bl	8001388 <move_leg>
	  init_legs();
 8000e7e:	f000 f82b 	bl	8000ed8 <init_legs>

	  sprintf(buffer, "Counter Value: %lu\r\n", counter);
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e86:	4912      	ldr	r1, [pc, #72]	@ (8000ed0 <main+0x134>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 ff4f 	bl	8004d2c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f9bd 	bl	8000210 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	1d39      	adds	r1, r7, #4
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <main+0x128>)
 8000ea2:	f002 ff3d 	bl	8003d20 <HAL_UART_Transmit>

	  counter++;
 8000ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	  HAL_Delay(1000);
 8000eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb0:	f001 f936 	bl	8002120 <HAL_Delay>
	  if (start) {
 8000eb4:	e7b0      	b.n	8000e18 <main+0x7c>
 8000eb6:	bf00      	nop
 8000eb8:	200000a0 	.word	0x200000a0
 8000ebc:	200000e8 	.word	0x200000e8
 8000ec0:	200001d4 	.word	0x200001d4
 8000ec4:	20000178 	.word	0x20000178
 8000ec8:	200001c0 	.word	0x200001c0
 8000ecc:	08005684 	.word	0x08005684
 8000ed0:	08005698 	.word	0x08005698
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <init_legs>:
	}


    /* USER CODE BEGIN 3 */
}
void init_legs() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  // leg1
    hip = ((Init[0]) / 0.09 + 250);
 8000edc:	4b8e      	ldr	r3, [pc, #568]	@ (8001118 <init_legs+0x240>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb3f 	bl	8000564 <__aeabi_i2d>
 8000ee6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001110 <init_legs+0x238>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fcce 	bl	800088c <__aeabi_ddiv>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	4b87      	ldr	r3, [pc, #540]	@ (800111c <init_legs+0x244>)
 8000efe:	f7ff f9e5 	bl	80002cc <__adddf3>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fda7 	bl	8000a5c <__aeabi_d2iz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a83      	ldr	r2, [pc, #524]	@ (8001120 <init_legs+0x248>)
 8000f12:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 8000f14:	4b80      	ldr	r3, [pc, #512]	@ (8001118 <init_legs+0x240>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb23 	bl	8000564 <__aeabi_i2d>
 8000f1e:	a37c      	add	r3, pc, #496	@ (adr r3, 8001110 <init_legs+0x238>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fcb2 	bl	800088c <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b79      	ldr	r3, [pc, #484]	@ (800111c <init_legs+0x244>)
 8000f36:	f7ff f9c9 	bl	80002cc <__adddf3>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fd8b 	bl	8000a5c <__aeabi_d2iz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a76      	ldr	r2, [pc, #472]	@ (8001124 <init_legs+0x24c>)
 8000f4a:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, hip);
 8000f4c:	4b74      	ldr	r3, [pc, #464]	@ (8001120 <init_legs+0x248>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b75      	ldr	r3, [pc, #468]	@ (8001128 <init_legs+0x250>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, knee);
 8000f56:	4b73      	ldr	r3, [pc, #460]	@ (8001124 <init_legs+0x24c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b73      	ldr	r3, [pc, #460]	@ (8001128 <init_legs+0x250>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f64:	f001 f8dc 	bl	8002120 <HAL_Delay>
    // leg3
    hip = ((Init[0]) / 0.09 + 250);
 8000f68:	4b6b      	ldr	r3, [pc, #428]	@ (8001118 <init_legs+0x240>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faf9 	bl	8000564 <__aeabi_i2d>
 8000f72:	a367      	add	r3, pc, #412	@ (adr r3, 8001110 <init_legs+0x238>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fc88 	bl	800088c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b64      	ldr	r3, [pc, #400]	@ (800111c <init_legs+0x244>)
 8000f8a:	f7ff f99f 	bl	80002cc <__adddf3>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd61 	bl	8000a5c <__aeabi_d2iz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a60      	ldr	r2, [pc, #384]	@ (8001120 <init_legs+0x248>)
 8000f9e:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8001118 <init_legs+0x240>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fadd 	bl	8000564 <__aeabi_i2d>
 8000faa:	a359      	add	r3, pc, #356	@ (adr r3, 8001110 <init_legs+0x238>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fc6c 	bl	800088c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b56      	ldr	r3, [pc, #344]	@ (800111c <init_legs+0x244>)
 8000fc2:	f7ff f983 	bl	80002cc <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fd45 	bl	8000a5c <__aeabi_d2iz>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a53      	ldr	r2, [pc, #332]	@ (8001124 <init_legs+0x24c>)
 8000fd6:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, hip);
 8000fd8:	4b51      	ldr	r3, [pc, #324]	@ (8001120 <init_legs+0x248>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b53      	ldr	r3, [pc, #332]	@ (800112c <init_legs+0x254>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, knee);
 8000fe2:	4b50      	ldr	r3, [pc, #320]	@ (8001124 <init_legs+0x24c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b51      	ldr	r3, [pc, #324]	@ (800112c <init_legs+0x254>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff0:	f001 f896 	bl	8002120 <HAL_Delay>
    // leg2
    hip = ((Init[0]) / 0.09 + 250);
 8000ff4:	4b48      	ldr	r3, [pc, #288]	@ (8001118 <init_legs+0x240>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fab3 	bl	8000564 <__aeabi_i2d>
 8000ffe:	a344      	add	r3, pc, #272	@ (adr r3, 8001110 <init_legs+0x238>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc42 	bl	800088c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b41      	ldr	r3, [pc, #260]	@ (800111c <init_legs+0x244>)
 8001016:	f7ff f959 	bl	80002cc <__adddf3>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd1b 	bl	8000a5c <__aeabi_d2iz>
 8001026:	4603      	mov	r3, r0
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <init_legs+0x248>)
 800102a:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 800102c:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <init_legs+0x240>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa97 	bl	8000564 <__aeabi_i2d>
 8001036:	a336      	add	r3, pc, #216	@ (adr r3, 8001110 <init_legs+0x238>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fc26 	bl	800088c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b33      	ldr	r3, [pc, #204]	@ (800111c <init_legs+0x244>)
 800104e:	f7ff f93d 	bl	80002cc <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fcff 	bl	8000a5c <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	4a30      	ldr	r2, [pc, #192]	@ (8001124 <init_legs+0x24c>)
 8001062:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, hip);
 8001064:	4b2e      	ldr	r3, [pc, #184]	@ (8001120 <init_legs+0x248>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <init_legs+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, knee);
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <init_legs+0x24c>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <init_legs+0x250>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800107c:	f001 f850 	bl	8002120 <HAL_Delay>
    // leg4
    hip = ((Init[0]) / 0.09 + 250);
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <init_legs+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa6d 	bl	8000564 <__aeabi_i2d>
 800108a:	a321      	add	r3, pc, #132	@ (adr r3, 8001110 <init_legs+0x238>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fbfc 	bl	800088c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <init_legs+0x244>)
 80010a2:	f7ff f913 	bl	80002cc <__adddf3>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fcd5 	bl	8000a5c <__aeabi_d2iz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <init_legs+0x248>)
 80010b6:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <init_legs+0x240>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa51 	bl	8000564 <__aeabi_i2d>
 80010c2:	a313      	add	r3, pc, #76	@ (adr r3, 8001110 <init_legs+0x238>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fbe0 	bl	800088c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <init_legs+0x244>)
 80010da:	f7ff f8f7 	bl	80002cc <__adddf3>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fcb9 	bl	8000a5c <__aeabi_d2iz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <init_legs+0x24c>)
 80010ee:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, hip);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <init_legs+0x248>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <init_legs+0x254>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, knee);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <init_legs+0x24c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <init_legs+0x254>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(1000);
 8001104:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001108:	f001 f80a 	bl	8002120 <HAL_Delay>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	70a3d70a 	.word	0x70a3d70a
 8001114:	3fb70a3d 	.word	0x3fb70a3d
 8001118:	20000000 	.word	0x20000000
 800111c:	406f4000 	.word	0x406f4000
 8001120:	200001c4 	.word	0x200001c4
 8001124:	200001c8 	.word	0x200001c8
 8001128:	200000a0 	.word	0x200000a0
 800112c:	200000e8 	.word	0x200000e8

08001130 <rest_legs>:

void rest_legs() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	// leg2
	hip = ((Rest[0]) / 0.09 + 250);
 8001134:	4b8e      	ldr	r3, [pc, #568]	@ (8001370 <rest_legs+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa13 	bl	8000564 <__aeabi_i2d>
 800113e:	a38a      	add	r3, pc, #552	@ (adr r3, 8001368 <rest_legs+0x238>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fba2 	bl	800088c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b87      	ldr	r3, [pc, #540]	@ (8001374 <rest_legs+0x244>)
 8001156:	f7ff f8b9 	bl	80002cc <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fc7b 	bl	8000a5c <__aeabi_d2iz>
 8001166:	4603      	mov	r3, r0
 8001168:	4a83      	ldr	r2, [pc, #524]	@ (8001378 <rest_legs+0x248>)
 800116a:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 800116c:	4b80      	ldr	r3, [pc, #512]	@ (8001370 <rest_legs+0x240>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9f7 	bl	8000564 <__aeabi_i2d>
 8001176:	a37c      	add	r3, pc, #496	@ (adr r3, 8001368 <rest_legs+0x238>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fb86 	bl	800088c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b79      	ldr	r3, [pc, #484]	@ (8001374 <rest_legs+0x244>)
 800118e:	f7ff f89d 	bl	80002cc <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fc5f 	bl	8000a5c <__aeabi_d2iz>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a76      	ldr	r2, [pc, #472]	@ (800137c <rest_legs+0x24c>)
 80011a2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, hip);
 80011a4:	4b74      	ldr	r3, [pc, #464]	@ (8001378 <rest_legs+0x248>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b75      	ldr	r3, [pc, #468]	@ (8001380 <rest_legs+0x250>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, knee);
 80011ae:	4b73      	ldr	r3, [pc, #460]	@ (800137c <rest_legs+0x24c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b73      	ldr	r3, [pc, #460]	@ (8001380 <rest_legs+0x250>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(1000);
 80011b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011bc:	f000 ffb0 	bl	8002120 <HAL_Delay>
	// leg4
	hip = ((Rest[0]) / 0.09 + 250);
 80011c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001370 <rest_legs+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9cd 	bl	8000564 <__aeabi_i2d>
 80011ca:	a367      	add	r3, pc, #412	@ (adr r3, 8001368 <rest_legs+0x238>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fb5c 	bl	800088c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b64      	ldr	r3, [pc, #400]	@ (8001374 <rest_legs+0x244>)
 80011e2:	f7ff f873 	bl	80002cc <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc35 	bl	8000a5c <__aeabi_d2iz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a60      	ldr	r2, [pc, #384]	@ (8001378 <rest_legs+0x248>)
 80011f6:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 80011f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <rest_legs+0x240>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b1 	bl	8000564 <__aeabi_i2d>
 8001202:	a359      	add	r3, pc, #356	@ (adr r3, 8001368 <rest_legs+0x238>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fb40 	bl	800088c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <rest_legs+0x244>)
 800121a:	f7ff f857 	bl	80002cc <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc19 	bl	8000a5c <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	4a53      	ldr	r2, [pc, #332]	@ (800137c <rest_legs+0x24c>)
 800122e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, hip);
 8001230:	4b51      	ldr	r3, [pc, #324]	@ (8001378 <rest_legs+0x248>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <rest_legs+0x254>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, knee);
 800123a:	4b50      	ldr	r3, [pc, #320]	@ (800137c <rest_legs+0x24c>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <rest_legs+0x254>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(2000);
 8001244:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001248:	f000 ff6a 	bl	8002120 <HAL_Delay>
  // leg1
	hip = ((Rest[0]) / 0.09 + 250);
 800124c:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <rest_legs+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f987 	bl	8000564 <__aeabi_i2d>
 8001256:	a344      	add	r3, pc, #272	@ (adr r3, 8001368 <rest_legs+0x238>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff fb16 	bl	800088c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <rest_legs+0x244>)
 800126e:	f7ff f82d 	bl	80002cc <__adddf3>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fbef 	bl	8000a5c <__aeabi_d2iz>
 800127e:	4603      	mov	r3, r0
 8001280:	4a3d      	ldr	r2, [pc, #244]	@ (8001378 <rest_legs+0x248>)
 8001282:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <rest_legs+0x240>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f96b 	bl	8000564 <__aeabi_i2d>
 800128e:	a336      	add	r3, pc, #216	@ (adr r3, 8001368 <rest_legs+0x238>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff fafa 	bl	800088c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <rest_legs+0x244>)
 80012a6:	f7ff f811 	bl	80002cc <__adddf3>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fbd3 	bl	8000a5c <__aeabi_d2iz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a30      	ldr	r2, [pc, #192]	@ (800137c <rest_legs+0x24c>)
 80012ba:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, hip);
 80012bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <rest_legs+0x248>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <rest_legs+0x250>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, knee);
 80012c6:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <rest_legs+0x24c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <rest_legs+0x250>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1000);
 80012d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d4:	f000 ff24 	bl	8002120 <HAL_Delay>
	// leg3
	hip = ((Rest[0]) / 0.09 + 250);
 80012d8:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <rest_legs+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f941 	bl	8000564 <__aeabi_i2d>
 80012e2:	a321      	add	r3, pc, #132	@ (adr r3, 8001368 <rest_legs+0x238>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fad0 	bl	800088c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <rest_legs+0x244>)
 80012fa:	f7fe ffe7 	bl	80002cc <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fba9 	bl	8000a5c <__aeabi_d2iz>
 800130a:	4603      	mov	r3, r0
 800130c:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <rest_legs+0x248>)
 800130e:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <rest_legs+0x240>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f925 	bl	8000564 <__aeabi_i2d>
 800131a:	a313      	add	r3, pc, #76	@ (adr r3, 8001368 <rest_legs+0x238>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff fab4 	bl	800088c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <rest_legs+0x244>)
 8001332:	f7fe ffcb 	bl	80002cc <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fb8d 	bl	8000a5c <__aeabi_d2iz>
 8001342:	4603      	mov	r3, r0
 8001344:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <rest_legs+0x24c>)
 8001346:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, hip);
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <rest_legs+0x248>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <rest_legs+0x254>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, knee);
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <rest_legs+0x24c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <rest_legs+0x254>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(1000);
 800135c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001360:	f000 fede 	bl	8002120 <HAL_Delay>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	70a3d70a 	.word	0x70a3d70a
 800136c:	3fb70a3d 	.word	0x3fb70a3d
 8001370:	20000008 	.word	0x20000008
 8001374:	406f4000 	.word	0x406f4000
 8001378:	200001c4 	.word	0x200001c4
 800137c:	200001c8 	.word	0x200001c8
 8001380:	200000a0 	.word	0x200000a0
 8001384:	200000e8 	.word	0x200000e8

08001388 <move_leg>:

void move_leg(TIM_HandleTypeDef *tim, uint32_t hip_channel, uint32_t knee_channel) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	// Bend
	hip = ((Bend[0]) / 0.09 + 250);
 8001394:	4ba4      	ldr	r3, [pc, #656]	@ (8001628 <move_leg+0x2a0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8e3 	bl	8000564 <__aeabi_i2d>
 800139e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001620 <move_leg+0x298>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff fa72 	bl	800088c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b9d      	ldr	r3, [pc, #628]	@ (800162c <move_leg+0x2a4>)
 80013b6:	f7fe ff89 	bl	80002cc <__adddf3>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fb4b 	bl	8000a5c <__aeabi_d2iz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a99      	ldr	r2, [pc, #612]	@ (8001630 <move_leg+0x2a8>)
 80013ca:	6013      	str	r3, [r2, #0]
	knee = ((Bend[1]) / 0.09 + 250);
 80013cc:	4b96      	ldr	r3, [pc, #600]	@ (8001628 <move_leg+0x2a0>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8c7 	bl	8000564 <__aeabi_i2d>
 80013d6:	a392      	add	r3, pc, #584	@ (adr r3, 8001620 <move_leg+0x298>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa56 	bl	800088c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b8f      	ldr	r3, [pc, #572]	@ (800162c <move_leg+0x2a4>)
 80013ee:	f7fe ff6d 	bl	80002cc <__adddf3>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fb2f 	bl	8000a5c <__aeabi_d2iz>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a8c      	ldr	r2, [pc, #560]	@ (8001634 <move_leg+0x2ac>)
 8001402:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(tim, hip_channel, hip);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <move_leg+0x8e>
 800140a:	4b89      	ldr	r3, [pc, #548]	@ (8001630 <move_leg+0x2a8>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	635a      	str	r2, [r3, #52]	@ 0x34
 8001414:	e019      	b.n	800144a <move_leg+0xc2>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b04      	cmp	r3, #4
 800141a:	d106      	bne.n	800142a <move_leg+0xa2>
 800141c:	4b84      	ldr	r3, [pc, #528]	@ (8001630 <move_leg+0x2a8>)
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	460b      	mov	r3, r1
 8001426:	6393      	str	r3, [r2, #56]	@ 0x38
 8001428:	e00f      	b.n	800144a <move_leg+0xc2>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d106      	bne.n	800143e <move_leg+0xb6>
 8001430:	4b7f      	ldr	r3, [pc, #508]	@ (8001630 <move_leg+0x2a8>)
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	460b      	mov	r3, r1
 800143a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800143c:	e005      	b.n	800144a <move_leg+0xc2>
 800143e:	4b7c      	ldr	r3, [pc, #496]	@ (8001630 <move_leg+0x2a8>)
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(tim, knee_channel, knee);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <move_leg+0xd4>
 8001450:	4b78      	ldr	r3, [pc, #480]	@ (8001634 <move_leg+0x2ac>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	635a      	str	r2, [r3, #52]	@ 0x34
 800145a:	e019      	b.n	8001490 <move_leg+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d106      	bne.n	8001470 <move_leg+0xe8>
 8001462:	4b74      	ldr	r3, [pc, #464]	@ (8001634 <move_leg+0x2ac>)
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	460b      	mov	r3, r1
 800146c:	6393      	str	r3, [r2, #56]	@ 0x38
 800146e:	e00f      	b.n	8001490 <move_leg+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d106      	bne.n	8001484 <move_leg+0xfc>
 8001476:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <move_leg+0x2ac>)
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	460b      	mov	r3, r1
 8001480:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001482:	e005      	b.n	8001490 <move_leg+0x108>
 8001484:	4b6b      	ldr	r3, [pc, #428]	@ (8001634 <move_leg+0x2ac>)
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	6413      	str	r3, [r2, #64]	@ 0x40

	HAL_Delay(1000);
 8001490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001494:	f000 fe44 	bl	8002120 <HAL_Delay>
	// Reach
	hip = ((Reach[0]) / 0.09 + 250);
 8001498:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <move_leg+0x2b0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f861 	bl	8000564 <__aeabi_i2d>
 80014a2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001620 <move_leg+0x298>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f9f0 	bl	800088c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b5c      	ldr	r3, [pc, #368]	@ (800162c <move_leg+0x2a4>)
 80014ba:	f7fe ff07 	bl	80002cc <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fac9 	bl	8000a5c <__aeabi_d2iz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a58      	ldr	r2, [pc, #352]	@ (8001630 <move_leg+0x2a8>)
 80014ce:	6013      	str	r3, [r2, #0]
	knee = ((Reach[1]) / 0.09 + 250);
 80014d0:	4b59      	ldr	r3, [pc, #356]	@ (8001638 <move_leg+0x2b0>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f845 	bl	8000564 <__aeabi_i2d>
 80014da:	a351      	add	r3, pc, #324	@ (adr r3, 8001620 <move_leg+0x298>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f9d4 	bl	800088c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <move_leg+0x2a4>)
 80014f2:	f7fe feeb 	bl	80002cc <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff faad 	bl	8000a5c <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	4a4b      	ldr	r2, [pc, #300]	@ (8001634 <move_leg+0x2ac>)
 8001506:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(tim, hip_channel, hip);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <move_leg+0x192>
 800150e:	4b48      	ldr	r3, [pc, #288]	@ (8001630 <move_leg+0x2a8>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
 8001518:	e019      	b.n	800154e <move_leg+0x1c6>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d106      	bne.n	800152e <move_leg+0x1a6>
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <move_leg+0x2a8>)
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	460b      	mov	r3, r1
 800152a:	6393      	str	r3, [r2, #56]	@ 0x38
 800152c:	e00f      	b.n	800154e <move_leg+0x1c6>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b08      	cmp	r3, #8
 8001532:	d106      	bne.n	8001542 <move_leg+0x1ba>
 8001534:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <move_leg+0x2a8>)
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	460b      	mov	r3, r1
 800153e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001540:	e005      	b.n	800154e <move_leg+0x1c6>
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <move_leg+0x2a8>)
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	460b      	mov	r3, r1
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(tim, knee_channel, knee);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <move_leg+0x1d8>
 8001554:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <move_leg+0x2ac>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
 800155e:	e019      	b.n	8001594 <move_leg+0x20c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d106      	bne.n	8001574 <move_leg+0x1ec>
 8001566:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <move_leg+0x2ac>)
 8001568:	6819      	ldr	r1, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	460b      	mov	r3, r1
 8001570:	6393      	str	r3, [r2, #56]	@ 0x38
 8001572:	e00f      	b.n	8001594 <move_leg+0x20c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b08      	cmp	r3, #8
 8001578:	d106      	bne.n	8001588 <move_leg+0x200>
 800157a:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <move_leg+0x2ac>)
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	460b      	mov	r3, r1
 8001584:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001586:	e005      	b.n	8001594 <move_leg+0x20c>
 8001588:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <move_leg+0x2ac>)
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	460b      	mov	r3, r1
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40

	HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f000 fdc2 	bl	8002120 <HAL_Delay>
	// Step
	hip = ((Step[0]) / 0.09 + 250);
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <move_leg+0x2b4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffdf 	bl	8000564 <__aeabi_i2d>
 80015a6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001620 <move_leg+0x298>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f96e 	bl	800088c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <move_leg+0x2a4>)
 80015be:	f7fe fe85 	bl	80002cc <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa47 	bl	8000a5c <__aeabi_d2iz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <move_leg+0x2a8>)
 80015d2:	6013      	str	r3, [r2, #0]
	knee = ((Step[1]) / 0.09 + 250);
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <move_leg+0x2b4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffc3 	bl	8000564 <__aeabi_i2d>
 80015de:	a310      	add	r3, pc, #64	@ (adr r3, 8001620 <move_leg+0x298>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f952 	bl	800088c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <move_leg+0x2a4>)
 80015f6:	f7fe fe69 	bl	80002cc <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa2b 	bl	8000a5c <__aeabi_d2iz>
 8001606:	4603      	mov	r3, r0
 8001608:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <move_leg+0x2ac>)
 800160a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(tim, hip_channel, hip);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d116      	bne.n	8001640 <move_leg+0x2b8>
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <move_leg+0x2a8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	635a      	str	r2, [r3, #52]	@ 0x34
 800161c:	e02a      	b.n	8001674 <move_leg+0x2ec>
 800161e:	bf00      	nop
 8001620:	70a3d70a 	.word	0x70a3d70a
 8001624:	3fb70a3d 	.word	0x3fb70a3d
 8001628:	20000010 	.word	0x20000010
 800162c:	406f4000 	.word	0x406f4000
 8001630:	200001c4 	.word	0x200001c4
 8001634:	200001c8 	.word	0x200001c8
 8001638:	20000018 	.word	0x20000018
 800163c:	20000020 	.word	0x20000020
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d106      	bne.n	8001654 <move_leg+0x2cc>
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <move_leg+0x344>)
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	460b      	mov	r3, r1
 8001650:	6393      	str	r3, [r2, #56]	@ 0x38
 8001652:	e00f      	b.n	8001674 <move_leg+0x2ec>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b08      	cmp	r3, #8
 8001658:	d106      	bne.n	8001668 <move_leg+0x2e0>
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <move_leg+0x344>)
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	460b      	mov	r3, r1
 8001664:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001666:	e005      	b.n	8001674 <move_leg+0x2ec>
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <move_leg+0x344>)
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	460b      	mov	r3, r1
 8001672:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(tim, knee_channel, knee);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <move_leg+0x2fe>
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <move_leg+0x348>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	635a      	str	r2, [r3, #52]	@ 0x34
 8001684:	e019      	b.n	80016ba <move_leg+0x332>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d106      	bne.n	800169a <move_leg+0x312>
 800168c:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <move_leg+0x348>)
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	6393      	str	r3, [r2, #56]	@ 0x38
 8001698:	e00f      	b.n	80016ba <move_leg+0x332>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b08      	cmp	r3, #8
 800169e:	d106      	bne.n	80016ae <move_leg+0x326>
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <move_leg+0x348>)
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	460b      	mov	r3, r1
 80016aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016ac:	e005      	b.n	80016ba <move_leg+0x332>
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <move_leg+0x348>)
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	460b      	mov	r3, r1
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(1000);
 80016ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016be:	f000 fd2f 	bl	8002120 <HAL_Delay>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001c4 	.word	0x200001c4
 80016d0:	200001c8 	.word	0x200001c8

080016d4 <HAL_UART_RxCpltCallback>:


  /* USER CODE END 3 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
//Function for writing to UART
	receivedNumber = (Degree[0] - 48);
 80016dc:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_UART_RxCpltCallback+0x4c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3b30      	subs	r3, #48	@ 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <HAL_UART_RxCpltCallback+0x50>)
 80016e4:	6013      	str	r3, [r2, #0]
	if(receivedNumber == 0){
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_UART_RxCpltCallback+0x50>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <HAL_UART_RxCpltCallback+0x22>
		flag = 1;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_UART_RxCpltCallback+0x54>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e006      	b.n	8001704 <HAL_UART_RxCpltCallback+0x30>
	}else{
		flag = 0;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_UART_RxCpltCallback+0x54>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_UART_RxCpltCallback+0x58>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2200      	movs	r2, #0
 8001702:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	memset(Degree, 0, sizeof(Degree));
 8001704:	2202      	movs	r2, #2
 8001706:	2100      	movs	r1, #0
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_UART_RxCpltCallback+0x4c>)
 800170a:	f003 fb2f 	bl	8004d6c <memset>
	HAL_UART_Receive_IT(&huart1, Degree, sizeof(Degree));
 800170e:	2202      	movs	r2, #2
 8001710:	4903      	ldr	r1, [pc, #12]	@ (8001720 <HAL_UART_RxCpltCallback+0x4c>)
 8001712:	4807      	ldr	r0, [pc, #28]	@ (8001730 <HAL_UART_RxCpltCallback+0x5c>)
 8001714:	f002 fb8f 	bl	8003e36 <HAL_UART_Receive_IT>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200001d4 	.word	0x200001d4
 8001724:	200001cc 	.word	0x200001cc
 8001728:	200001d0 	.word	0x200001d0
 800172c:	200000a0 	.word	0x200000a0
 8001730:	20000178 	.word	0x20000178

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	@ 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	2234      	movs	r2, #52	@ 0x34
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fb12 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <SystemClock_Config+0xbc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <SystemClock_Config+0xbc>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	@ 0x40
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <SystemClock_Config+0xbc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <SystemClock_Config+0xc0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001780:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <SystemClock_Config+0xc0>)
 8001782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <SystemClock_Config+0xc0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001794:	2302      	movs	r3, #2
 8001796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179c:	2310      	movs	r3, #16
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 faf3 	bl	8002d94 <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017b4:	f000 fa26 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 f818 	bl	800280c <HAL_RCC_ClockConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017e2:	f000 fa0f 	bl	8001c04 <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3750      	adds	r7, #80	@ 0x50
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181a:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 800181c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001820:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001822:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 8001824:	220f      	movs	r2, #15
 8001826:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800182e:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 8001830:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001834:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001842:	4829      	ldr	r0, [pc, #164]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 8001844:	f001 fd44 	bl	80032d0 <HAL_TIM_PWM_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800184e:	f000 f9d9 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	4619      	mov	r1, r3
 8001860:	4821      	ldr	r0, [pc, #132]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 8001862:	f002 f991 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800186c:	f000 f9ca 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	@ 0x60
 8001872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	4619      	mov	r1, r3
 8001886:	4818      	ldr	r0, [pc, #96]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 8001888:	f001 fe3a 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001892:	f000 f9b7 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2204      	movs	r2, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 800189e:	f001 fe2f 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a8:	f000 f9ac 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2208      	movs	r2, #8
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 80018b4:	f001 fe24 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80018be:	f000 f9a1 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	220c      	movs	r2, #12
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 80018ca:	f001 fe19 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80018d4:	f000 f996 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <MX_TIM2_Init+0xf0>)
 80018da:	f000 fa0d 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000a0 	.word	0x200000a0

080018ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800190e:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001910:	4a32      	ldr	r2, [pc, #200]	@ (80019dc <MX_TIM3_Init+0xf0>)
 8001912:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001914:	4b30      	ldr	r3, [pc, #192]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001916:	220f      	movs	r2, #15
 8001918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b2f      	ldr	r3, [pc, #188]	@ (80019d8 <MX_TIM3_Init+0xec>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001920:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001922:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <MX_TIM3_Init+0xec>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001934:	4828      	ldr	r0, [pc, #160]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001936:	f001 fccb 	bl	80032d0 <HAL_TIM_PWM_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001940:	f000 f960 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4619      	mov	r1, r3
 8001952:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001954:	f002 f918 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800195e:	f000 f951 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001962:	2360      	movs	r3, #96	@ 0x60
 8001964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	4817      	ldr	r0, [pc, #92]	@ (80019d8 <MX_TIM3_Init+0xec>)
 800197a:	f001 fdc1 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001984:	f000 f93e 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2204      	movs	r2, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4812      	ldr	r0, [pc, #72]	@ (80019d8 <MX_TIM3_Init+0xec>)
 8001990:	f001 fdb6 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800199a:	f000 f933 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2208      	movs	r2, #8
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <MX_TIM3_Init+0xec>)
 80019a6:	f001 fdab 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80019b0:	f000 f928 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	220c      	movs	r2, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <MX_TIM3_Init+0xec>)
 80019bc:	f001 fda0 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80019c6:	f000 f91d 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019ca:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <MX_TIM3_Init+0xec>)
 80019cc:	f000 f994 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200000e8 	.word	0x200000e8
 80019dc:	40000400 	.word	0x40000400

080019e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	615a      	str	r2, [r3, #20]
 8001a00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a02:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a04:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <MX_TIM4_Init+0xc4>)
 8001a06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001a08:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001a14:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a16:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a28:	481d      	ldr	r0, [pc, #116]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a2a:	f001 fc51 	bl	80032d0 <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001a34:	f000 f8e6 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4619      	mov	r1, r3
 8001a46:	4816      	ldr	r0, [pc, #88]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a48:	f002 f89e 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a52:	f000 f8d7 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a56:	2360      	movs	r3, #96	@ 0x60
 8001a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a6e:	f001 fd47 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001a78:	f000 f8c4 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a84:	f001 fd3c 	bl	8003500 <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a8e:	f000 f8b9 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a92:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <MX_TIM4_Init+0xc0>)
 8001a94:	f000 f930 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000130 	.word	0x20000130
 8001aa4:	40000800 	.word	0x40000800

08001aa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <MX_USART1_UART_Init+0x50>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	f002 f8ce 	bl	8003c80 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aea:	f000 f88b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000178 	.word	0x20000178
 8001af8:	40011000 	.word	0x40011000

08001afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a37      	ldr	r2, [pc, #220]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b35      	ldr	r3, [pc, #212]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a30      	ldr	r2, [pc, #192]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a29      	ldr	r2, [pc, #164]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a22      	ldr	r2, [pc, #136]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2106      	movs	r1, #6
 8001b86:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <MX_GPIO_Init+0x100>)
 8001b88:	f000 fe26 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b92:	481b      	ldr	r0, [pc, #108]	@ (8001c00 <MX_GPIO_Init+0x104>)
 8001b94:	f000 fe20 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b98:	2306      	movs	r3, #6
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <MX_GPIO_Init+0x100>)
 8001bb0:	f000 fc7e 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <MX_GPIO_Init+0x104>)
 8001bcc:	f000 fc70 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_GPIO_Init+0x104>)
 8001bea:	f000 fc61 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <Error_Handler+0x8>

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a08      	ldr	r2, [pc, #32]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c8e:	e026      	b.n	8001cde <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <HAL_TIM_PWM_MspInit+0x90>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
}
 8001cb6:	e012      	b.n	8001cde <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10d      	bne.n	8001cde <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_TIM_PWM_MspInit+0x8c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d18:	d11e      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	4b43      	ldr	r3, [pc, #268]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a42      	ldr	r2, [pc, #264]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b40      	ldr	r3, [pc, #256]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d36:	230f      	movs	r3, #15
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d46:	2301      	movs	r3, #1
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4837      	ldr	r0, [pc, #220]	@ (8001e30 <HAL_TIM_MspPostInit+0x138>)
 8001d52:	f000 fbad 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d56:	e064      	b.n	8001e22 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a35      	ldr	r2, [pc, #212]	@ (8001e34 <HAL_TIM_MspPostInit+0x13c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d13c      	bne.n	8001ddc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a30      	ldr	r2, [pc, #192]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b2e      	ldr	r3, [pc, #184]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a29      	ldr	r2, [pc, #164]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001daa:	2302      	movs	r3, #2
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4820      	ldr	r0, [pc, #128]	@ (8001e38 <HAL_TIM_MspPostInit+0x140>)
 8001db6:	f000 fb7b 	bl	80024b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dba:	23c0      	movs	r3, #192	@ 0xc0
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4819      	ldr	r0, [pc, #100]	@ (8001e3c <HAL_TIM_MspPostInit+0x144>)
 8001dd6:	f000 fb6b 	bl	80024b0 <HAL_GPIO_Init>
}
 8001dda:	e022      	b.n	8001e22 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <HAL_TIM_MspPostInit+0x148>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11d      	bne.n	8001e22 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <HAL_TIM_MspPostInit+0x134>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e02:	23c0      	movs	r3, #192	@ 0xc0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e12:	2302      	movs	r3, #2
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <HAL_TIM_MspPostInit+0x140>)
 8001e1e:	f000 fb47 	bl	80024b0 <HAL_GPIO_Init>
}
 8001e22:	bf00      	nop
 8001e24:	3730      	adds	r7, #48	@ 0x30
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40000800 	.word	0x40000800

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_UART_MspInit+0x94>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d134      	bne.n	8001ed0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <HAL_UART_MspInit+0x98>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <HAL_UART_MspInit+0x98>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_UART_MspInit+0x98>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_UART_MspInit+0x98>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <HAL_UART_MspInit+0x98>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_UART_MspInit+0x98>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4809      	ldr	r0, [pc, #36]	@ (8001ee0 <HAL_UART_MspInit+0x9c>)
 8001ebc:	f000 faf8 	bl	80024b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2025      	movs	r0, #37	@ 0x25
 8001ec6:	f000 fa2a 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eca:	2025      	movs	r0, #37	@ 0x25
 8001ecc:	f000 fa43 	bl	8002356 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	@ 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <NMI_Handler+0x4>

08001eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3a:	f000 f8d1 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f48:	4802      	ldr	r0, [pc, #8]	@ (8001f54 <USART1_IRQHandler+0x10>)
 8001f4a:	f001 ff99 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000178 	.word	0x20000178

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f002 fef8 	bl	8004d7c <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20020000 	.word	0x20020000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	200001d8 	.word	0x200001d8
 8001fc0:	20000328 	.word	0x20000328

08001fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002020 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	@ (8002028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	@ (8002034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002016:	f002 feb7 	bl	8004d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7fe febf 	bl	8000d9c <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800202c:	0800570c 	.word	0x0800570c
  ldr r2, =_sbss
 8002030:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002034:	20000328 	.word	0x20000328

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <HAL_Init+0x40>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <HAL_Init+0x40>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	@ (800207c <HAL_Init+0x40>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 f94f 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fdce 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f967 	bl	8002372 <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 f92f 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000028 	.word	0x20000028
 80020d8:	20000030 	.word	0x20000030
 80020dc:	2000002c 	.word	0x2000002c

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000030 	.word	0x20000030
 8002104:	200001dc 	.word	0x200001dc

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200001dc 	.word	0x200001dc

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000030 	.word	0x20000030

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	@ (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	@ (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	@ (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff3e 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff31 	bl	80021cc <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff feb6 	bl	8002108 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d008      	beq.n	80023bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2280      	movs	r2, #128	@ 0x80
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e052      	b.n	8002462 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0216 	bic.w	r2, r2, #22
 80023ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <HAL_DMA_Abort+0x62>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0208 	bic.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	e013      	b.n	8002436 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800240e:	f7ff fe7b 	bl	8002108 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b05      	cmp	r3, #5
 800241a:	d90c      	bls.n	8002436 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e015      	b.n	8002462 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e4      	bne.n	800240e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	223f      	movs	r2, #63	@ 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d004      	beq.n	8002488 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2280      	movs	r2, #128	@ 0x80
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e00c      	b.n	80024a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2205      	movs	r2, #5
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e165      	b.n	8002798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8154 	bne.w	8002792 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ae 	beq.w	8002792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b5d      	ldr	r3, [pc, #372]	@ (80027b0 <HAL_GPIO_Init+0x300>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	4a5c      	ldr	r2, [pc, #368]	@ (80027b0 <HAL_GPIO_Init+0x300>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002644:	6453      	str	r3, [r2, #68]	@ 0x44
 8002646:	4b5a      	ldr	r3, [pc, #360]	@ (80027b0 <HAL_GPIO_Init+0x300>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_GPIO_Init+0x304>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_GPIO_Init+0x308>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x21a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_GPIO_Init+0x30c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x216>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_GPIO_Init+0x310>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x212>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4c      	ldr	r2, [pc, #304]	@ (80027c4 <HAL_GPIO_Init+0x314>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <HAL_GPIO_Init+0x318>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x20a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4a      	ldr	r2, [pc, #296]	@ (80027cc <HAL_GPIO_Init+0x31c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x206>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a49      	ldr	r2, [pc, #292]	@ (80027d0 <HAL_GPIO_Init+0x320>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x202>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	@ (80027b4 <HAL_GPIO_Init+0x304>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3a      	ldr	r3, [pc, #232]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a31      	ldr	r2, [pc, #196]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1c      	ldr	r2, [pc, #112]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae96 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	@ 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0cc      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d90c      	bls.n	8002848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b65      	ldr	r3, [pc, #404]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a58      	ldr	r2, [pc, #352]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800286a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a52      	ldr	r2, [pc, #328]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d044      	beq.n	800292c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d119      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e067      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4934      	ldr	r1, [pc, #208]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7ff fc04 	bl	8002108 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7ff fc00 	bl	8002108 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e04f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d20c      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f855 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	490a      	ldr	r1, [pc, #40]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	5ccb      	ldrb	r3, [r1, r3]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fb64 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023c00 	.word	0x40023c00
 80029c8:	40023800 	.word	0x40023800
 80029cc:	080056b0 	.word	0x080056b0
 80029d0:	20000028 	.word	0x20000028
 80029d4:	2000002c 	.word	0x2000002c

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000028 	.word	0x20000028

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f4:	f7ff fff0 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0a9b      	lsrs	r3, r3, #10
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	080056c0 	.word	0x080056c0

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a1c:	f7ff ffdc 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0b5b      	lsrs	r3, r3, #13
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	@ (8002a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	080056c0 	.word	0x080056c0

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b0a6      	sub	sp, #152	@ 0x98
 8002a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a66:	4bc8      	ldr	r3, [pc, #800]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	f200 817e 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x330>
 8002a74:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002d71 	.word	0x08002d71
 8002a84:	08002d71 	.word	0x08002d71
 8002a88:	08002d71 	.word	0x08002d71
 8002a8c:	08002ab9 	.word	0x08002ab9
 8002a90:	08002d71 	.word	0x08002d71
 8002a94:	08002d71 	.word	0x08002d71
 8002a98:	08002d71 	.word	0x08002d71
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002d71 	.word	0x08002d71
 8002aa4:	08002d71 	.word	0x08002d71
 8002aa8:	08002d71 	.word	0x08002d71
 8002aac:	08002c2b 	.word	0x08002c2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4bb6      	ldr	r3, [pc, #728]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ab6:	e15f      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab8:	4bb5      	ldr	r3, [pc, #724]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002abe:	e15b      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac0:	4bb1      	ldr	r3, [pc, #708]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002acc:	4bae      	ldr	r3, [pc, #696]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d031      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad8:	4bab      	ldr	r3, [pc, #684]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	2200      	movs	r2, #0
 8002ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aec:	2300      	movs	r3, #0
 8002aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8002af0:	4ba7      	ldr	r3, [pc, #668]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8002af2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002af6:	462a      	mov	r2, r5
 8002af8:	fb03 f202 	mul.w	r2, r3, r2
 8002afc:	2300      	movs	r3, #0
 8002afe:	4621      	mov	r1, r4
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	4aa2      	ldr	r2, [pc, #648]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b08:	4621      	mov	r1, r4
 8002b0a:	fba1 1202 	umull	r1, r2, r1, r2
 8002b0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b10:	460a      	mov	r2, r1
 8002b12:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002b14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b16:	4413      	add	r3, r2
 8002b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1e:	2200      	movs	r2, #0
 8002b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b2c:	f7fd ffbe 	bl	8000aac <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4613      	mov	r3, r2
 8002b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b3a:	e064      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b92      	ldr	r3, [pc, #584]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b46:	657a      	str	r2, [r7, #84]	@ 0x54
 8002b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b50:	2300      	movs	r3, #0
 8002b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002b58:	4622      	mov	r2, r4
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	f04f 0000 	mov.w	r0, #0
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	0159      	lsls	r1, r3, #5
 8002b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6a:	0150      	lsls	r0, r2, #5
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4621      	mov	r1, r4
 8002b72:	1a51      	subs	r1, r2, r1
 8002b74:	6139      	str	r1, [r7, #16]
 8002b76:	4629      	mov	r1, r5
 8002b78:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b8a:	4659      	mov	r1, fp
 8002b8c:	018b      	lsls	r3, r1, #6
 8002b8e:	4651      	mov	r1, sl
 8002b90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b94:	4651      	mov	r1, sl
 8002b96:	018a      	lsls	r2, r1, #6
 8002b98:	4651      	mov	r1, sl
 8002b9a:	ebb2 0801 	subs.w	r8, r2, r1
 8002b9e:	4659      	mov	r1, fp
 8002ba0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb8:	4690      	mov	r8, r2
 8002bba:	4699      	mov	r9, r3
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	eb18 0303 	adds.w	r3, r8, r3
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	eb49 0303 	adc.w	r3, r9, r3
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bd8:	4629      	mov	r1, r5
 8002bda:	028b      	lsls	r3, r1, #10
 8002bdc:	4621      	mov	r1, r4
 8002bde:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be2:	4621      	mov	r1, r4
 8002be4:	028a      	lsls	r2, r1, #10
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bee:	2200      	movs	r2, #0
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bf8:	f7fd ff58 	bl	8000aac <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c06:	4b60      	ldr	r3, [pc, #384]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	3301      	adds	r3, #1
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c28:	e0a6      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2a:	4b57      	ldr	r3, [pc, #348]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c36:	4b54      	ldr	r3, [pc, #336]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02a      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b51      	ldr	r3, [pc, #324]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c54:	2100      	movs	r1, #0
 8002c56:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c58:	fb03 f201 	mul.w	r2, r3, r1
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	fb00 f303 	mul.w	r3, r0, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	4a4a      	ldr	r2, [pc, #296]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c66:	fba0 1202 	umull	r1, r2, r0, r2
 8002c6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002c70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c72:	4413      	add	r3, r2
 8002c74:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002c88:	f7fd ff10 	bl	8000aac <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c96:	e05b      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c98:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	f04f 0000 	mov.w	r0, #0
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	0159      	lsls	r1, r3, #5
 8002cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc6:	0150      	lsls	r0, r2, #5
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4641      	mov	r1, r8
 8002cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cec:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	00eb      	lsls	r3, r5, #3
 8002cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d02:	00e2      	lsls	r2, r4, #3
 8002d04:	4614      	mov	r4, r2
 8002d06:	461d      	mov	r5, r3
 8002d08:	4643      	mov	r3, r8
 8002d0a:	18e3      	adds	r3, r4, r3
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	464b      	mov	r3, r9
 8002d10:	eb45 0303 	adc.w	r3, r5, r3
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d22:	4629      	mov	r1, r5
 8002d24:	028b      	lsls	r3, r1, #10
 8002d26:	4621      	mov	r1, r4
 8002d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	028a      	lsls	r2, r1, #10
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	61fa      	str	r2, [r7, #28]
 8002d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d42:	f7fd feb3 	bl	8000aac <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	0f1b      	lsrs	r3, r3, #28
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3798      	adds	r7, #152	@ 0x98
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	017d7840 	.word	0x017d7840

08002d94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e28d      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8083 	beq.w	8002eba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002db4:	4b94      	ldr	r3, [pc, #592]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d019      	beq.n	8002df4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dc0:	4b91      	ldr	r3, [pc, #580]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b8b      	ldr	r3, [pc, #556]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b88      	ldr	r3, [pc, #544]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4b84      	ldr	r3, [pc, #528]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x124>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d157      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e25a      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x90>
 8002e16:	4b7c      	ldr	r3, [pc, #496]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xcc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0xb4>
 8002e2e:	4b76      	ldr	r3, [pc, #472]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a75      	ldr	r2, [pc, #468]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b73      	ldr	r3, [pc, #460]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a72      	ldr	r2, [pc, #456]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xcc>
 8002e48:	4b6f      	ldr	r3, [pc, #444]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b6c      	ldr	r3, [pc, #432]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6b      	ldr	r2, [pc, #428]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff f94e 	bl	8002108 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7ff f94a 	bl	8002108 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e21f      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b61      	ldr	r3, [pc, #388]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xdc>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff f93a 	bl	8002108 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7ff f936 	bl	8002108 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e20b      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b57      	ldr	r3, [pc, #348]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x104>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d06f      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ec6:	4b50      	ldr	r3, [pc, #320]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d017      	beq.n	8002f02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ede:	4b4a      	ldr	r3, [pc, #296]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b44      	ldr	r3, [pc, #272]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	4b41      	ldr	r3, [pc, #260]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x186>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1d3      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4937      	ldr	r1, [pc, #220]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	e03a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f38:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_RCC_OscConfig+0x278>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f8e3 	bl	8002108 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff f8df 	bl	8002108 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1b4      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4925      	ldr	r1, [pc, #148]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b24      	ldr	r3, [pc, #144]	@ (800300c <HAL_RCC_OscConfig+0x278>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff f8c2 	bl	8002108 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7ff f8be 	bl	8002108 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e193      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d036      	beq.n	8003020 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7ff f8a2 	bl	8002108 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7ff f89e 	bl	8002108 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e173      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x234>
 8002fe6:	e01b      	b.n	8003020 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7ff f88b 	bl	8002108 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	e00e      	b.n	8003014 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7ff f887 	bl	8002108 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d907      	bls.n	8003014 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e15c      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
 8003008:	40023800 	.word	0x40023800
 800300c:	42470000 	.word	0x42470000
 8003010:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	4b8a      	ldr	r3, [pc, #552]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ea      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8097 	beq.w	800315c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003032:	4b83      	ldr	r3, [pc, #524]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	4a7e      	ldr	r2, [pc, #504]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	@ 0x40
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b79      	ldr	r3, [pc, #484]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b76      	ldr	r3, [pc, #472]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a75      	ldr	r2, [pc, #468]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7ff f847 	bl	8002108 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7ff f843 	bl	8002108 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e118      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b6c      	ldr	r3, [pc, #432]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x31e>
 80030a4:	4b66      	ldr	r3, [pc, #408]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4a65      	ldr	r2, [pc, #404]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b0:	e01c      	b.n	80030ec <HAL_RCC_OscConfig+0x358>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x340>
 80030ba:	4b61      	ldr	r3, [pc, #388]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a60      	ldr	r2, [pc, #384]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0x358>
 80030d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	4a59      	ldr	r2, [pc, #356]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e0:	4b57      	ldr	r3, [pc, #348]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e4:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7ff f808 	bl	8002108 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7ff f804 	bl	8002108 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0d7      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	4b4b      	ldr	r3, [pc, #300]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0ee      	beq.n	80030fc <HAL_RCC_OscConfig+0x368>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fff2 	bl	8002108 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe ffee 	bl	8002108 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0c1      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	4b40      	ldr	r3, [pc, #256]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ee      	bne.n	8003128 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	4a3a      	ldr	r2, [pc, #232]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80ad 	beq.w	80032c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003166:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	d060      	beq.n	8003234 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d145      	bne.n	8003206 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <HAL_RCC_OscConfig+0x4b4>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe ffc2 	bl	8002108 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe ffbe 	bl	8002108 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e093      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	491b      	ldr	r1, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x4b4>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe ff93 	bl	8002108 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe ff8f 	bl	8002108 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e064      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x452>
 8003204:	e05c      	b.n	80032c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_OscConfig+0x4b4>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe ff7c 	bl	8002108 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe ff78 	bl	8002108 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04d      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x480>
 8003232:	e045      	b.n	80032c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e040      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000
 8003248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <HAL_RCC_OscConfig+0x538>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d030      	beq.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d129      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d122      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	4293      	cmp	r3, r2
 8003286:	d119      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	3b01      	subs	r3, #1
 8003296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d10f      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e041      	b.n	8003366 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fcb2 	bl	8001c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f9b8 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_TIM_PWM_Start+0x24>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e022      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d109      	bne.n	80033ae <HAL_TIM_PWM_Start+0x3e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e015      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d109      	bne.n	80033c8 <HAL_TIM_PWM_Start+0x58>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e008      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07c      	b.n	80034dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x82>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f0:	e013      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0x92>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003400:	e00b      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003410:	e003      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fb8a 	bl	8003b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <HAL_TIM_PWM_Start+0x174>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_PWM_Start+0xcc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2c      	ldr	r2, [pc, #176]	@ (80034e8 <HAL_TIM_PWM_Start+0x178>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_TIM_PWM_Start+0xd0>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_TIM_PWM_Start+0xd2>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a22      	ldr	r2, [pc, #136]	@ (80034e4 <HAL_TIM_PWM_Start+0x174>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003468:	d01d      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_TIM_PWM_Start+0x17c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <HAL_TIM_PWM_Start+0x180>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <HAL_TIM_PWM_Start+0x184>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <HAL_TIM_PWM_Start+0x178>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_TIM_PWM_Start+0x188>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <HAL_TIM_PWM_Start+0x18c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d010      	beq.n	80034da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	e007      	b.n	80034da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40010400 	.word	0x40010400
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40000c00 	.word	0x40000c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40001800 	.word	0x40001800

08003500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800351a:	2302      	movs	r3, #2
 800351c:	e0ae      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	f200 809f 	bhi.w	800366c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800352e:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003569 	.word	0x08003569
 8003538:	0800366d 	.word	0x0800366d
 800353c:	0800366d 	.word	0x0800366d
 8003540:	0800366d 	.word	0x0800366d
 8003544:	080035a9 	.word	0x080035a9
 8003548:	0800366d 	.word	0x0800366d
 800354c:	0800366d 	.word	0x0800366d
 8003550:	0800366d 	.word	0x0800366d
 8003554:	080035eb 	.word	0x080035eb
 8003558:	0800366d 	.word	0x0800366d
 800355c:	0800366d 	.word	0x0800366d
 8003560:	0800366d 	.word	0x0800366d
 8003564:	0800362b 	.word	0x0800362b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f934 	bl	80037dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6999      	ldr	r1, [r3, #24]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	619a      	str	r2, [r3, #24]
      break;
 80035a6:	e064      	b.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f984 	bl	80038bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6999      	ldr	r1, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	619a      	str	r2, [r3, #24]
      break;
 80035e8:	e043      	b.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f9d9 	bl	80039a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0204 	bic.w	r2, r2, #4
 8003614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69d9      	ldr	r1, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	61da      	str	r2, [r3, #28]
      break;
 8003628:	e023      	b.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa2d 	bl	8003a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	021a      	lsls	r2, r3, #8
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	61da      	str	r2, [r3, #28]
      break;
 800366a:	e002      	b.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	75fb      	strb	r3, [r7, #23]
      break;
 8003670:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a46      	ldr	r2, [pc, #280]	@ (80037b0 <TIM_Base_SetConfig+0x12c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d00f      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a43      	ldr	r2, [pc, #268]	@ (80037b4 <TIM_Base_SetConfig+0x130>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a42      	ldr	r2, [pc, #264]	@ (80037b8 <TIM_Base_SetConfig+0x134>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a41      	ldr	r2, [pc, #260]	@ (80037bc <TIM_Base_SetConfig+0x138>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a40      	ldr	r2, [pc, #256]	@ (80037c0 <TIM_Base_SetConfig+0x13c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d108      	bne.n	80036d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a35      	ldr	r2, [pc, #212]	@ (80037b0 <TIM_Base_SetConfig+0x12c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e4:	d027      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a32      	ldr	r2, [pc, #200]	@ (80037b4 <TIM_Base_SetConfig+0x130>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d023      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a31      	ldr	r2, [pc, #196]	@ (80037b8 <TIM_Base_SetConfig+0x134>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a30      	ldr	r2, [pc, #192]	@ (80037bc <TIM_Base_SetConfig+0x138>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2f      	ldr	r2, [pc, #188]	@ (80037c0 <TIM_Base_SetConfig+0x13c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d017      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2e      	ldr	r2, [pc, #184]	@ (80037c4 <TIM_Base_SetConfig+0x140>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2d      	ldr	r2, [pc, #180]	@ (80037c8 <TIM_Base_SetConfig+0x144>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00f      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <TIM_Base_SetConfig+0x148>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2b      	ldr	r2, [pc, #172]	@ (80037d0 <TIM_Base_SetConfig+0x14c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a2a      	ldr	r2, [pc, #168]	@ (80037d4 <TIM_Base_SetConfig+0x150>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a29      	ldr	r2, [pc, #164]	@ (80037d8 <TIM_Base_SetConfig+0x154>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a10      	ldr	r2, [pc, #64]	@ (80037b0 <TIM_Base_SetConfig+0x12c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0xf8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a12      	ldr	r2, [pc, #72]	@ (80037c0 <TIM_Base_SetConfig+0x13c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]
  }
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	40001800 	.word	0x40001800
 80037d4:	40001c00 	.word	0x40001c00
 80037d8:	40002000 	.word	0x40002000

080037dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 0201 	bic.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 0302 	bic.w	r3, r3, #2
 8003824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a20      	ldr	r2, [pc, #128]	@ (80038b4 <TIM_OC1_SetConfig+0xd8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC1_SetConfig+0x64>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a1f      	ldr	r2, [pc, #124]	@ (80038b8 <TIM_OC1_SetConfig+0xdc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10c      	bne.n	800385a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0308 	bic.w	r3, r3, #8
 8003846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <TIM_OC1_SetConfig+0xd8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_OC1_SetConfig+0x8e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <TIM_OC1_SetConfig+0xdc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	621a      	str	r2, [r3, #32]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40010000 	.word	0x40010000
 80038b8:	40010400 	.word	0x40010400

080038bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0210 	bic.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0320 	bic.w	r3, r3, #32
 8003906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <TIM_OC2_SetConfig+0xe4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC2_SetConfig+0x68>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <TIM_OC2_SetConfig+0xe8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10d      	bne.n	8003940 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800392a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800393e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a17      	ldr	r2, [pc, #92]	@ (80039a0 <TIM_OC2_SetConfig+0xe4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC2_SetConfig+0x94>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <TIM_OC2_SetConfig+0xe8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d113      	bne.n	8003978 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800395e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010400 	.word	0x40010400

080039a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <TIM_OC3_SetConfig+0xe0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC3_SetConfig+0x66>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <TIM_OC3_SetConfig+0xe4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10d      	bne.n	8003a2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a16      	ldr	r2, [pc, #88]	@ (8003a88 <TIM_OC3_SetConfig+0xe0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_OC3_SetConfig+0x92>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a15      	ldr	r2, [pc, #84]	@ (8003a8c <TIM_OC3_SetConfig+0xe4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d113      	bne.n	8003a62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400

08003a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	031b      	lsls	r3, r3, #12
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <TIM_OC4_SetConfig+0xa4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC4_SetConfig+0x68>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a11      	ldr	r2, [pc, #68]	@ (8003b38 <TIM_OC4_SetConfig+0xa8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d109      	bne.n	8003b0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40010400 	.word	0x40010400

08003b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2201      	movs	r2, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e05a      	b.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a21      	ldr	r2, [pc, #132]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d022      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d01d      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d018      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10c      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40001800 	.word	0x40001800

08003c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e042      	b.n	8003d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe f8cc 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fdbd 	bl	8004844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	@ 0x28
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d175      	bne.n	8003e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Transmit+0x2c>
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e06e      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2221      	movs	r2, #33	@ 0x21
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d5e:	f7fe f9d3 	bl	8002108 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88fa      	ldrh	r2, [r7, #6]
 8003d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d78:	d108      	bne.n	8003d8c <HAL_UART_Transmit+0x6c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	e003      	b.n	8003d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d94:	e02e      	b.n	8003df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	@ 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fb1f 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e03a      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e007      	b.n	8003de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3301      	adds	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1cb      	bne.n	8003d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2140      	movs	r1, #64	@ 0x40
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 faeb 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d112      	bne.n	8003e76 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_UART_Receive_IT+0x26>
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e00b      	b.n	8003e78 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fb12 	bl	8004496 <UART_Start_Receive_IT>
 8003e72:	4603      	mov	r3, r0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ba      	sub	sp, #232	@ 0xe8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fbf2 	bl	80046c8 <UART_Receive_IT>
      return;
 8003ee4:	e25b      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80de 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80d1 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
 8003f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0208 	orr.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 81f2 	beq.w	8004394 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fb7d 	bl	80046c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_UART_IRQHandler+0x17a>
 8003ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04f      	beq.n	800409a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa85 	bl	800450a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d141      	bne.n	8004092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800403a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800403e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1d9      	bne.n	800400e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4a7e      	ldr	r2, [pc, #504]	@ (8004260 <HAL_UART_IRQHandler+0x3e0>)
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe f9fb 	bl	800246a <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00e      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f994 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00a      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f990 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e006      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f98c 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040a6:	e175      	b.n	8004394 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	bf00      	nop
    return;
 80040aa:	e173      	b.n	8004394 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 814f 	bne.w	8004354 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8148 	beq.w	8004354 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8141 	beq.w	8004354 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	f040 80b6 	bne.w	8004264 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8145 	beq.w	8004398 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004116:	429a      	cmp	r2, r3
 8004118:	f080 813e 	bcs.w	8004398 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412e:	f000 8088 	beq.w	8004242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800415e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800416a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1d9      	bne.n	8004132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800418e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e1      	bne.n	800417e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e3      	bne.n	80041ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004224:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004226:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800422a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe f8a4 	bl	800238a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8b7 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425e:	e09b      	b.n	8004398 <HAL_UART_IRQHandler+0x518>
 8004260:	080045d1 	.word	0x080045d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800426c:	b29b      	uxth	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 808e 	beq.w	800439c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8089 	beq.w	800439c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	623b      	str	r3, [r7, #32]
   return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0310 	bic.w	r3, r3, #16
 800431e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800432c:	61fa      	str	r2, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e3      	bne.n	8004308 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f83d 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004352:	e023      	b.n	800439c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_UART_IRQHandler+0x4f4>
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f943 	bl	80045f8 <UART_Transmit_IT>
    return;
 8004372:	e014      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00e      	beq.n	800439e <HAL_UART_IRQHandler+0x51e>
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f983 	bl	8004698 <UART_EndTransmit_IT>
    return;
 8004392:	e004      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
    return;
 8004394:	bf00      	nop
 8004396:	e002      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
      return;
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
      return;
 800439c:	bf00      	nop
  }
}
 800439e:	37e8      	adds	r7, #232	@ 0xe8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	e03b      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d037      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fd fe83 	bl	8002108 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <UART_WaitOnFlagUntilTimeout+0x30>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e03a      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b80      	cmp	r3, #128	@ 0x80
 800442a:	d020      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	d01d      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b08      	cmp	r3, #8
 800443e:	d116      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f857 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2208      	movs	r2, #8
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d0b4      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2222      	movs	r2, #34	@ 0x22
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b095      	sub	sp, #84	@ 0x54
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004532:	643a      	str	r2, [r7, #64]	@ 0x40
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	61fb      	str	r3, [r7, #28]
   return(result);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e5      	bne.n	8004546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	2b01      	cmp	r3, #1
 8004580:	d119      	bne.n	80045b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	60bb      	str	r3, [r7, #8]
   return(result);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f023 0310 	bic.w	r3, r3, #16
 8004598:	647b      	str	r3, [r7, #68]	@ 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a2:	61ba      	str	r2, [r7, #24]
 80045a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6979      	ldr	r1, [r7, #20]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	613b      	str	r3, [r7, #16]
   return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045c4:	bf00      	nop
 80045c6:	3754      	adds	r7, #84	@ 0x54
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fee4 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b21      	cmp	r3, #33	@ 0x21
 800460a:	d13e      	bne.n	800468a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004614:	d114      	bne.n	8004640 <UART_Transmit_IT+0x48>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d110      	bne.n	8004640 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004632:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]
 800463e:	e008      	b.n	8004652 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	1c59      	adds	r1, r3, #1
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6211      	str	r1, [r2, #32]
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4619      	mov	r1, r3
 8004660:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004674:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004684:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fe73 	bl	80043a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	@ 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b22      	cmp	r3, #34	@ 0x22
 80046da:	f040 80ae 	bne.w	800483a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d117      	bne.n	8004718 <UART_Receive_IT+0x50>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d113      	bne.n	8004718 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	b29a      	uxth	r2, r3
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	629a      	str	r2, [r3, #40]	@ 0x28
 8004716:	e026      	b.n	8004766 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d007      	beq.n	800473c <UART_Receive_IT+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <UART_Receive_IT+0x82>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e008      	b.n	800475c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	b2da      	uxtb	r2, r3
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29b      	uxth	r3, r3
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4619      	mov	r1, r3
 8004774:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15d      	bne.n	8004836 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0220 	bic.w	r2, r2, #32
 8004788:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d135      	bne.n	800482c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	613b      	str	r3, [r7, #16]
   return(result);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f023 0310 	bic.w	r3, r3, #16
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e6:	623a      	str	r2, [r7, #32]
 80047e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e5      	bne.n	80047c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d10a      	bne.n	800481e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fdd1 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 800482a:	e002      	b.n	8004832 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc ff51 	bl	80016d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e002      	b.n	800483c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800483a:	2302      	movs	r3, #2
  }
}
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	@ 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004848:	b0c0      	sub	sp, #256	@ 0x100
 800484a:	af00      	add	r7, sp, #0
 800484c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	68d9      	ldr	r1, [r3, #12]
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	ea40 0301 	orr.w	r3, r0, r1
 800486c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	431a      	orrs	r2, r3
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	431a      	orrs	r2, r3
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800489c:	f021 010c 	bic.w	r1, r1, #12
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048aa:	430b      	orrs	r3, r1
 80048ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048be:	6999      	ldr	r1, [r3, #24]
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	ea40 0301 	orr.w	r3, r0, r1
 80048ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004b10 <UART_SetConfig+0x2cc>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d005      	beq.n	80048e4 <UART_SetConfig+0xa0>
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b8d      	ldr	r3, [pc, #564]	@ (8004b14 <UART_SetConfig+0x2d0>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d104      	bne.n	80048ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe f898 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 80048e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048ec:	e003      	b.n	80048f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7fe f87f 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 80048f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004900:	f040 810c 	bne.w	8004b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800490e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	1891      	adds	r1, r2, r2
 800491c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800491e:	415b      	adcs	r3, r3
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004926:	4621      	mov	r1, r4
 8004928:	eb12 0801 	adds.w	r8, r2, r1
 800492c:	4629      	mov	r1, r5
 800492e:	eb43 0901 	adc.w	r9, r3, r1
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004946:	4690      	mov	r8, r2
 8004948:	4699      	mov	r9, r3
 800494a:	4623      	mov	r3, r4
 800494c:	eb18 0303 	adds.w	r3, r8, r3
 8004950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004954:	462b      	mov	r3, r5
 8004956:	eb49 0303 	adc.w	r3, r9, r3
 800495a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800496a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800496e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004972:	460b      	mov	r3, r1
 8004974:	18db      	adds	r3, r3, r3
 8004976:	653b      	str	r3, [r7, #80]	@ 0x50
 8004978:	4613      	mov	r3, r2
 800497a:	eb42 0303 	adc.w	r3, r2, r3
 800497e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004988:	f7fc f890 	bl	8000aac <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004992:	fba3 2302 	umull	r2, r3, r3, r2
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	011c      	lsls	r4, r3, #4
 800499a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049b4:	415b      	adcs	r3, r3
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049bc:	4641      	mov	r1, r8
 80049be:	eb12 0a01 	adds.w	sl, r2, r1
 80049c2:	4649      	mov	r1, r9
 80049c4:	eb43 0b01 	adc.w	fp, r3, r1
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049dc:	4692      	mov	sl, r2
 80049de:	469b      	mov	fp, r3
 80049e0:	4643      	mov	r3, r8
 80049e2:	eb1a 0303 	adds.w	r3, sl, r3
 80049e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049ea:	464b      	mov	r3, r9
 80049ec:	eb4b 0303 	adc.w	r3, fp, r3
 80049f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	18db      	adds	r3, r3, r3
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0e:	4613      	mov	r3, r2
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a1e:	f7fc f845 	bl	8000aac <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2264      	movs	r2, #100	@ 0x64
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	1acb      	subs	r3, r1, r3
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a3e:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004a40:	fba3 2302 	umull	r2, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a4c:	441c      	add	r4, r3
 8004a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	1891      	adds	r1, r2, r2
 8004a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a68:	415b      	adcs	r3, r3
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a70:	4641      	mov	r1, r8
 8004a72:	1851      	adds	r1, r2, r1
 8004a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a76:	4649      	mov	r1, r9
 8004a78:	414b      	adcs	r3, r1
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a88:	4659      	mov	r1, fp
 8004a8a:	00cb      	lsls	r3, r1, #3
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a92:	4651      	mov	r1, sl
 8004a94:	00ca      	lsls	r2, r1, #3
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004abc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	18db      	adds	r3, r3, r3
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aca:	4613      	mov	r3, r2
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ada:	f7fb ffe7 	bl	8000aac <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	2164      	movs	r1, #100	@ 0x64
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	3332      	adds	r3, #50	@ 0x32
 8004af6:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	f003 0207 	and.w	r2, r3, #7
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4422      	add	r2, r4
 8004b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b0c:	e106      	b.n	8004d1c <UART_SetConfig+0x4d8>
 8004b0e:	bf00      	nop
 8004b10:	40011000 	.word	0x40011000
 8004b14:	40011400 	.word	0x40011400
 8004b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b2e:	4642      	mov	r2, r8
 8004b30:	464b      	mov	r3, r9
 8004b32:	1891      	adds	r1, r2, r2
 8004b34:	6239      	str	r1, [r7, #32]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3e:	4641      	mov	r1, r8
 8004b40:	1854      	adds	r4, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0501 	adc.w	r5, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b64:	464b      	mov	r3, r9
 8004b66:	eb45 0303 	adc.w	r3, r5, r3
 8004b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b94:	4621      	mov	r1, r4
 8004b96:	008a      	lsls	r2, r1, #2
 8004b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b9c:	f7fb ff86 	bl	8000aac <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	011c      	lsls	r4, r3, #4
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	61b9      	str	r1, [r7, #24]
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	1851      	adds	r1, r2, r1
 8004bd4:	6139      	str	r1, [r7, #16]
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	414b      	adcs	r3, r1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be8:	4659      	mov	r1, fp
 8004bea:	00cb      	lsls	r3, r1, #3
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	00ca      	lsls	r2, r1, #3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c04:	464b      	mov	r3, r9
 8004c06:	460a      	mov	r2, r1
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c28:	4649      	mov	r1, r9
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c32:	4641      	mov	r1, r8
 8004c34:	008a      	lsls	r2, r1, #2
 8004c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c3a:	f7fb ff37 	bl	8000aac <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004c46:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2264      	movs	r2, #100	@ 0x64
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	1acb      	subs	r3, r1, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	@ 0x32
 8004c58:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c64:	441c      	add	r4, r3
 8004c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c84:	4641      	mov	r1, r8
 8004c86:	1851      	adds	r1, r2, r1
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	414b      	adcs	r3, r1
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	460a      	mov	r2, r1
 8004cba:	eb42 0303 	adc.w	r3, r2, r3
 8004cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cd8:	4649      	mov	r1, r9
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	008a      	lsls	r2, r1, #2
 8004ce6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cea:	f7fb fedf 	bl	8000aac <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	@ 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	@ 0x32
 8004d06:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4422      	add	r2, r4
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d28:	51eb851f 	.word	0x51eb851f

08004d2c <siprintf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	b500      	push	{lr}
 8004d30:	b09c      	sub	sp, #112	@ 0x70
 8004d32:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	9006      	str	r0, [sp, #24]
 8004d38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d3c:	4809      	ldr	r0, [pc, #36]	@ (8004d64 <siprintf+0x38>)
 8004d3e:	9107      	str	r1, [sp, #28]
 8004d40:	9104      	str	r1, [sp, #16]
 8004d42:	4909      	ldr	r1, [pc, #36]	@ (8004d68 <siprintf+0x3c>)
 8004d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d48:	9105      	str	r1, [sp, #20]
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	a902      	add	r1, sp, #8
 8004d50:	f000 f9a2 	bl	8005098 <_svfiprintf_r>
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	b01c      	add	sp, #112	@ 0x70
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000034 	.word	0x20000034
 8004d68:	ffff0208 	.word	0xffff0208

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <__errno>:
 8004d7c:	4b01      	ldr	r3, [pc, #4]	@ (8004d84 <__errno+0x8>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000034 	.word	0x20000034

08004d88 <__libc_init_array>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004dc0 <__libc_init_array+0x38>)
 8004d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8004dc4 <__libc_init_array+0x3c>)
 8004d8e:	1b64      	subs	r4, r4, r5
 8004d90:	10a4      	asrs	r4, r4, #2
 8004d92:	2600      	movs	r6, #0
 8004d94:	42a6      	cmp	r6, r4
 8004d96:	d109      	bne.n	8004dac <__libc_init_array+0x24>
 8004d98:	4d0b      	ldr	r5, [pc, #44]	@ (8004dc8 <__libc_init_array+0x40>)
 8004d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8004dcc <__libc_init_array+0x44>)
 8004d9c:	f000 fc66 	bl	800566c <_init>
 8004da0:	1b64      	subs	r4, r4, r5
 8004da2:	10a4      	asrs	r4, r4, #2
 8004da4:	2600      	movs	r6, #0
 8004da6:	42a6      	cmp	r6, r4
 8004da8:	d105      	bne.n	8004db6 <__libc_init_array+0x2e>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db0:	4798      	blx	r3
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7ee      	b.n	8004d94 <__libc_init_array+0xc>
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dba:	4798      	blx	r3
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	e7f2      	b.n	8004da6 <__libc_init_array+0x1e>
 8004dc0:	08005704 	.word	0x08005704
 8004dc4:	08005704 	.word	0x08005704
 8004dc8:	08005704 	.word	0x08005704
 8004dcc:	08005708 	.word	0x08005708

08004dd0 <__retarget_lock_acquire_recursive>:
 8004dd0:	4770      	bx	lr

08004dd2 <__retarget_lock_release_recursive>:
 8004dd2:	4770      	bx	lr

08004dd4 <memcpy>:
 8004dd4:	440a      	add	r2, r1
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ddc:	d100      	bne.n	8004de0 <memcpy+0xc>
 8004dde:	4770      	bx	lr
 8004de0:	b510      	push	{r4, lr}
 8004de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dea:	4291      	cmp	r1, r2
 8004dec:	d1f9      	bne.n	8004de2 <memcpy+0xe>
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <_free_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d041      	beq.n	8004e7c <_free_r+0x8c>
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f0c      	subs	r4, r1, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	18e4      	addlt	r4, r4, r3
 8004e04:	f000 f8e0 	bl	8004fc8 <__malloc_lock>
 8004e08:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <_free_r+0x90>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	b933      	cbnz	r3, 8004e1c <_free_r+0x2c>
 8004e0e:	6063      	str	r3, [r4, #4]
 8004e10:	6014      	str	r4, [r2, #0]
 8004e12:	4628      	mov	r0, r5
 8004e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e18:	f000 b8dc 	b.w	8004fd4 <__malloc_unlock>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d908      	bls.n	8004e32 <_free_r+0x42>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf01      	itttt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	1809      	addeq	r1, r1, r0
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	e7ed      	b.n	8004e0e <_free_r+0x1e>
 8004e32:	461a      	mov	r2, r3
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b10b      	cbz	r3, 8004e3c <_free_r+0x4c>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d9fa      	bls.n	8004e32 <_free_r+0x42>
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	1850      	adds	r0, r2, r1
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d10b      	bne.n	8004e5c <_free_r+0x6c>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	4401      	add	r1, r0
 8004e48:	1850      	adds	r0, r2, r1
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	d1e0      	bne.n	8004e12 <_free_r+0x22>
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	6053      	str	r3, [r2, #4]
 8004e56:	4408      	add	r0, r1
 8004e58:	6010      	str	r0, [r2, #0]
 8004e5a:	e7da      	b.n	8004e12 <_free_r+0x22>
 8004e5c:	d902      	bls.n	8004e64 <_free_r+0x74>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	e7d6      	b.n	8004e12 <_free_r+0x22>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	1821      	adds	r1, r4, r0
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf04      	itt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	bf04      	itt	eq
 8004e74:	1809      	addeq	r1, r1, r0
 8004e76:	6021      	streq	r1, [r4, #0]
 8004e78:	6054      	str	r4, [r2, #4]
 8004e7a:	e7ca      	b.n	8004e12 <_free_r+0x22>
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000324 	.word	0x20000324

08004e84 <sbrk_aligned>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec4 <sbrk_aligned+0x40>)
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	b911      	cbnz	r1, 8004e96 <sbrk_aligned+0x12>
 8004e90:	f000 fba6 	bl	80055e0 <_sbrk_r>
 8004e94:	6030      	str	r0, [r6, #0]
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fba1 	bl	80055e0 <_sbrk_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d103      	bne.n	8004eaa <sbrk_aligned+0x26>
 8004ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d0f8      	beq.n	8004ea6 <sbrk_aligned+0x22>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fb92 	bl	80055e0 <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1f2      	bne.n	8004ea6 <sbrk_aligned+0x22>
 8004ec0:	e7ef      	b.n	8004ea2 <sbrk_aligned+0x1e>
 8004ec2:	bf00      	nop
 8004ec4:	20000320 	.word	0x20000320

08004ec8 <_malloc_r>:
 8004ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ecc:	1ccd      	adds	r5, r1, #3
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	2d0c      	cmp	r5, #12
 8004ed6:	bf38      	it	cc
 8004ed8:	250c      	movcc	r5, #12
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	4606      	mov	r6, r0
 8004ede:	db01      	blt.n	8004ee4 <_malloc_r+0x1c>
 8004ee0:	42a9      	cmp	r1, r5
 8004ee2:	d904      	bls.n	8004eee <_malloc_r+0x26>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc4 <_malloc_r+0xfc>
 8004ef2:	f000 f869 	bl	8004fc8 <__malloc_lock>
 8004ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8004efa:	461c      	mov	r4, r3
 8004efc:	bb44      	cbnz	r4, 8004f50 <_malloc_r+0x88>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff ffbf 	bl	8004e84 <sbrk_aligned>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	d158      	bne.n	8004fbe <_malloc_r+0xf6>
 8004f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f10:	4627      	mov	r7, r4
 8004f12:	2f00      	cmp	r7, #0
 8004f14:	d143      	bne.n	8004f9e <_malloc_r+0xd6>
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	d04b      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	eb04 0903 	add.w	r9, r4, r3
 8004f24:	f000 fb5c 	bl	80055e0 <_sbrk_r>
 8004f28:	4581      	cmp	r9, r0
 8004f2a:	d142      	bne.n	8004fb2 <_malloc_r+0xea>
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	1a6d      	subs	r5, r5, r1
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa6 	bl	8004e84 <sbrk_aligned>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d03a      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	442b      	add	r3, r5
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	f8d8 3000 	ldr.w	r3, [r8]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	bb62      	cbnz	r2, 8004fa4 <_malloc_r+0xdc>
 8004f4a:	f8c8 7000 	str.w	r7, [r8]
 8004f4e:	e00f      	b.n	8004f70 <_malloc_r+0xa8>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	1b52      	subs	r2, r2, r5
 8004f54:	d420      	bmi.n	8004f98 <_malloc_r+0xd0>
 8004f56:	2a0b      	cmp	r2, #11
 8004f58:	d917      	bls.n	8004f8a <_malloc_r+0xc2>
 8004f5a:	1961      	adds	r1, r4, r5
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	bf18      	it	ne
 8004f62:	6059      	strne	r1, [r3, #4]
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	bf08      	it	eq
 8004f68:	f8c8 1000 	streq.w	r1, [r8]
 8004f6c:	5162      	str	r2, [r4, r5]
 8004f6e:	604b      	str	r3, [r1, #4]
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f82f 	bl	8004fd4 <__malloc_unlock>
 8004f76:	f104 000b 	add.w	r0, r4, #11
 8004f7a:	1d23      	adds	r3, r4, #4
 8004f7c:	f020 0007 	bic.w	r0, r0, #7
 8004f80:	1ac2      	subs	r2, r0, r3
 8004f82:	bf1c      	itt	ne
 8004f84:	1a1b      	subne	r3, r3, r0
 8004f86:	50a3      	strne	r3, [r4, r2]
 8004f88:	e7af      	b.n	8004eea <_malloc_r+0x22>
 8004f8a:	6862      	ldr	r2, [r4, #4]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	bf0c      	ite	eq
 8004f90:	f8c8 2000 	streq.w	r2, [r8]
 8004f94:	605a      	strne	r2, [r3, #4]
 8004f96:	e7eb      	b.n	8004f70 <_malloc_r+0xa8>
 8004f98:	4623      	mov	r3, r4
 8004f9a:	6864      	ldr	r4, [r4, #4]
 8004f9c:	e7ae      	b.n	8004efc <_malloc_r+0x34>
 8004f9e:	463c      	mov	r4, r7
 8004fa0:	687f      	ldr	r7, [r7, #4]
 8004fa2:	e7b6      	b.n	8004f12 <_malloc_r+0x4a>
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d1fb      	bne.n	8004fa4 <_malloc_r+0xdc>
 8004fac:	2300      	movs	r3, #0
 8004fae:	6053      	str	r3, [r2, #4]
 8004fb0:	e7de      	b.n	8004f70 <_malloc_r+0xa8>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 f80c 	bl	8004fd4 <__malloc_unlock>
 8004fbc:	e794      	b.n	8004ee8 <_malloc_r+0x20>
 8004fbe:	6005      	str	r5, [r0, #0]
 8004fc0:	e7d6      	b.n	8004f70 <_malloc_r+0xa8>
 8004fc2:	bf00      	nop
 8004fc4:	20000324 	.word	0x20000324

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	@ (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f7ff bf01 	b.w	8004dd0 <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	2000031c 	.word	0x2000031c

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	@ (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f7ff befc 	b.w	8004dd2 <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	2000031c 	.word	0x2000031c

08004fe0 <__ssputs_r>:
 8004fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	688e      	ldr	r6, [r1, #8]
 8004fe6:	461f      	mov	r7, r3
 8004fe8:	42be      	cmp	r6, r7
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	4682      	mov	sl, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	d82d      	bhi.n	8005050 <__ssputs_r+0x70>
 8004ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ff8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ffc:	d026      	beq.n	800504c <__ssputs_r+0x6c>
 8004ffe:	6965      	ldr	r5, [r4, #20]
 8005000:	6909      	ldr	r1, [r1, #16]
 8005002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005006:	eba3 0901 	sub.w	r9, r3, r1
 800500a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800500e:	1c7b      	adds	r3, r7, #1
 8005010:	444b      	add	r3, r9
 8005012:	106d      	asrs	r5, r5, #1
 8005014:	429d      	cmp	r5, r3
 8005016:	bf38      	it	cc
 8005018:	461d      	movcc	r5, r3
 800501a:	0553      	lsls	r3, r2, #21
 800501c:	d527      	bpl.n	800506e <__ssputs_r+0x8e>
 800501e:	4629      	mov	r1, r5
 8005020:	f7ff ff52 	bl	8004ec8 <_malloc_r>
 8005024:	4606      	mov	r6, r0
 8005026:	b360      	cbz	r0, 8005082 <__ssputs_r+0xa2>
 8005028:	6921      	ldr	r1, [r4, #16]
 800502a:	464a      	mov	r2, r9
 800502c:	f7ff fed2 	bl	8004dd4 <memcpy>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	6126      	str	r6, [r4, #16]
 800503e:	6165      	str	r5, [r4, #20]
 8005040:	444e      	add	r6, r9
 8005042:	eba5 0509 	sub.w	r5, r5, r9
 8005046:	6026      	str	r6, [r4, #0]
 8005048:	60a5      	str	r5, [r4, #8]
 800504a:	463e      	mov	r6, r7
 800504c:	42be      	cmp	r6, r7
 800504e:	d900      	bls.n	8005052 <__ssputs_r+0x72>
 8005050:	463e      	mov	r6, r7
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	4632      	mov	r2, r6
 8005056:	4641      	mov	r1, r8
 8005058:	f000 faa8 	bl	80055ac <memmove>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	1b9b      	subs	r3, r3, r6
 8005060:	60a3      	str	r3, [r4, #8]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	4433      	add	r3, r6
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	2000      	movs	r0, #0
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506e:	462a      	mov	r2, r5
 8005070:	f000 fac6 	bl	8005600 <_realloc_r>
 8005074:	4606      	mov	r6, r0
 8005076:	2800      	cmp	r0, #0
 8005078:	d1e0      	bne.n	800503c <__ssputs_r+0x5c>
 800507a:	6921      	ldr	r1, [r4, #16]
 800507c:	4650      	mov	r0, sl
 800507e:	f7ff feb7 	bl	8004df0 <_free_r>
 8005082:	230c      	movs	r3, #12
 8005084:	f8ca 3000 	str.w	r3, [sl]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e7e9      	b.n	800506a <__ssputs_r+0x8a>
	...

08005098 <_svfiprintf_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4698      	mov	r8, r3
 800509e:	898b      	ldrh	r3, [r1, #12]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	b09d      	sub	sp, #116	@ 0x74
 80050a4:	4607      	mov	r7, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	d510      	bpl.n	80050ce <_svfiprintf_r+0x36>
 80050ac:	690b      	ldr	r3, [r1, #16]
 80050ae:	b973      	cbnz	r3, 80050ce <_svfiprintf_r+0x36>
 80050b0:	2140      	movs	r1, #64	@ 0x40
 80050b2:	f7ff ff09 	bl	8004ec8 <_malloc_r>
 80050b6:	6028      	str	r0, [r5, #0]
 80050b8:	6128      	str	r0, [r5, #16]
 80050ba:	b930      	cbnz	r0, 80050ca <_svfiprintf_r+0x32>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	b01d      	add	sp, #116	@ 0x74
 80050c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ca:	2340      	movs	r3, #64	@ 0x40
 80050cc:	616b      	str	r3, [r5, #20]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80050d2:	2320      	movs	r3, #32
 80050d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050dc:	2330      	movs	r3, #48	@ 0x30
 80050de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800527c <_svfiprintf_r+0x1e4>
 80050e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050e6:	f04f 0901 	mov.w	r9, #1
 80050ea:	4623      	mov	r3, r4
 80050ec:	469a      	mov	sl, r3
 80050ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050f2:	b10a      	cbz	r2, 80050f8 <_svfiprintf_r+0x60>
 80050f4:	2a25      	cmp	r2, #37	@ 0x25
 80050f6:	d1f9      	bne.n	80050ec <_svfiprintf_r+0x54>
 80050f8:	ebba 0b04 	subs.w	fp, sl, r4
 80050fc:	d00b      	beq.n	8005116 <_svfiprintf_r+0x7e>
 80050fe:	465b      	mov	r3, fp
 8005100:	4622      	mov	r2, r4
 8005102:	4629      	mov	r1, r5
 8005104:	4638      	mov	r0, r7
 8005106:	f7ff ff6b 	bl	8004fe0 <__ssputs_r>
 800510a:	3001      	adds	r0, #1
 800510c:	f000 80a7 	beq.w	800525e <_svfiprintf_r+0x1c6>
 8005110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005112:	445a      	add	r2, fp
 8005114:	9209      	str	r2, [sp, #36]	@ 0x24
 8005116:	f89a 3000 	ldrb.w	r3, [sl]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 809f 	beq.w	800525e <_svfiprintf_r+0x1c6>
 8005120:	2300      	movs	r3, #0
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800512a:	f10a 0a01 	add.w	sl, sl, #1
 800512e:	9304      	str	r3, [sp, #16]
 8005130:	9307      	str	r3, [sp, #28]
 8005132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005136:	931a      	str	r3, [sp, #104]	@ 0x68
 8005138:	4654      	mov	r4, sl
 800513a:	2205      	movs	r2, #5
 800513c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005140:	484e      	ldr	r0, [pc, #312]	@ (800527c <_svfiprintf_r+0x1e4>)
 8005142:	f7fb f86d 	bl	8000220 <memchr>
 8005146:	9a04      	ldr	r2, [sp, #16]
 8005148:	b9d8      	cbnz	r0, 8005182 <_svfiprintf_r+0xea>
 800514a:	06d0      	lsls	r0, r2, #27
 800514c:	bf44      	itt	mi
 800514e:	2320      	movmi	r3, #32
 8005150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005154:	0711      	lsls	r1, r2, #28
 8005156:	bf44      	itt	mi
 8005158:	232b      	movmi	r3, #43	@ 0x2b
 800515a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800515e:	f89a 3000 	ldrb.w	r3, [sl]
 8005162:	2b2a      	cmp	r3, #42	@ 0x2a
 8005164:	d015      	beq.n	8005192 <_svfiprintf_r+0xfa>
 8005166:	9a07      	ldr	r2, [sp, #28]
 8005168:	4654      	mov	r4, sl
 800516a:	2000      	movs	r0, #0
 800516c:	f04f 0c0a 	mov.w	ip, #10
 8005170:	4621      	mov	r1, r4
 8005172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005176:	3b30      	subs	r3, #48	@ 0x30
 8005178:	2b09      	cmp	r3, #9
 800517a:	d94b      	bls.n	8005214 <_svfiprintf_r+0x17c>
 800517c:	b1b0      	cbz	r0, 80051ac <_svfiprintf_r+0x114>
 800517e:	9207      	str	r2, [sp, #28]
 8005180:	e014      	b.n	80051ac <_svfiprintf_r+0x114>
 8005182:	eba0 0308 	sub.w	r3, r0, r8
 8005186:	fa09 f303 	lsl.w	r3, r9, r3
 800518a:	4313      	orrs	r3, r2
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	46a2      	mov	sl, r4
 8005190:	e7d2      	b.n	8005138 <_svfiprintf_r+0xa0>
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	1d19      	adds	r1, r3, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	9103      	str	r1, [sp, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfbb      	ittet	lt
 800519e:	425b      	neglt	r3, r3
 80051a0:	f042 0202 	orrlt.w	r2, r2, #2
 80051a4:	9307      	strge	r3, [sp, #28]
 80051a6:	9307      	strlt	r3, [sp, #28]
 80051a8:	bfb8      	it	lt
 80051aa:	9204      	strlt	r2, [sp, #16]
 80051ac:	7823      	ldrb	r3, [r4, #0]
 80051ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80051b0:	d10a      	bne.n	80051c8 <_svfiprintf_r+0x130>
 80051b2:	7863      	ldrb	r3, [r4, #1]
 80051b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b6:	d132      	bne.n	800521e <_svfiprintf_r+0x186>
 80051b8:	9b03      	ldr	r3, [sp, #12]
 80051ba:	1d1a      	adds	r2, r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	9203      	str	r2, [sp, #12]
 80051c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051c4:	3402      	adds	r4, #2
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800528c <_svfiprintf_r+0x1f4>
 80051cc:	7821      	ldrb	r1, [r4, #0]
 80051ce:	2203      	movs	r2, #3
 80051d0:	4650      	mov	r0, sl
 80051d2:	f7fb f825 	bl	8000220 <memchr>
 80051d6:	b138      	cbz	r0, 80051e8 <_svfiprintf_r+0x150>
 80051d8:	9b04      	ldr	r3, [sp, #16]
 80051da:	eba0 000a 	sub.w	r0, r0, sl
 80051de:	2240      	movs	r2, #64	@ 0x40
 80051e0:	4082      	lsls	r2, r0
 80051e2:	4313      	orrs	r3, r2
 80051e4:	3401      	adds	r4, #1
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	4824      	ldr	r0, [pc, #144]	@ (8005280 <_svfiprintf_r+0x1e8>)
 80051ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051f2:	2206      	movs	r2, #6
 80051f4:	f7fb f814 	bl	8000220 <memchr>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d036      	beq.n	800526a <_svfiprintf_r+0x1d2>
 80051fc:	4b21      	ldr	r3, [pc, #132]	@ (8005284 <_svfiprintf_r+0x1ec>)
 80051fe:	bb1b      	cbnz	r3, 8005248 <_svfiprintf_r+0x1b0>
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	3307      	adds	r3, #7
 8005204:	f023 0307 	bic.w	r3, r3, #7
 8005208:	3308      	adds	r3, #8
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520e:	4433      	add	r3, r6
 8005210:	9309      	str	r3, [sp, #36]	@ 0x24
 8005212:	e76a      	b.n	80050ea <_svfiprintf_r+0x52>
 8005214:	fb0c 3202 	mla	r2, ip, r2, r3
 8005218:	460c      	mov	r4, r1
 800521a:	2001      	movs	r0, #1
 800521c:	e7a8      	b.n	8005170 <_svfiprintf_r+0xd8>
 800521e:	2300      	movs	r3, #0
 8005220:	3401      	adds	r4, #1
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0c0a 	mov.w	ip, #10
 800522a:	4620      	mov	r0, r4
 800522c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005230:	3a30      	subs	r2, #48	@ 0x30
 8005232:	2a09      	cmp	r2, #9
 8005234:	d903      	bls.n	800523e <_svfiprintf_r+0x1a6>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0c6      	beq.n	80051c8 <_svfiprintf_r+0x130>
 800523a:	9105      	str	r1, [sp, #20]
 800523c:	e7c4      	b.n	80051c8 <_svfiprintf_r+0x130>
 800523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005242:	4604      	mov	r4, r0
 8005244:	2301      	movs	r3, #1
 8005246:	e7f0      	b.n	800522a <_svfiprintf_r+0x192>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <_svfiprintf_r+0x1f0>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4638      	mov	r0, r7
 8005254:	f3af 8000 	nop.w
 8005258:	1c42      	adds	r2, r0, #1
 800525a:	4606      	mov	r6, r0
 800525c:	d1d6      	bne.n	800520c <_svfiprintf_r+0x174>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	065b      	lsls	r3, r3, #25
 8005262:	f53f af2d 	bmi.w	80050c0 <_svfiprintf_r+0x28>
 8005266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005268:	e72c      	b.n	80050c4 <_svfiprintf_r+0x2c>
 800526a:	ab03      	add	r3, sp, #12
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	462a      	mov	r2, r5
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <_svfiprintf_r+0x1f0>)
 8005272:	a904      	add	r1, sp, #16
 8005274:	4638      	mov	r0, r7
 8005276:	f000 f879 	bl	800536c <_printf_i>
 800527a:	e7ed      	b.n	8005258 <_svfiprintf_r+0x1c0>
 800527c:	080056c8 	.word	0x080056c8
 8005280:	080056d2 	.word	0x080056d2
 8005284:	00000000 	.word	0x00000000
 8005288:	08004fe1 	.word	0x08004fe1
 800528c:	080056ce 	.word	0x080056ce

08005290 <_printf_common>:
 8005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	4616      	mov	r6, r2
 8005296:	4698      	mov	r8, r3
 8005298:	688a      	ldr	r2, [r1, #8]
 800529a:	690b      	ldr	r3, [r1, #16]
 800529c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	bfb8      	it	lt
 80052a4:	4613      	movlt	r3, r2
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052ac:	4607      	mov	r7, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	b10a      	cbz	r2, 80052b6 <_printf_common+0x26>
 80052b2:	3301      	adds	r3, #1
 80052b4:	6033      	str	r3, [r6, #0]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	0699      	lsls	r1, r3, #26
 80052ba:	bf42      	ittt	mi
 80052bc:	6833      	ldrmi	r3, [r6, #0]
 80052be:	3302      	addmi	r3, #2
 80052c0:	6033      	strmi	r3, [r6, #0]
 80052c2:	6825      	ldr	r5, [r4, #0]
 80052c4:	f015 0506 	ands.w	r5, r5, #6
 80052c8:	d106      	bne.n	80052d8 <_printf_common+0x48>
 80052ca:	f104 0a19 	add.w	sl, r4, #25
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	6832      	ldr	r2, [r6, #0]
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dc26      	bgt.n	8005326 <_printf_common+0x96>
 80052d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	3b00      	subs	r3, #0
 80052e0:	bf18      	it	ne
 80052e2:	2301      	movne	r3, #1
 80052e4:	0692      	lsls	r2, r2, #26
 80052e6:	d42b      	bmi.n	8005340 <_printf_common+0xb0>
 80052e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052ec:	4641      	mov	r1, r8
 80052ee:	4638      	mov	r0, r7
 80052f0:	47c8      	blx	r9
 80052f2:	3001      	adds	r0, #1
 80052f4:	d01e      	beq.n	8005334 <_printf_common+0xa4>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	6922      	ldr	r2, [r4, #16]
 80052fa:	f003 0306 	and.w	r3, r3, #6
 80052fe:	2b04      	cmp	r3, #4
 8005300:	bf02      	ittt	eq
 8005302:	68e5      	ldreq	r5, [r4, #12]
 8005304:	6833      	ldreq	r3, [r6, #0]
 8005306:	1aed      	subeq	r5, r5, r3
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	bf0c      	ite	eq
 800530c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005310:	2500      	movne	r5, #0
 8005312:	4293      	cmp	r3, r2
 8005314:	bfc4      	itt	gt
 8005316:	1a9b      	subgt	r3, r3, r2
 8005318:	18ed      	addgt	r5, r5, r3
 800531a:	2600      	movs	r6, #0
 800531c:	341a      	adds	r4, #26
 800531e:	42b5      	cmp	r5, r6
 8005320:	d11a      	bne.n	8005358 <_printf_common+0xc8>
 8005322:	2000      	movs	r0, #0
 8005324:	e008      	b.n	8005338 <_printf_common+0xa8>
 8005326:	2301      	movs	r3, #1
 8005328:	4652      	mov	r2, sl
 800532a:	4641      	mov	r1, r8
 800532c:	4638      	mov	r0, r7
 800532e:	47c8      	blx	r9
 8005330:	3001      	adds	r0, #1
 8005332:	d103      	bne.n	800533c <_printf_common+0xac>
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533c:	3501      	adds	r5, #1
 800533e:	e7c6      	b.n	80052ce <_printf_common+0x3e>
 8005340:	18e1      	adds	r1, r4, r3
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	2030      	movs	r0, #48	@ 0x30
 8005346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800534a:	4422      	add	r2, r4
 800534c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005354:	3302      	adds	r3, #2
 8005356:	e7c7      	b.n	80052e8 <_printf_common+0x58>
 8005358:	2301      	movs	r3, #1
 800535a:	4622      	mov	r2, r4
 800535c:	4641      	mov	r1, r8
 800535e:	4638      	mov	r0, r7
 8005360:	47c8      	blx	r9
 8005362:	3001      	adds	r0, #1
 8005364:	d0e6      	beq.n	8005334 <_printf_common+0xa4>
 8005366:	3601      	adds	r6, #1
 8005368:	e7d9      	b.n	800531e <_printf_common+0x8e>
	...

0800536c <_printf_i>:
 800536c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	7e0f      	ldrb	r7, [r1, #24]
 8005372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005374:	2f78      	cmp	r7, #120	@ 0x78
 8005376:	4691      	mov	r9, r2
 8005378:	4680      	mov	r8, r0
 800537a:	460c      	mov	r4, r1
 800537c:	469a      	mov	sl, r3
 800537e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005382:	d807      	bhi.n	8005394 <_printf_i+0x28>
 8005384:	2f62      	cmp	r7, #98	@ 0x62
 8005386:	d80a      	bhi.n	800539e <_printf_i+0x32>
 8005388:	2f00      	cmp	r7, #0
 800538a:	f000 80d2 	beq.w	8005532 <_printf_i+0x1c6>
 800538e:	2f58      	cmp	r7, #88	@ 0x58
 8005390:	f000 80b9 	beq.w	8005506 <_printf_i+0x19a>
 8005394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800539c:	e03a      	b.n	8005414 <_printf_i+0xa8>
 800539e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053a2:	2b15      	cmp	r3, #21
 80053a4:	d8f6      	bhi.n	8005394 <_printf_i+0x28>
 80053a6:	a101      	add	r1, pc, #4	@ (adr r1, 80053ac <_printf_i+0x40>)
 80053a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053ac:	08005405 	.word	0x08005405
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005395 	.word	0x08005395
 80053b8:	08005395 	.word	0x08005395
 80053bc:	08005395 	.word	0x08005395
 80053c0:	08005395 	.word	0x08005395
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005395 	.word	0x08005395
 80053cc:	08005395 	.word	0x08005395
 80053d0:	08005395 	.word	0x08005395
 80053d4:	08005395 	.word	0x08005395
 80053d8:	08005519 	.word	0x08005519
 80053dc:	08005443 	.word	0x08005443
 80053e0:	080054d3 	.word	0x080054d3
 80053e4:	08005395 	.word	0x08005395
 80053e8:	08005395 	.word	0x08005395
 80053ec:	0800553b 	.word	0x0800553b
 80053f0:	08005395 	.word	0x08005395
 80053f4:	08005443 	.word	0x08005443
 80053f8:	08005395 	.word	0x08005395
 80053fc:	08005395 	.word	0x08005395
 8005400:	080054db 	.word	0x080054db
 8005404:	6833      	ldr	r3, [r6, #0]
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6032      	str	r2, [r6, #0]
 800540c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005414:	2301      	movs	r3, #1
 8005416:	e09d      	b.n	8005554 <_printf_i+0x1e8>
 8005418:	6833      	ldr	r3, [r6, #0]
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	1d19      	adds	r1, r3, #4
 800541e:	6031      	str	r1, [r6, #0]
 8005420:	0606      	lsls	r6, r0, #24
 8005422:	d501      	bpl.n	8005428 <_printf_i+0xbc>
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	e003      	b.n	8005430 <_printf_i+0xc4>
 8005428:	0645      	lsls	r5, r0, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0xb8>
 800542c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005430:	2d00      	cmp	r5, #0
 8005432:	da03      	bge.n	800543c <_printf_i+0xd0>
 8005434:	232d      	movs	r3, #45	@ 0x2d
 8005436:	426d      	negs	r5, r5
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800543c:	4859      	ldr	r0, [pc, #356]	@ (80055a4 <_printf_i+0x238>)
 800543e:	230a      	movs	r3, #10
 8005440:	e011      	b.n	8005466 <_printf_i+0xfa>
 8005442:	6821      	ldr	r1, [r4, #0]
 8005444:	6833      	ldr	r3, [r6, #0]
 8005446:	0608      	lsls	r0, r1, #24
 8005448:	f853 5b04 	ldr.w	r5, [r3], #4
 800544c:	d402      	bmi.n	8005454 <_printf_i+0xe8>
 800544e:	0649      	lsls	r1, r1, #25
 8005450:	bf48      	it	mi
 8005452:	b2ad      	uxthmi	r5, r5
 8005454:	2f6f      	cmp	r7, #111	@ 0x6f
 8005456:	4853      	ldr	r0, [pc, #332]	@ (80055a4 <_printf_i+0x238>)
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	bf14      	ite	ne
 800545c:	230a      	movne	r3, #10
 800545e:	2308      	moveq	r3, #8
 8005460:	2100      	movs	r1, #0
 8005462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005466:	6866      	ldr	r6, [r4, #4]
 8005468:	60a6      	str	r6, [r4, #8]
 800546a:	2e00      	cmp	r6, #0
 800546c:	bfa2      	ittt	ge
 800546e:	6821      	ldrge	r1, [r4, #0]
 8005470:	f021 0104 	bicge.w	r1, r1, #4
 8005474:	6021      	strge	r1, [r4, #0]
 8005476:	b90d      	cbnz	r5, 800547c <_printf_i+0x110>
 8005478:	2e00      	cmp	r6, #0
 800547a:	d04b      	beq.n	8005514 <_printf_i+0x1a8>
 800547c:	4616      	mov	r6, r2
 800547e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005482:	fb03 5711 	mls	r7, r3, r1, r5
 8005486:	5dc7      	ldrb	r7, [r0, r7]
 8005488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800548c:	462f      	mov	r7, r5
 800548e:	42bb      	cmp	r3, r7
 8005490:	460d      	mov	r5, r1
 8005492:	d9f4      	bls.n	800547e <_printf_i+0x112>
 8005494:	2b08      	cmp	r3, #8
 8005496:	d10b      	bne.n	80054b0 <_printf_i+0x144>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	07df      	lsls	r7, r3, #31
 800549c:	d508      	bpl.n	80054b0 <_printf_i+0x144>
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	6861      	ldr	r1, [r4, #4]
 80054a2:	4299      	cmp	r1, r3
 80054a4:	bfde      	ittt	le
 80054a6:	2330      	movle	r3, #48	@ 0x30
 80054a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054b0:	1b92      	subs	r2, r2, r6
 80054b2:	6122      	str	r2, [r4, #16]
 80054b4:	f8cd a000 	str.w	sl, [sp]
 80054b8:	464b      	mov	r3, r9
 80054ba:	aa03      	add	r2, sp, #12
 80054bc:	4621      	mov	r1, r4
 80054be:	4640      	mov	r0, r8
 80054c0:	f7ff fee6 	bl	8005290 <_printf_common>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d14a      	bne.n	800555e <_printf_i+0x1f2>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	b004      	add	sp, #16
 80054ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	4833      	ldr	r0, [pc, #204]	@ (80055a8 <_printf_i+0x23c>)
 80054dc:	2778      	movs	r7, #120	@ 0x78
 80054de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	6831      	ldr	r1, [r6, #0]
 80054e6:	061f      	lsls	r7, r3, #24
 80054e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80054ec:	d402      	bmi.n	80054f4 <_printf_i+0x188>
 80054ee:	065f      	lsls	r7, r3, #25
 80054f0:	bf48      	it	mi
 80054f2:	b2ad      	uxthmi	r5, r5
 80054f4:	6031      	str	r1, [r6, #0]
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	bf44      	itt	mi
 80054fa:	f043 0320 	orrmi.w	r3, r3, #32
 80054fe:	6023      	strmi	r3, [r4, #0]
 8005500:	b11d      	cbz	r5, 800550a <_printf_i+0x19e>
 8005502:	2310      	movs	r3, #16
 8005504:	e7ac      	b.n	8005460 <_printf_i+0xf4>
 8005506:	4827      	ldr	r0, [pc, #156]	@ (80055a4 <_printf_i+0x238>)
 8005508:	e7e9      	b.n	80054de <_printf_i+0x172>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f023 0320 	bic.w	r3, r3, #32
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	e7f6      	b.n	8005502 <_printf_i+0x196>
 8005514:	4616      	mov	r6, r2
 8005516:	e7bd      	b.n	8005494 <_printf_i+0x128>
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	6825      	ldr	r5, [r4, #0]
 800551c:	6961      	ldr	r1, [r4, #20]
 800551e:	1d18      	adds	r0, r3, #4
 8005520:	6030      	str	r0, [r6, #0]
 8005522:	062e      	lsls	r6, r5, #24
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	d501      	bpl.n	800552c <_printf_i+0x1c0>
 8005528:	6019      	str	r1, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0x1c6>
 800552c:	0668      	lsls	r0, r5, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0x1bc>
 8005530:	8019      	strh	r1, [r3, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	4616      	mov	r6, r2
 8005538:	e7bc      	b.n	80054b4 <_printf_i+0x148>
 800553a:	6833      	ldr	r3, [r6, #0]
 800553c:	1d1a      	adds	r2, r3, #4
 800553e:	6032      	str	r2, [r6, #0]
 8005540:	681e      	ldr	r6, [r3, #0]
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	2100      	movs	r1, #0
 8005546:	4630      	mov	r0, r6
 8005548:	f7fa fe6a 	bl	8000220 <memchr>
 800554c:	b108      	cbz	r0, 8005552 <_printf_i+0x1e6>
 800554e:	1b80      	subs	r0, r0, r6
 8005550:	6060      	str	r0, [r4, #4]
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	2300      	movs	r3, #0
 8005558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800555c:	e7aa      	b.n	80054b4 <_printf_i+0x148>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	4632      	mov	r2, r6
 8005562:	4649      	mov	r1, r9
 8005564:	4640      	mov	r0, r8
 8005566:	47d0      	blx	sl
 8005568:	3001      	adds	r0, #1
 800556a:	d0ad      	beq.n	80054c8 <_printf_i+0x15c>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	079b      	lsls	r3, r3, #30
 8005570:	d413      	bmi.n	800559a <_printf_i+0x22e>
 8005572:	68e0      	ldr	r0, [r4, #12]
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	4298      	cmp	r0, r3
 8005578:	bfb8      	it	lt
 800557a:	4618      	movlt	r0, r3
 800557c:	e7a6      	b.n	80054cc <_printf_i+0x160>
 800557e:	2301      	movs	r3, #1
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	47d0      	blx	sl
 8005588:	3001      	adds	r0, #1
 800558a:	d09d      	beq.n	80054c8 <_printf_i+0x15c>
 800558c:	3501      	adds	r5, #1
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	9903      	ldr	r1, [sp, #12]
 8005592:	1a5b      	subs	r3, r3, r1
 8005594:	42ab      	cmp	r3, r5
 8005596:	dcf2      	bgt.n	800557e <_printf_i+0x212>
 8005598:	e7eb      	b.n	8005572 <_printf_i+0x206>
 800559a:	2500      	movs	r5, #0
 800559c:	f104 0619 	add.w	r6, r4, #25
 80055a0:	e7f5      	b.n	800558e <_printf_i+0x222>
 80055a2:	bf00      	nop
 80055a4:	080056d9 	.word	0x080056d9
 80055a8:	080056ea 	.word	0x080056ea

080055ac <memmove>:
 80055ac:	4288      	cmp	r0, r1
 80055ae:	b510      	push	{r4, lr}
 80055b0:	eb01 0402 	add.w	r4, r1, r2
 80055b4:	d902      	bls.n	80055bc <memmove+0x10>
 80055b6:	4284      	cmp	r4, r0
 80055b8:	4623      	mov	r3, r4
 80055ba:	d807      	bhi.n	80055cc <memmove+0x20>
 80055bc:	1e43      	subs	r3, r0, #1
 80055be:	42a1      	cmp	r1, r4
 80055c0:	d008      	beq.n	80055d4 <memmove+0x28>
 80055c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ca:	e7f8      	b.n	80055be <memmove+0x12>
 80055cc:	4402      	add	r2, r0
 80055ce:	4601      	mov	r1, r0
 80055d0:	428a      	cmp	r2, r1
 80055d2:	d100      	bne.n	80055d6 <memmove+0x2a>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055de:	e7f7      	b.n	80055d0 <memmove+0x24>

080055e0 <_sbrk_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d06      	ldr	r5, [pc, #24]	@ (80055fc <_sbrk_r+0x1c>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fc fcb4 	bl	8001f58 <_sbrk>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_sbrk_r+0x1a>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_sbrk_r+0x1a>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000318 	.word	0x20000318

08005600 <_realloc_r>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	4680      	mov	r8, r0
 8005606:	4615      	mov	r5, r2
 8005608:	460c      	mov	r4, r1
 800560a:	b921      	cbnz	r1, 8005616 <_realloc_r+0x16>
 800560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005610:	4611      	mov	r1, r2
 8005612:	f7ff bc59 	b.w	8004ec8 <_malloc_r>
 8005616:	b92a      	cbnz	r2, 8005624 <_realloc_r+0x24>
 8005618:	f7ff fbea 	bl	8004df0 <_free_r>
 800561c:	2400      	movs	r4, #0
 800561e:	4620      	mov	r0, r4
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	f000 f81a 	bl	800565c <_malloc_usable_size_r>
 8005628:	4285      	cmp	r5, r0
 800562a:	4606      	mov	r6, r0
 800562c:	d802      	bhi.n	8005634 <_realloc_r+0x34>
 800562e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005632:	d8f4      	bhi.n	800561e <_realloc_r+0x1e>
 8005634:	4629      	mov	r1, r5
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fc46 	bl	8004ec8 <_malloc_r>
 800563c:	4607      	mov	r7, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	d0ec      	beq.n	800561c <_realloc_r+0x1c>
 8005642:	42b5      	cmp	r5, r6
 8005644:	462a      	mov	r2, r5
 8005646:	4621      	mov	r1, r4
 8005648:	bf28      	it	cs
 800564a:	4632      	movcs	r2, r6
 800564c:	f7ff fbc2 	bl	8004dd4 <memcpy>
 8005650:	4621      	mov	r1, r4
 8005652:	4640      	mov	r0, r8
 8005654:	f7ff fbcc 	bl	8004df0 <_free_r>
 8005658:	463c      	mov	r4, r7
 800565a:	e7e0      	b.n	800561e <_realloc_r+0x1e>

0800565c <_malloc_usable_size_r>:
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f18      	subs	r0, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfbc      	itt	lt
 8005666:	580b      	ldrlt	r3, [r1, r0]
 8005668:	18c0      	addlt	r0, r0, r3
 800566a:	4770      	bx	lr

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
