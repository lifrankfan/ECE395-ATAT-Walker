
ATAT-MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005704  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005948  08005948  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005950  08005950  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005950  08005950  00006950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005958  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000084  080059dc  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080059dc  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8c0  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb8  00000000  00000000  00014974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00016830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1e  00000000  00000000  00017510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f51  00000000  00000000  00017f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff26  00000000  00000000  00019e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b38  00000000  00000000  00029da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc8dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000fc920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001005a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058bc 	.word	0x080058bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080058bc 	.word	0x080058bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b090      	sub	sp, #64	@ 0x40
 8000da0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000da2:	f001 fa5b 	bl	800225c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000da6:	f000 fdc9 	bl	800193c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000daa:	f000 ffab 	bl	8001d04 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000dae:	f000 fe27 	bl	8001a00 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000db2:	f000 fe9f 	bl	8001af4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000db6:	f000 ff17 	bl	8001be8 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000dba:	f000 ff79 	bl	8001cb0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	48be      	ldr	r0, [pc, #760]	@ (80010bc <main+0x320>)
 8000dc2:	f002 fbfd 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	48bc      	ldr	r0, [pc, #752]	@ (80010bc <main+0x320>)
 8000dca:	f002 fbf9 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dce:	2108      	movs	r1, #8
 8000dd0:	48ba      	ldr	r0, [pc, #744]	@ (80010bc <main+0x320>)
 8000dd2:	f002 fbf5 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000dd6:	210c      	movs	r1, #12
 8000dd8:	48b8      	ldr	r0, [pc, #736]	@ (80010bc <main+0x320>)
 8000dda:	f002 fbf1 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dde:	2108      	movs	r1, #8
 8000de0:	48b7      	ldr	r0, [pc, #732]	@ (80010c0 <main+0x324>)
 8000de2:	f002 fbed 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000de6:	210c      	movs	r1, #12
 8000de8:	48b5      	ldr	r0, [pc, #724]	@ (80010c0 <main+0x324>)
 8000dea:	f002 fbe9 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dee:	2104      	movs	r1, #4
 8000df0:	48b3      	ldr	r0, [pc, #716]	@ (80010c0 <main+0x324>)
 8000df2:	f002 fbe5 	bl	80035c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df6:	2100      	movs	r1, #0
 8000df8:	48b1      	ldr	r0, [pc, #708]	@ (80010c0 <main+0x324>)
 8000dfa:	f002 fbe1 	bl	80035c0 <HAL_TIM_PWM_Start>



	HAL_UART_Receive_IT(&huart1, Degree, sizeof(Degree));
 8000dfe:	2202      	movs	r2, #2
 8000e00:	49b0      	ldr	r1, [pc, #704]	@ (80010c4 <main+0x328>)
 8000e02:	48b1      	ldr	r0, [pc, #708]	@ (80010c8 <main+0x32c>)
 8000e04:	f003 f93f 	bl	8004086 <HAL_UART_Receive_IT>
	CCR_reg = 0;
 8000e08:	4bb0      	ldr	r3, [pc, #704]	@ (80010cc <main+0x330>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
	//  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, CCR_reg); //PWM4 110 hip
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, CCR_reg); //PWM5 110 knee
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, CCR_reg); //PWM6	110 hip
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, CCR_reg); //PWM7 110 knee
	//  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, CCR_reg); //PWM8 110 hip
	uint8_t start = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint32_t counter = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38
	char buffer[50];
	uint8_t button_state = 1; // 0 means button pressed
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t walk = 1;			// 0 means walk
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	while (1) {
	/* USER CODE END WHILE */

	button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8000e24:	2104      	movs	r1, #4
 8000e26:	48aa      	ldr	r0, [pc, #680]	@ (80010d0 <main+0x334>)
 8000e28:	f001 fde6 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (button_state == 0) {
 8000e32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <main+0xa4>
		walk = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}

	if (start) {
 8000e40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d018      	beq.n	8000e7a <main+0xde>
		strcpy(buffer, "initializing legs\r\n");
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4aa2      	ldr	r2, [pc, #648]	@ (80010d4 <main+0x338>)
 8000e4c:	461c      	mov	r4, r3
 8000e4e:	4615      	mov	r5, r2
 8000e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9d8 	bl	8000210 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	1d39      	adds	r1, r7, #4
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	4897      	ldr	r0, [pc, #604]	@ (80010c8 <main+0x32c>)
 8000e6c:	f003 f880 	bl	8003f70 <HAL_UART_Transmit>

		init_legs();
 8000e70:	f000 f936 	bl	80010e0 <init_legs>
		start = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4894      	ldr	r0, [pc, #592]	@ (80010d0 <main+0x334>)
 8000e7e:	f001 fdbb 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		if (button_state == 0) {
 8000e88:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <main+0xfa>
			walk = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}


		//		sprintf(buffer, "Button Value: %d\r\n", button_state);
				sprintf(buffer, "Button Value: %d\r\n", walk);
 8000e96:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	498e      	ldr	r1, [pc, #568]	@ (80010d8 <main+0x33c>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f86c 	bl	8004f7c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff f9b2 	bl	8000210 <strlen>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	4884      	ldr	r0, [pc, #528]	@ (80010c8 <main+0x32c>)
 8000eb8:	f003 f85a 	bl	8003f70 <HAL_UART_Transmit>

	if (walk == 0) {
 8000ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f040 80e0 	bne.w	8001086 <main+0x2ea>
//		sprintf(buffer, "Button Value: %d\r\n", button_state);
		sprintf(buffer, "Button Value: %d\r\n", walk);
 8000ec6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4982      	ldr	r1, [pc, #520]	@ (80010d8 <main+0x33c>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 f854 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f99a 	bl	8000210 <strlen>
 8000edc:	4603      	mov	r3, r0
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	1d39      	adds	r1, r7, #4
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	4878      	ldr	r0, [pc, #480]	@ (80010c8 <main+0x32c>)
 8000ee8:	f003 f842 	bl	8003f70 <HAL_UART_Transmit>
		rest_legs();
 8000eec:	f000 fa24 	bl	8001338 <rest_legs>
		//		sprintf(buffer, "Button Value: %d\r\n", button_state);
				sprintf(buffer, "Button Value: %d\r\n", walk);
 8000ef0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4978      	ldr	r1, [pc, #480]	@ (80010d8 <main+0x33c>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 f83f 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f985 	bl	8000210 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	1d39      	adds	r1, r7, #4
 8000f0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f10:	486d      	ldr	r0, [pc, #436]	@ (80010c8 <main+0x32c>)
 8000f12:	f003 f82d 	bl	8003f70 <HAL_UART_Transmit>

		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8000f16:	2104      	movs	r1, #4
 8000f18:	486d      	ldr	r0, [pc, #436]	@ (80010d0 <main+0x334>)
 8000f1a:	f001 fd6d 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		if (button_state == 0) {
 8000f24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <main+0x196>
			walk = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
//			break;
		}

		// hip, knee
		if (walk == 0) {
 8000f32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <main+0x1a8>
		move_leg(&htim2, TIM_CHANNEL_4, TIM_CHANNEL_3); // leg 4
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	210c      	movs	r1, #12
 8000f3e:	485f      	ldr	r0, [pc, #380]	@ (80010bc <main+0x320>)
 8000f40:	f000 fb26 	bl	8001590 <move_leg>
		}
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8000f44:	2104      	movs	r1, #4
 8000f46:	4862      	ldr	r0, [pc, #392]	@ (80010d0 <main+0x334>)
 8000f48:	f001 fd56 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (button_state == 0) {
 8000f52:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <main+0x1c4>
			walk = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
//			break;
		}
			//		sprintf(buffer, "Button Value: %d\r\n", button_state);
					sprintf(buffer, "Button Value: %d\r\n", walk);
 8000f60:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	495c      	ldr	r1, [pc, #368]	@ (80010d8 <main+0x33c>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 f807 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f94d 	bl	8000210 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	1d39      	adds	r1, r7, #4
 8000f7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f80:	4851      	ldr	r0, [pc, #324]	@ (80010c8 <main+0x32c>)
 8000f82:	f002 fff5 	bl	8003f70 <HAL_UART_Transmit>
		if (walk == 0) {
 8000f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d104      	bne.n	8000f98 <main+0x1fc>
		move_leg(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2); // leg 2
 8000f8e:	2204      	movs	r2, #4
 8000f90:	2100      	movs	r1, #0
 8000f92:	484b      	ldr	r0, [pc, #300]	@ (80010c0 <main+0x324>)
 8000f94:	f000 fafc 	bl	8001590 <move_leg>
		}
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8000f98:	2104      	movs	r1, #4
 8000f9a:	484d      	ldr	r0, [pc, #308]	@ (80010d0 <main+0x334>)
 8000f9c:	f001 fd2c 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (button_state == 0) {
 8000fa6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <main+0x218>
			walk = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
//			break;
		}
			//		sprintf(buffer, "Button Value: %d\r\n", button_state);
					sprintf(buffer, "Button Value: %d\r\n", walk);
 8000fb4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4947      	ldr	r1, [pc, #284]	@ (80010d8 <main+0x33c>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 ffdd 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f923 	bl	8000210 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	1d39      	adds	r1, r7, #4
 8000fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd4:	483c      	ldr	r0, [pc, #240]	@ (80010c8 <main+0x32c>)
 8000fd6:	f002 ffcb 	bl	8003f70 <HAL_UART_Transmit>
		if (walk == 0) {
 8000fda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d104      	bne.n	8000fec <main+0x250>
		move_leg(&htim3, TIM_CHANNEL_4, TIM_CHANNEL_3); // leg 1
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	210c      	movs	r1, #12
 8000fe6:	4836      	ldr	r0, [pc, #216]	@ (80010c0 <main+0x324>)
 8000fe8:	f000 fad2 	bl	8001590 <move_leg>
		}
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8000fec:	2104      	movs	r1, #4
 8000fee:	4838      	ldr	r0, [pc, #224]	@ (80010d0 <main+0x334>)
 8000ff0:	f001 fd02 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (button_state == 0) {
 8000ffa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <main+0x26c>
			walk = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
//			break;
		}
			//		sprintf(buffer, "Button Value: %d\r\n", button_state);
					sprintf(buffer, "Button Value: %d\r\n", walk);
 8001008:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4932      	ldr	r1, [pc, #200]	@ (80010d8 <main+0x33c>)
 8001010:	4618      	mov	r0, r3
 8001012:	f003 ffb3 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f8f9 	bl	8000210 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	1d39      	adds	r1, r7, #4
 8001024:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001028:	4827      	ldr	r0, [pc, #156]	@ (80010c8 <main+0x32c>)
 800102a:	f002 ffa1 	bl	8003f70 <HAL_UART_Transmit>
		if (walk == 0) {
 800102e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001032:	2b00      	cmp	r3, #0
 8001034:	d104      	bne.n	8001040 <main+0x2a4>
		move_leg(&htim2, TIM_CHANNEL_2, TIM_CHANNEL_1); // leg 3
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	4820      	ldr	r0, [pc, #128]	@ (80010bc <main+0x320>)
 800103c:	f000 faa8 	bl	8001590 <move_leg>
		}
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 8001040:	2104      	movs	r1, #4
 8001042:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <main+0x334>)
 8001044:	f001 fcd8 	bl	80029f8 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (button_state == 0) {
 800104e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <main+0x2c0>
			walk = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
//			break;
		}
			//		sprintf(buffer, "Button Value: %d\r\n", button_state);
					sprintf(buffer, "Button Value: %d\r\n", walk);
 800105c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	491d      	ldr	r1, [pc, #116]	@ (80010d8 <main+0x33c>)
 8001064:	4618      	mov	r0, r3
 8001066:	f003 ff89 	bl	8004f7c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f8cf 	bl	8000210 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	1d39      	adds	r1, r7, #4
 8001078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107c:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <main+0x32c>)
 800107e:	f002 ff77 	bl	8003f70 <HAL_UART_Transmit>
		init_legs();
 8001082:	f000 f82d 	bl	80010e0 <init_legs>

	}

	//		sprintf(buffer, "Button Value: %d\r\n", button_state);
			sprintf(buffer, "Button Value: %d\r\n", walk);
 8001086:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4912      	ldr	r1, [pc, #72]	@ (80010d8 <main+0x33c>)
 800108e:	4618      	mov	r0, r3
 8001090:	f003 ff74 	bl	8004f7c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f8ba 	bl	8000210 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	1d39      	adds	r1, r7, #4
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	4808      	ldr	r0, [pc, #32]	@ (80010c8 <main+0x32c>)
 80010a8:	f002 ff62 	bl	8003f70 <HAL_UART_Transmit>

	counter++;
 80010ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ae:	3301      	adds	r3, #1
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_Delay(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b6:	f001 f943 	bl	8002340 <HAL_Delay>
	button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2); // Read button state
 80010ba:	e6b3      	b.n	8000e24 <main+0x88>
 80010bc:	200000a0 	.word	0x200000a0
 80010c0:	200000e8 	.word	0x200000e8
 80010c4:	200001d4 	.word	0x200001d4
 80010c8:	20000178 	.word	0x20000178
 80010cc:	200001c0 	.word	0x200001c0
 80010d0:	40020800 	.word	0x40020800
 80010d4:	080058d4 	.word	0x080058d4
 80010d8:	080058e8 	.word	0x080058e8
 80010dc:	00000000 	.word	0x00000000

080010e0 <init_legs>:
	}


    /* USER CODE BEGIN 3 */
}
void init_legs() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  // leg1
    hip = ((Init[0]) / 0.09 + 250);
 80010e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <init_legs+0x240>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa3b 	bl	8000564 <__aeabi_i2d>
 80010ee:	a38a      	add	r3, pc, #552	@ (adr r3, 8001318 <init_legs+0x238>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fbca 	bl	800088c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b87      	ldr	r3, [pc, #540]	@ (8001324 <init_legs+0x244>)
 8001106:	f7ff f8e1 	bl	80002cc <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fca3 	bl	8000a5c <__aeabi_d2iz>
 8001116:	4603      	mov	r3, r0
 8001118:	4a83      	ldr	r2, [pc, #524]	@ (8001328 <init_legs+0x248>)
 800111a:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 800111c:	4b80      	ldr	r3, [pc, #512]	@ (8001320 <init_legs+0x240>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa1f 	bl	8000564 <__aeabi_i2d>
 8001126:	a37c      	add	r3, pc, #496	@ (adr r3, 8001318 <init_legs+0x238>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fbae 	bl	800088c <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b79      	ldr	r3, [pc, #484]	@ (8001324 <init_legs+0x244>)
 800113e:	f7ff f8c5 	bl	80002cc <__adddf3>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fc87 	bl	8000a5c <__aeabi_d2iz>
 800114e:	4603      	mov	r3, r0
 8001150:	4a76      	ldr	r2, [pc, #472]	@ (800132c <init_legs+0x24c>)
 8001152:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, hip);
 8001154:	4b74      	ldr	r3, [pc, #464]	@ (8001328 <init_legs+0x248>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b75      	ldr	r3, [pc, #468]	@ (8001330 <init_legs+0x250>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, knee);
 800115e:	4b73      	ldr	r3, [pc, #460]	@ (800132c <init_legs+0x24c>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b73      	ldr	r3, [pc, #460]	@ (8001330 <init_legs+0x250>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(1000);
 8001168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116c:	f001 f8e8 	bl	8002340 <HAL_Delay>
    // leg3
    hip = ((Init[0]) / 0.09 + 250);
 8001170:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <init_legs+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9f5 	bl	8000564 <__aeabi_i2d>
 800117a:	a367      	add	r3, pc, #412	@ (adr r3, 8001318 <init_legs+0x238>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fb84 	bl	800088c <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b64      	ldr	r3, [pc, #400]	@ (8001324 <init_legs+0x244>)
 8001192:	f7ff f89b 	bl	80002cc <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc5d 	bl	8000a5c <__aeabi_d2iz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a60      	ldr	r2, [pc, #384]	@ (8001328 <init_legs+0x248>)
 80011a6:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 80011a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <init_legs+0x240>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d9 	bl	8000564 <__aeabi_i2d>
 80011b2:	a359      	add	r3, pc, #356	@ (adr r3, 8001318 <init_legs+0x238>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb68 	bl	800088c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b56      	ldr	r3, [pc, #344]	@ (8001324 <init_legs+0x244>)
 80011ca:	f7ff f87f 	bl	80002cc <__adddf3>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc41 	bl	8000a5c <__aeabi_d2iz>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a53      	ldr	r2, [pc, #332]	@ (800132c <init_legs+0x24c>)
 80011de:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, hip);
 80011e0:	4b51      	ldr	r3, [pc, #324]	@ (8001328 <init_legs+0x248>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <init_legs+0x254>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, knee);
 80011ea:	4b50      	ldr	r3, [pc, #320]	@ (800132c <init_legs+0x24c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <init_legs+0x254>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1000);
 80011f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f8:	f001 f8a2 	bl	8002340 <HAL_Delay>
    // leg2
    hip = ((Init[0]) / 0.09 + 250);
 80011fc:	4b48      	ldr	r3, [pc, #288]	@ (8001320 <init_legs+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9af 	bl	8000564 <__aeabi_i2d>
 8001206:	a344      	add	r3, pc, #272	@ (adr r3, 8001318 <init_legs+0x238>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb3e 	bl	800088c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <init_legs+0x244>)
 800121e:	f7ff f855 	bl	80002cc <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fc17 	bl	8000a5c <__aeabi_d2iz>
 800122e:	4603      	mov	r3, r0
 8001230:	4a3d      	ldr	r2, [pc, #244]	@ (8001328 <init_legs+0x248>)
 8001232:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 8001234:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <init_legs+0x240>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f993 	bl	8000564 <__aeabi_i2d>
 800123e:	a336      	add	r3, pc, #216	@ (adr r3, 8001318 <init_legs+0x238>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb22 	bl	800088c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <init_legs+0x244>)
 8001256:	f7ff f839 	bl	80002cc <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fbfb 	bl	8000a5c <__aeabi_d2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	4a30      	ldr	r2, [pc, #192]	@ (800132c <init_legs+0x24c>)
 800126a:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, hip);
 800126c:	4b2e      	ldr	r3, [pc, #184]	@ (8001328 <init_legs+0x248>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <init_legs+0x250>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, knee);
 8001276:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <init_legs+0x24c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <init_legs+0x250>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1000);
 8001280:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001284:	f001 f85c 	bl	8002340 <HAL_Delay>
    // leg4
    hip = ((Init[0]) / 0.09 + 250);
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <init_legs+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f969 	bl	8000564 <__aeabi_i2d>
 8001292:	a321      	add	r3, pc, #132	@ (adr r3, 8001318 <init_legs+0x238>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff faf8 	bl	800088c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <init_legs+0x244>)
 80012aa:	f7ff f80f 	bl	80002cc <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fbd1 	bl	8000a5c <__aeabi_d2iz>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <init_legs+0x248>)
 80012be:	6013      	str	r3, [r2, #0]
    knee = ((Init[1]) / 0.09 + 250);
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <init_legs+0x240>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f94d 	bl	8000564 <__aeabi_i2d>
 80012ca:	a313      	add	r3, pc, #76	@ (adr r3, 8001318 <init_legs+0x238>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff fadc 	bl	800088c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <init_legs+0x244>)
 80012e2:	f7fe fff3 	bl	80002cc <__adddf3>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fbb5 	bl	8000a5c <__aeabi_d2iz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <init_legs+0x24c>)
 80012f6:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, hip);
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <init_legs+0x248>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <init_legs+0x254>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, knee);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <init_legs+0x24c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <init_legs+0x254>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(1000);
 800130c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001310:	f001 f816 	bl	8002340 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	70a3d70a 	.word	0x70a3d70a
 800131c:	3fb70a3d 	.word	0x3fb70a3d
 8001320:	20000000 	.word	0x20000000
 8001324:	406f4000 	.word	0x406f4000
 8001328:	200001c4 	.word	0x200001c4
 800132c:	200001c8 	.word	0x200001c8
 8001330:	200000a0 	.word	0x200000a0
 8001334:	200000e8 	.word	0x200000e8

08001338 <rest_legs>:

void rest_legs() {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	// leg4
	hip = ((Rest[0]) / 0.09 + 250);
 800133c:	4b8e      	ldr	r3, [pc, #568]	@ (8001578 <rest_legs+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f90f 	bl	8000564 <__aeabi_i2d>
 8001346:	a38a      	add	r3, pc, #552	@ (adr r3, 8001570 <rest_legs+0x238>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff fa9e 	bl	800088c <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b87      	ldr	r3, [pc, #540]	@ (800157c <rest_legs+0x244>)
 800135e:	f7fe ffb5 	bl	80002cc <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fb77 	bl	8000a5c <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	4a83      	ldr	r2, [pc, #524]	@ (8001580 <rest_legs+0x248>)
 8001372:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 8001374:	4b80      	ldr	r3, [pc, #512]	@ (8001578 <rest_legs+0x240>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8f3 	bl	8000564 <__aeabi_i2d>
 800137e:	a37c      	add	r3, pc, #496	@ (adr r3, 8001570 <rest_legs+0x238>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7ff fa82 	bl	800088c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b79      	ldr	r3, [pc, #484]	@ (800157c <rest_legs+0x244>)
 8001396:	f7fe ff99 	bl	80002cc <__adddf3>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb5b 	bl	8000a5c <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a76      	ldr	r2, [pc, #472]	@ (8001584 <rest_legs+0x24c>)
 80013aa:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, hip);
 80013ac:	4b74      	ldr	r3, [pc, #464]	@ (8001580 <rest_legs+0x248>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b75      	ldr	r3, [pc, #468]	@ (8001588 <rest_legs+0x250>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, knee);
 80013b6:	4b73      	ldr	r3, [pc, #460]	@ (8001584 <rest_legs+0x24c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b73      	ldr	r3, [pc, #460]	@ (8001588 <rest_legs+0x250>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(2000);
 80013c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013c4:	f000 ffbc 	bl	8002340 <HAL_Delay>
	// leg2
	hip = ((Rest[0]) / 0.09 + 250);
 80013c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001578 <rest_legs+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8c9 	bl	8000564 <__aeabi_i2d>
 80013d2:	a367      	add	r3, pc, #412	@ (adr r3, 8001570 <rest_legs+0x238>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff fa58 	bl	800088c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b64      	ldr	r3, [pc, #400]	@ (800157c <rest_legs+0x244>)
 80013ea:	f7fe ff6f 	bl	80002cc <__adddf3>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb31 	bl	8000a5c <__aeabi_d2iz>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a60      	ldr	r2, [pc, #384]	@ (8001580 <rest_legs+0x248>)
 80013fe:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 8001400:	4b5d      	ldr	r3, [pc, #372]	@ (8001578 <rest_legs+0x240>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8ad 	bl	8000564 <__aeabi_i2d>
 800140a:	a359      	add	r3, pc, #356	@ (adr r3, 8001570 <rest_legs+0x238>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff fa3c 	bl	800088c <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <rest_legs+0x244>)
 8001422:	f7fe ff53 	bl	80002cc <__adddf3>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb15 	bl	8000a5c <__aeabi_d2iz>
 8001432:	4603      	mov	r3, r0
 8001434:	4a53      	ldr	r2, [pc, #332]	@ (8001584 <rest_legs+0x24c>)
 8001436:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, hip);
 8001438:	4b51      	ldr	r3, [pc, #324]	@ (8001580 <rest_legs+0x248>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b53      	ldr	r3, [pc, #332]	@ (800158c <rest_legs+0x254>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, knee);
 8001442:	4b50      	ldr	r3, [pc, #320]	@ (8001584 <rest_legs+0x24c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b51      	ldr	r3, [pc, #324]	@ (800158c <rest_legs+0x254>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(1000);
 800144c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001450:	f000 ff76 	bl	8002340 <HAL_Delay>
	// leg3
	hip = ((Rest[0]) / 0.09 + 250);
 8001454:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <rest_legs+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f883 	bl	8000564 <__aeabi_i2d>
 800145e:	a344      	add	r3, pc, #272	@ (adr r3, 8001570 <rest_legs+0x238>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff fa12 	bl	800088c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b41      	ldr	r3, [pc, #260]	@ (800157c <rest_legs+0x244>)
 8001476:	f7fe ff29 	bl	80002cc <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff faeb 	bl	8000a5c <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	4a3d      	ldr	r2, [pc, #244]	@ (8001580 <rest_legs+0x248>)
 800148a:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 800148c:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <rest_legs+0x240>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f867 	bl	8000564 <__aeabi_i2d>
 8001496:	a336      	add	r3, pc, #216	@ (adr r3, 8001570 <rest_legs+0x238>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f9f6 	bl	800088c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b33      	ldr	r3, [pc, #204]	@ (800157c <rest_legs+0x244>)
 80014ae:	f7fe ff0d 	bl	80002cc <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff facf 	bl	8000a5c <__aeabi_d2iz>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a30      	ldr	r2, [pc, #192]	@ (8001584 <rest_legs+0x24c>)
 80014c2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, hip);
 80014c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <rest_legs+0x248>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <rest_legs+0x250>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, knee);
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <rest_legs+0x24c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <rest_legs+0x250>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(1000);
 80014d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014dc:	f000 ff30 	bl	8002340 <HAL_Delay>
  // leg1
	hip = ((Rest[0]) / 0.09 + 250);
 80014e0:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <rest_legs+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f83d 	bl	8000564 <__aeabi_i2d>
 80014ea:	a321      	add	r3, pc, #132	@ (adr r3, 8001570 <rest_legs+0x238>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9cc 	bl	800088c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <rest_legs+0x244>)
 8001502:	f7fe fee3 	bl	80002cc <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff faa5 	bl	8000a5c <__aeabi_d2iz>
 8001512:	4603      	mov	r3, r0
 8001514:	4a1a      	ldr	r2, [pc, #104]	@ (8001580 <rest_legs+0x248>)
 8001516:	6013      	str	r3, [r2, #0]
	knee = ((Rest[1]) / 0.09 + 250);
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <rest_legs+0x240>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f821 	bl	8000564 <__aeabi_i2d>
 8001522:	a313      	add	r3, pc, #76	@ (adr r3, 8001570 <rest_legs+0x238>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f9b0 	bl	800088c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <rest_legs+0x244>)
 800153a:	f7fe fec7 	bl	80002cc <__adddf3>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fa89 	bl	8000a5c <__aeabi_d2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <rest_legs+0x24c>)
 800154e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, hip);
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <rest_legs+0x248>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <rest_legs+0x254>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, knee);
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <rest_legs+0x24c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <rest_legs+0x254>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1000);
 8001564:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001568:	f000 feea 	bl	8002340 <HAL_Delay>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	70a3d70a 	.word	0x70a3d70a
 8001574:	3fb70a3d 	.word	0x3fb70a3d
 8001578:	20000008 	.word	0x20000008
 800157c:	406f4000 	.word	0x406f4000
 8001580:	200001c4 	.word	0x200001c4
 8001584:	200001c8 	.word	0x200001c8
 8001588:	200000e8 	.word	0x200000e8
 800158c:	200000a0 	.word	0x200000a0

08001590 <move_leg>:

void move_leg(TIM_HandleTypeDef *tim, uint32_t hip_channel, uint32_t knee_channel) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	// Bend
	hip = ((Bend[0]) / 0.09 + 250);
 800159c:	4ba4      	ldr	r3, [pc, #656]	@ (8001830 <move_leg+0x2a0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffdf 	bl	8000564 <__aeabi_i2d>
 80015a6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001828 <move_leg+0x298>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f96e 	bl	800088c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001834 <move_leg+0x2a4>)
 80015be:	f7fe fe85 	bl	80002cc <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa47 	bl	8000a5c <__aeabi_d2iz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a99      	ldr	r2, [pc, #612]	@ (8001838 <move_leg+0x2a8>)
 80015d2:	6013      	str	r3, [r2, #0]
	knee = ((Bend[1]) / 0.09 + 250);
 80015d4:	4b96      	ldr	r3, [pc, #600]	@ (8001830 <move_leg+0x2a0>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffc3 	bl	8000564 <__aeabi_i2d>
 80015de:	a392      	add	r3, pc, #584	@ (adr r3, 8001828 <move_leg+0x298>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f952 	bl	800088c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001834 <move_leg+0x2a4>)
 80015f6:	f7fe fe69 	bl	80002cc <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa2b 	bl	8000a5c <__aeabi_d2iz>
 8001606:	4603      	mov	r3, r0
 8001608:	4a8c      	ldr	r2, [pc, #560]	@ (800183c <move_leg+0x2ac>)
 800160a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(tim, hip_channel, hip);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <move_leg+0x8e>
 8001612:	4b89      	ldr	r3, [pc, #548]	@ (8001838 <move_leg+0x2a8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	635a      	str	r2, [r3, #52]	@ 0x34
 800161c:	e019      	b.n	8001652 <move_leg+0xc2>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d106      	bne.n	8001632 <move_leg+0xa2>
 8001624:	4b84      	ldr	r3, [pc, #528]	@ (8001838 <move_leg+0x2a8>)
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001630:	e00f      	b.n	8001652 <move_leg+0xc2>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b08      	cmp	r3, #8
 8001636:	d106      	bne.n	8001646 <move_leg+0xb6>
 8001638:	4b7f      	ldr	r3, [pc, #508]	@ (8001838 <move_leg+0x2a8>)
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	460b      	mov	r3, r1
 8001642:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001644:	e005      	b.n	8001652 <move_leg+0xc2>
 8001646:	4b7c      	ldr	r3, [pc, #496]	@ (8001838 <move_leg+0x2a8>)
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	460b      	mov	r3, r1
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(tim, knee_channel, knee);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <move_leg+0xd4>
 8001658:	4b78      	ldr	r3, [pc, #480]	@ (800183c <move_leg+0x2ac>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	635a      	str	r2, [r3, #52]	@ 0x34
 8001662:	e019      	b.n	8001698 <move_leg+0x108>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b04      	cmp	r3, #4
 8001668:	d106      	bne.n	8001678 <move_leg+0xe8>
 800166a:	4b74      	ldr	r3, [pc, #464]	@ (800183c <move_leg+0x2ac>)
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	460b      	mov	r3, r1
 8001674:	6393      	str	r3, [r2, #56]	@ 0x38
 8001676:	e00f      	b.n	8001698 <move_leg+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d106      	bne.n	800168c <move_leg+0xfc>
 800167e:	4b6f      	ldr	r3, [pc, #444]	@ (800183c <move_leg+0x2ac>)
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	460b      	mov	r3, r1
 8001688:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800168a:	e005      	b.n	8001698 <move_leg+0x108>
 800168c:	4b6b      	ldr	r3, [pc, #428]	@ (800183c <move_leg+0x2ac>)
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	6413      	str	r3, [r2, #64]	@ 0x40

	HAL_Delay(1000);
 8001698:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169c:	f000 fe50 	bl	8002340 <HAL_Delay>
	// Reach
	hip = ((Reach[0]) / 0.09 + 250);
 80016a0:	4b67      	ldr	r3, [pc, #412]	@ (8001840 <move_leg+0x2b0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff5d 	bl	8000564 <__aeabi_i2d>
 80016aa:	a35f      	add	r3, pc, #380	@ (adr r3, 8001828 <move_leg+0x298>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7ff f8ec 	bl	800088c <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <move_leg+0x2a4>)
 80016c2:	f7fe fe03 	bl	80002cc <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff f9c5 	bl	8000a5c <__aeabi_d2iz>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <move_leg+0x2a8>)
 80016d6:	6013      	str	r3, [r2, #0]
	knee = ((Reach[1]) / 0.09 + 250);
 80016d8:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <move_leg+0x2b0>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff41 	bl	8000564 <__aeabi_i2d>
 80016e2:	a351      	add	r3, pc, #324	@ (adr r3, 8001828 <move_leg+0x298>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7ff f8d0 	bl	800088c <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001834 <move_leg+0x2a4>)
 80016fa:	f7fe fde7 	bl	80002cc <__adddf3>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff f9a9 	bl	8000a5c <__aeabi_d2iz>
 800170a:	4603      	mov	r3, r0
 800170c:	4a4b      	ldr	r2, [pc, #300]	@ (800183c <move_leg+0x2ac>)
 800170e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(tim, hip_channel, hip);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <move_leg+0x192>
 8001716:	4b48      	ldr	r3, [pc, #288]	@ (8001838 <move_leg+0x2a8>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001720:	e019      	b.n	8001756 <move_leg+0x1c6>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b04      	cmp	r3, #4
 8001726:	d106      	bne.n	8001736 <move_leg+0x1a6>
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <move_leg+0x2a8>)
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	460b      	mov	r3, r1
 8001732:	6393      	str	r3, [r2, #56]	@ 0x38
 8001734:	e00f      	b.n	8001756 <move_leg+0x1c6>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d106      	bne.n	800174a <move_leg+0x1ba>
 800173c:	4b3e      	ldr	r3, [pc, #248]	@ (8001838 <move_leg+0x2a8>)
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	460b      	mov	r3, r1
 8001746:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001748:	e005      	b.n	8001756 <move_leg+0x1c6>
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <move_leg+0x2a8>)
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	460b      	mov	r3, r1
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(tim, knee_channel, knee);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <move_leg+0x1d8>
 800175c:	4b37      	ldr	r3, [pc, #220]	@ (800183c <move_leg+0x2ac>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
 8001766:	e019      	b.n	800179c <move_leg+0x20c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d106      	bne.n	800177c <move_leg+0x1ec>
 800176e:	4b33      	ldr	r3, [pc, #204]	@ (800183c <move_leg+0x2ac>)
 8001770:	6819      	ldr	r1, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	460b      	mov	r3, r1
 8001778:	6393      	str	r3, [r2, #56]	@ 0x38
 800177a:	e00f      	b.n	800179c <move_leg+0x20c>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d106      	bne.n	8001790 <move_leg+0x200>
 8001782:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <move_leg+0x2ac>)
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	460b      	mov	r3, r1
 800178c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800178e:	e005      	b.n	800179c <move_leg+0x20c>
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <move_leg+0x2ac>)
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	460b      	mov	r3, r1
 800179a:	6413      	str	r3, [r2, #64]	@ 0x40

	HAL_Delay(1000);
 800179c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017a0:	f000 fdce 	bl	8002340 <HAL_Delay>
	// Step
	hip = ((Step[0]) / 0.09 + 250);
 80017a4:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <move_leg+0x2b4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fedb 	bl	8000564 <__aeabi_i2d>
 80017ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8001828 <move_leg+0x298>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7ff f86a 	bl	800088c <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <move_leg+0x2a4>)
 80017c6:	f7fe fd81 	bl	80002cc <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f943 	bl	8000a5c <__aeabi_d2iz>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <move_leg+0x2a8>)
 80017da:	6013      	str	r3, [r2, #0]
	knee = ((Step[1]) / 0.09 + 250);
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <move_leg+0x2b4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe febf 	bl	8000564 <__aeabi_i2d>
 80017e6:	a310      	add	r3, pc, #64	@ (adr r3, 8001828 <move_leg+0x298>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7ff f84e 	bl	800088c <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <move_leg+0x2a4>)
 80017fe:	f7fe fd65 	bl	80002cc <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f927 	bl	8000a5c <__aeabi_d2iz>
 800180e:	4603      	mov	r3, r0
 8001810:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <move_leg+0x2ac>)
 8001812:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(tim, hip_channel, hip);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <move_leg+0x2b8>
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <move_leg+0x2a8>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34
 8001824:	e02a      	b.n	800187c <move_leg+0x2ec>
 8001826:	bf00      	nop
 8001828:	70a3d70a 	.word	0x70a3d70a
 800182c:	3fb70a3d 	.word	0x3fb70a3d
 8001830:	20000010 	.word	0x20000010
 8001834:	406f4000 	.word	0x406f4000
 8001838:	200001c4 	.word	0x200001c4
 800183c:	200001c8 	.word	0x200001c8
 8001840:	20000018 	.word	0x20000018
 8001844:	20000020 	.word	0x20000020
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d106      	bne.n	800185c <move_leg+0x2cc>
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <move_leg+0x344>)
 8001850:	6819      	ldr	r1, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	460b      	mov	r3, r1
 8001858:	6393      	str	r3, [r2, #56]	@ 0x38
 800185a:	e00f      	b.n	800187c <move_leg+0x2ec>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b08      	cmp	r3, #8
 8001860:	d106      	bne.n	8001870 <move_leg+0x2e0>
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <move_leg+0x344>)
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	460b      	mov	r3, r1
 800186c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800186e:	e005      	b.n	800187c <move_leg+0x2ec>
 8001870:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <move_leg+0x344>)
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	460b      	mov	r3, r1
 800187a:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(tim, knee_channel, knee);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <move_leg+0x2fe>
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <move_leg+0x348>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	635a      	str	r2, [r3, #52]	@ 0x34
 800188c:	e019      	b.n	80018c2 <move_leg+0x332>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d106      	bne.n	80018a2 <move_leg+0x312>
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <move_leg+0x348>)
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	460b      	mov	r3, r1
 800189e:	6393      	str	r3, [r2, #56]	@ 0x38
 80018a0:	e00f      	b.n	80018c2 <move_leg+0x332>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d106      	bne.n	80018b6 <move_leg+0x326>
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <move_leg+0x348>)
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	460b      	mov	r3, r1
 80018b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018b4:	e005      	b.n	80018c2 <move_leg+0x332>
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <move_leg+0x348>)
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	460b      	mov	r3, r1
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(1000);
 80018c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c6:	f000 fd3b 	bl	8002340 <HAL_Delay>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001c4 	.word	0x200001c4
 80018d8:	200001c8 	.word	0x200001c8

080018dc <HAL_UART_RxCpltCallback>:


  /* USER CODE END 3 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
//Function for writing to UART
	receivedNumber = (Degree[0] - 48);
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3b30      	subs	r3, #48	@ 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_UART_RxCpltCallback+0x50>)
 80018ec:	6013      	str	r3, [r2, #0]
	if(receivedNumber == 0){
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_UART_RxCpltCallback+0x50>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <HAL_UART_RxCpltCallback+0x22>
		flag = 1;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_UART_RxCpltCallback+0x54>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e006      	b.n	800190c <HAL_UART_RxCpltCallback+0x30>
	}else{
		flag = 0;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_UART_RxCpltCallback+0x54>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_UART_RxCpltCallback+0x58>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	memset(Degree, 0, sizeof(Degree));
 800190c:	2202      	movs	r2, #2
 800190e:	2100      	movs	r1, #0
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 8001912:	f003 fb53 	bl	8004fbc <memset>
	HAL_UART_Receive_IT(&huart1, Degree, sizeof(Degree));
 8001916:	2202      	movs	r2, #2
 8001918:	4903      	ldr	r1, [pc, #12]	@ (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 800191a:	4807      	ldr	r0, [pc, #28]	@ (8001938 <HAL_UART_RxCpltCallback+0x5c>)
 800191c:	f002 fbb3 	bl	8004086 <HAL_UART_Receive_IT>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001d4 	.word	0x200001d4
 800192c:	200001cc 	.word	0x200001cc
 8001930:	200001d0 	.word	0x200001d0
 8001934:	200000a0 	.word	0x200000a0
 8001938:	20000178 	.word	0x20000178

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	@ 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	2234      	movs	r2, #52	@ 0x34
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fb36 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <SystemClock_Config+0xbc>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <SystemClock_Config+0xbc>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <SystemClock_Config+0xbc>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <SystemClock_Config+0xc0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <SystemClock_Config+0xc0>)
 800198a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <SystemClock_Config+0xc0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800199c:	2302      	movs	r3, #2
 800199e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a4:	2310      	movs	r3, #16
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 fb17 	bl	8002fe4 <HAL_RCC_OscConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019bc:	f000 fa32 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c0:	230f      	movs	r3, #15
 80019c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 f83c 	bl	8002a5c <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019ea:	f000 fa1b 	bl	8001e24 <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3750      	adds	r7, #80	@ 0x50
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000

08001a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001a2a:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001a36:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a38:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a4a:	4829      	ldr	r0, [pc, #164]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a4c:	f001 fd68 	bl	8003520 <HAL_TIM_PWM_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f000 f9e5 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4619      	mov	r1, r3
 8001a68:	4821      	ldr	r0, [pc, #132]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a6a:	f002 f9b5 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a74:	f000 f9d6 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a78:	2360      	movs	r3, #96	@ 0x60
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4818      	ldr	r0, [pc, #96]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001a90:	f001 fe5e 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a9a:	f000 f9c3 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001aa6:	f001 fe53 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ab0:	f000 f9b8 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001abc:	f001 fe48 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001ac6:	f000 f9ad 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	220c      	movs	r2, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001ad2:	f001 fe3d 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001adc:	f000 f9a2 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ae0:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <MX_TIM2_Init+0xf0>)
 8001ae2:	f000 fa19 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000a0 	.word	0x200000a0

08001af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b16:	4b32      	ldr	r3, [pc, #200]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b18:	4a32      	ldr	r2, [pc, #200]	@ (8001be4 <MX_TIM3_Init+0xf0>)
 8001b1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b1e:	220f      	movs	r2, #15
 8001b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b2a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b3c:	4828      	ldr	r0, [pc, #160]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b3e:	f001 fcef 	bl	8003520 <HAL_TIM_PWM_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b48:	f000 f96c 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4821      	ldr	r0, [pc, #132]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b5c:	f002 f93c 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b66:	f000 f95d 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	@ 0x60
 8001b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4817      	ldr	r0, [pc, #92]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b82:	f001 fde5 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b8c:	f000 f94a 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2204      	movs	r2, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4812      	ldr	r0, [pc, #72]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001b98:	f001 fdda 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ba2:	f000 f93f 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2208      	movs	r2, #8
 8001baa:	4619      	mov	r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001bae:	f001 fdcf 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001bb8:	f000 f934 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001bc4:	f001 fdc4 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001bce:	f000 f929 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd2:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <MX_TIM3_Init+0xec>)
 8001bd4:	f000 f9a0 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	@ 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200000e8 	.word	0x200000e8
 8001be4:	40000400 	.word	0x40000400

08001be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c0c:	4a27      	ldr	r2, [pc, #156]	@ (8001cac <MX_TIM4_Init+0xc4>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001c10:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c12:	220f      	movs	r2, #15
 8001c14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c1e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c30:	481d      	ldr	r0, [pc, #116]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c32:	f001 fc75 	bl	8003520 <HAL_TIM_PWM_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001c3c:	f000 f8f2 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4816      	ldr	r0, [pc, #88]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c50:	f002 f8c2 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001c5a:	f000 f8e3 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5e:	2360      	movs	r3, #96	@ 0x60
 8001c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c76:	f001 fd6b 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001c80:	f000 f8d0 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c8c:	f001 fd60 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c96:	f000 f8c5 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c9a:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <MX_TIM4_Init+0xc0>)
 8001c9c:	f000 f93c 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	@ 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000130 	.word	0x20000130
 8001cac:	40000800 	.word	0x40000800

08001cb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <MX_USART1_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cbc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001ce8:	f002 f8f2 	bl	8003ed0 <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f000 f897 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000178 	.word	0x20000178
 8001d00:	40011000 	.word	0x40011000

08001d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a3d      	ldr	r2, [pc, #244]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a36      	ldr	r2, [pc, #216]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a28      	ldr	r2, [pc, #160]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <MX_GPIO_Init+0x114>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2106      	movs	r1, #6
 8001d8e:	4823      	ldr	r0, [pc, #140]	@ (8001e1c <MX_GPIO_Init+0x118>)
 8001d90:	f000 fe4a 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d9a:	4821      	ldr	r0, [pc, #132]	@ (8001e20 <MX_GPIO_Init+0x11c>)
 8001d9c:	f000 fe44 	bl	8002a28 <HAL_GPIO_WritePin>

  // Configure GPIOC2 as input
  GPIO_InitStruct.Pin = GPIO_PIN_2;        // Only PC2
 8001da0:	2304      	movs	r3, #4
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;     // No internal pull (since external pull-up exists)
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	481a      	ldr	r0, [pc, #104]	@ (8001e1c <MX_GPIO_Init+0x118>)
 8001db4:	f000 fc8c 	bl	80026d0 <HAL_GPIO_Init>

  // Configure GPIOC1 as output (original configuration)
  GPIO_InitStruct.Pin = GPIO_PIN_1;        // Only PC1
 8001db8:	2302      	movs	r3, #2
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;         // No internal pull
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4813      	ldr	r0, [pc, #76]	@ (8001e1c <MX_GPIO_Init+0x118>)
 8001dd0:	f000 fc7e 	bl	80026d0 <HAL_GPIO_Init>


  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <MX_GPIO_Init+0x11c>)
 8001dec:	f000 fc70 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_GPIO_Init+0x11c>)
 8001e0a:	f000 fc61 	bl	80026d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	@ 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020400 	.word	0x40020400

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <Error_Handler+0x8>

08001e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001eae:	e026      	b.n	8001efe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <HAL_TIM_PWM_MspInit+0x90>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	e012      	b.n	8001efe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_TIM_PWM_MspInit+0x94>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10d      	bne.n	8001efe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800

08001f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	@ 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f38:	d11e      	bne.n	8001f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	4b43      	ldr	r3, [pc, #268]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a42      	ldr	r2, [pc, #264]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b40      	ldr	r3, [pc, #256]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f56:	230f      	movs	r3, #15
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f66:	2301      	movs	r3, #1
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4837      	ldr	r0, [pc, #220]	@ (8002050 <HAL_TIM_MspPostInit+0x138>)
 8001f72:	f000 fbad 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f76:	e064      	b.n	8002042 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a35      	ldr	r2, [pc, #212]	@ (8002054 <HAL_TIM_MspPostInit+0x13c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d13c      	bne.n	8001ffc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a30      	ldr	r2, [pc, #192]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a29      	ldr	r2, [pc, #164]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4820      	ldr	r0, [pc, #128]	@ (8002058 <HAL_TIM_MspPostInit+0x140>)
 8001fd6:	f000 fb7b 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fda:	23c0      	movs	r3, #192	@ 0xc0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4819      	ldr	r0, [pc, #100]	@ (800205c <HAL_TIM_MspPostInit+0x144>)
 8001ff6:	f000 fb6b 	bl	80026d0 <HAL_GPIO_Init>
}
 8001ffa:	e022      	b.n	8002042 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <HAL_TIM_MspPostInit+0x148>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d11d      	bne.n	8002042 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a0f      	ldr	r2, [pc, #60]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_TIM_MspPostInit+0x134>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002022:	23c0      	movs	r3, #192	@ 0xc0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002032:	2302      	movs	r3, #2
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4806      	ldr	r0, [pc, #24]	@ (8002058 <HAL_TIM_MspPostInit+0x140>)
 800203e:	f000 fb47 	bl	80026d0 <HAL_GPIO_Init>
}
 8002042:	bf00      	nop
 8002044:	3730      	adds	r7, #48	@ 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40000400 	.word	0x40000400
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40000800 	.word	0x40000800

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	@ 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1d      	ldr	r2, [pc, #116]	@ (80020f8 <HAL_UART_MspInit+0x94>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d134      	bne.n	80020f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_UART_MspInit+0x98>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_UART_MspInit+0x98>)
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	6453      	str	r3, [r2, #68]	@ 0x44
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_UART_MspInit+0x98>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_UART_MspInit+0x98>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <HAL_UART_MspInit+0x98>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_UART_MspInit+0x98>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020d0:	2307      	movs	r3, #7
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	@ (8002100 <HAL_UART_MspInit+0x9c>)
 80020dc:	f000 faf8 	bl	80026d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2025      	movs	r0, #37	@ 0x25
 80020e6:	f000 fa2a 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ea:	2025      	movs	r0, #37	@ 0x25
 80020ec:	f000 fa43 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	@ 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <NMI_Handler+0x4>

0800210c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <MemManage_Handler+0x4>

0800211c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <UsageFault_Handler+0x4>

0800212c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215a:	f000 f8d1 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <USART1_IRQHandler+0x10>)
 800216a:	f001 ffb1 	bl	80040d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000178 	.word	0x20000178

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f002 ff10 	bl	8004fcc <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20020000 	.word	0x20020000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	200001d8 	.word	0x200001d8
 80021e0:	20000328 	.word	0x20000328

080021e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002240 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800220c:	f7ff ffea 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	@ (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002236:	f002 fecf 	bl	8004fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7fe fdaf 	bl	8000d9c <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800224c:	08005958 	.word	0x08005958
  ldr r2, =_sbss
 8002250:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002254:	20000328 	.word	0x20000328

08002258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f94f 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	200f      	movs	r0, #15
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fdce 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f967 	bl	8002592 <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 f92f 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	@ (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000028 	.word	0x20000028
 80022f8:	20000030 	.word	0x20000030
 80022fc:	2000002c 	.word	0x2000002c

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000030 	.word	0x20000030
 8002324:	200001dc 	.word	0x200001dc

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200001dc 	.word	0x200001dc

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000030 	.word	0x20000030

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	@ (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	@ (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff3e 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff8e 	bl	800247c <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff31 	bl	80023ec <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff feb6 	bl	8002328 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d008      	beq.n	80025dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e052      	b.n	8002682 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0216 	bic.w	r2, r2, #22
 80025ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <HAL_DMA_Abort+0x62>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0208 	bic.w	r2, r2, #8
 800261a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262c:	e013      	b.n	8002656 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800262e:	f7ff fe7b 	bl	8002328 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b05      	cmp	r3, #5
 800263a:	d90c      	bls.n	8002656 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e015      	b.n	8002682 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e4      	bne.n	800262e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	223f      	movs	r2, #63	@ 0x3f
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d004      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2280      	movs	r2, #128	@ 0x80
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e00c      	b.n	80026c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2205      	movs	r2, #5
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e165      	b.n	80029b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	f040 8154 	bne.w	80029b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d005      	beq.n	8002722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	2b02      	cmp	r3, #2
 8002720:	d130      	bne.n	8002784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b03      	cmp	r3, #3
 800278e:	d017      	beq.n	80027c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80ae 	beq.w	80029b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b5d      	ldr	r3, [pc, #372]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a5c      	ldr	r2, [pc, #368]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b5a      	ldr	r3, [pc, #360]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002872:	4a58      	ldr	r2, [pc, #352]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4f      	ldr	r2, [pc, #316]	@ (80029d8 <HAL_GPIO_Init+0x308>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d025      	beq.n	80028ea <HAL_GPIO_Init+0x21a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4e      	ldr	r2, [pc, #312]	@ (80029dc <HAL_GPIO_Init+0x30c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01f      	beq.n	80028e6 <HAL_GPIO_Init+0x216>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4d      	ldr	r2, [pc, #308]	@ (80029e0 <HAL_GPIO_Init+0x310>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d019      	beq.n	80028e2 <HAL_GPIO_Init+0x212>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4c      	ldr	r2, [pc, #304]	@ (80029e4 <HAL_GPIO_Init+0x314>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4b      	ldr	r2, [pc, #300]	@ (80029e8 <HAL_GPIO_Init+0x318>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00d      	beq.n	80028da <HAL_GPIO_Init+0x20a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4a      	ldr	r2, [pc, #296]	@ (80029ec <HAL_GPIO_Init+0x31c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <HAL_GPIO_Init+0x206>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a49      	ldr	r2, [pc, #292]	@ (80029f0 <HAL_GPIO_Init+0x320>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_GPIO_Init+0x202>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00c      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00a      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028d6:	2305      	movs	r3, #5
 80028d8:	e008      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028da:	2304      	movs	r3, #4
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028de:	2303      	movs	r3, #3
 80028e0:	e004      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_Init+0x21c>
 80028ea:	2300      	movs	r3, #0
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f002 0203 	and.w	r2, r2, #3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4093      	lsls	r3, r2
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028fc:	4935      	ldr	r1, [pc, #212]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290a:	4b3a      	ldr	r3, [pc, #232]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292e:	4a31      	ldr	r2, [pc, #196]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002934:	4b2f      	ldr	r3, [pc, #188]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002958:	4a26      	ldr	r2, [pc, #152]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002982:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002988:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ac:	4a11      	ldr	r2, [pc, #68]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b0f      	cmp	r3, #15
 80029bc:	f67f ae96 	bls.w	80026ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3724      	adds	r7, #36	@ 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40021400 	.word	0x40021400
 80029f0:	40021800 	.word	0x40021800
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0cc      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b68      	ldr	r3, [pc, #416]	@ (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d90c      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b65      	ldr	r3, [pc, #404]	@ (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b63      	ldr	r3, [pc, #396]	@ (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0b8      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab0:	4b59      	ldr	r3, [pc, #356]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a58      	ldr	r2, [pc, #352]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac8:	4b53      	ldr	r3, [pc, #332]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a52      	ldr	r2, [pc, #328]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad4:	4b50      	ldr	r3, [pc, #320]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	494d      	ldr	r1, [pc, #308]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d044      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b47      	ldr	r3, [pc, #284]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d119      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e07f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e067      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4934      	ldr	r1, [pc, #208]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7ff fbec 	bl	8002328 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7ff fbe8 	bl	8002328 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e04f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d20c      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e032      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4916      	ldr	r1, [pc, #88]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	490e      	ldr	r1, [pc, #56]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be2:	f000 f855 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	490a      	ldr	r1, [pc, #40]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	5ccb      	ldrb	r3, [r1, r3]
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	4a09      	ldr	r2, [pc, #36]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fb4c 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	080058fc 	.word	0x080058fc
 8002c20:	20000028 	.word	0x20000028
 8002c24:	2000002c 	.word	0x2000002c

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000028 	.word	0x20000028

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	0800590c 	.word	0x0800590c

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffdc 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	@ (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	0800590c 	.word	0x0800590c

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b0a6      	sub	sp, #152	@ 0x98
 8002c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb6:	4bc8      	ldr	r3, [pc, #800]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	f200 817e 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x330>
 8002cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ccc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002fc1 	.word	0x08002fc1
 8002cd4:	08002fc1 	.word	0x08002fc1
 8002cd8:	08002fc1 	.word	0x08002fc1
 8002cdc:	08002d09 	.word	0x08002d09
 8002ce0:	08002fc1 	.word	0x08002fc1
 8002ce4:	08002fc1 	.word	0x08002fc1
 8002ce8:	08002fc1 	.word	0x08002fc1
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002fc1 	.word	0x08002fc1
 8002cf4:	08002fc1 	.word	0x08002fc1
 8002cf8:	08002fc1 	.word	0x08002fc1
 8002cfc:	08002e7b 	.word	0x08002e7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4bb6      	ldr	r3, [pc, #728]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d06:	e15f      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d08:	4bb5      	ldr	r3, [pc, #724]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d0e:	e15b      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d10:	4bb1      	ldr	r3, [pc, #708]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1c:	4bae      	ldr	r3, [pc, #696]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d031      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4bab      	ldr	r3, [pc, #684]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d40:	4ba7      	ldr	r3, [pc, #668]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d46:	462a      	mov	r2, r5
 8002d48:	fb03 f202 	mul.w	r2, r3, r2
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	4621      	mov	r1, r4
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	4aa2      	ldr	r2, [pc, #648]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d58:	4621      	mov	r1, r4
 8002d5a:	fba1 1202 	umull	r1, r2, r1, r2
 8002d5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d60:	460a      	mov	r2, r1
 8002d62:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002d64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d66:	4413      	add	r3, r2
 8002d68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6e:	2200      	movs	r2, #0
 8002d70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002d7c:	f7fd fe96 	bl	8000aac <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d8a:	e064      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8c:	4b92      	ldr	r3, [pc, #584]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	2200      	movs	r2, #0
 8002d94:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d96:	657a      	str	r2, [r7, #84]	@ 0x54
 8002d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da0:	2300      	movs	r3, #0
 8002da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002da8:	4622      	mov	r2, r4
 8002daa:	462b      	mov	r3, r5
 8002dac:	f04f 0000 	mov.w	r0, #0
 8002db0:	f04f 0100 	mov.w	r1, #0
 8002db4:	0159      	lsls	r1, r3, #5
 8002db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dba:	0150      	lsls	r0, r2, #5
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	1a51      	subs	r1, r2, r1
 8002dc4:	6139      	str	r1, [r7, #16]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dda:	4659      	mov	r1, fp
 8002ddc:	018b      	lsls	r3, r1, #6
 8002dde:	4651      	mov	r1, sl
 8002de0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de4:	4651      	mov	r1, sl
 8002de6:	018a      	lsls	r2, r1, #6
 8002de8:	4651      	mov	r1, sl
 8002dea:	ebb2 0801 	subs.w	r8, r2, r1
 8002dee:	4659      	mov	r1, fp
 8002df0:	eb63 0901 	sbc.w	r9, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e08:	4690      	mov	r8, r2
 8002e0a:	4699      	mov	r9, r3
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	eb18 0303 	adds.w	r3, r8, r3
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	462b      	mov	r3, r5
 8002e16:	eb49 0303 	adc.w	r3, r9, r3
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e28:	4629      	mov	r1, r5
 8002e2a:	028b      	lsls	r3, r1, #10
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e32:	4621      	mov	r1, r4
 8002e34:	028a      	lsls	r2, r1, #10
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3e:	2200      	movs	r2, #0
 8002e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e42:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e48:	f7fd fe30 	bl	8000aac <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e56:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	3301      	adds	r3, #1
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002e68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e78:	e0a6      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e7a:	4b57      	ldr	r3, [pc, #348]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e86:	4b54      	ldr	r3, [pc, #336]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d02a      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e92:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	2200      	movs	r2, #0
 8002e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ea8:	fb03 f201 	mul.w	r2, r3, r1
 8002eac:	2300      	movs	r3, #0
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002eba:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	673a      	str	r2, [r7, #112]	@ 0x70
 8002ec0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ec2:	4413      	add	r3, r2
 8002ec4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eca:	2200      	movs	r2, #0
 8002ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ece:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ed0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ed4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002ed8:	f7fd fde8 	bl	8000aac <__aeabi_uldivmod>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ee6:	e05b      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	2200      	movs	r2, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	f04f 0000 	mov.w	r0, #0
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	0159      	lsls	r1, r3, #5
 8002f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f16:	0150      	lsls	r0, r2, #5
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f22:	4649      	mov	r1, r9
 8002f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f40:	eb63 050b 	sbc.w	r5, r3, fp
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	00eb      	lsls	r3, r5, #3
 8002f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f52:	00e2      	lsls	r2, r4, #3
 8002f54:	4614      	mov	r4, r2
 8002f56:	461d      	mov	r5, r3
 8002f58:	4643      	mov	r3, r8
 8002f5a:	18e3      	adds	r3, r4, r3
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	464b      	mov	r3, r9
 8002f60:	eb45 0303 	adc.w	r3, r5, r3
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f72:	4629      	mov	r1, r5
 8002f74:	028b      	lsls	r3, r1, #10
 8002f76:	4621      	mov	r1, r4
 8002f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	028a      	lsls	r2, r1, #10
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	61fa      	str	r2, [r7, #28]
 8002f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f92:	f7fd fd8b 	bl	8000aac <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0f1b      	lsrs	r3, r3, #28
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3798      	adds	r7, #152	@ 0x98
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	017d7840 	.word	0x017d7840

08002fe4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e28d      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8083 	beq.w	800310a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003004:	4b94      	ldr	r3, [pc, #592]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b04      	cmp	r3, #4
 800300e:	d019      	beq.n	8003044 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003010:	4b91      	ldr	r3, [pc, #580]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
        || \
 8003018:	2b08      	cmp	r3, #8
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003028:	d00c      	beq.n	8003044 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b8b      	ldr	r3, [pc, #556]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d112      	bne.n	800305c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b84      	ldr	r3, [pc, #528]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05b      	beq.n	8003108 <HAL_RCC_OscConfig+0x124>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d157      	bne.n	8003108 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e25a      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x90>
 8003066:	4b7c      	ldr	r3, [pc, #496]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7b      	ldr	r2, [pc, #492]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xcc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0xb4>
 800307e:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a72      	ldr	r2, [pc, #456]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xcc>
 8003098:	4b6f      	ldr	r3, [pc, #444]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6e      	ldr	r2, [pc, #440]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7ff f936 	bl	8002328 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7ff f932 	bl	8002328 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e21f      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xdc>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff f922 	bl	8002328 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff f91e 	bl	8002328 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e20b      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x104>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d06f      	beq.n	80031f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003116:	4b50      	ldr	r3, [pc, #320]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003122:	4b4d      	ldr	r3, [pc, #308]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
        || \
 800312a:	2b08      	cmp	r3, #8
 800312c:	d105      	bne.n	800313a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x186>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1d3      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x278>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7ff f8cb 	bl	8002328 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7ff f8c7 	bl	8002328 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1b4      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_OscConfig+0x278>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7ff f8aa 	bl	8002328 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7ff f8a6 	bl	8002328 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e193      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_RCC_OscConfig+0x27c>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7ff f88a 	bl	8002328 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7ff f886 	bl	8002328 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e173      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x234>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x27c>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7ff f873 	bl	8002328 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7ff f86f 	bl	8002328 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e15c      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b8a      	ldr	r3, [pc, #552]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b83      	ldr	r3, [pc, #524]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7f      	ldr	r3, [pc, #508]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a7e      	ldr	r2, [pc, #504]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b7c      	ldr	r3, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b79      	ldr	r3, [pc, #484]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a75      	ldr	r2, [pc, #468]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7ff f82f 	bl	8002328 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7ff f82b 	bl	8002328 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e118      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x31e>
 80032f4:	4b66      	ldr	r3, [pc, #408]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a65      	ldr	r2, [pc, #404]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x358>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x340>
 800330a:	4b61      	ldr	r3, [pc, #388]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a60      	ldr	r2, [pc, #384]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b5e      	ldr	r3, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a5d      	ldr	r2, [pc, #372]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x358>
 8003324:	4b5a      	ldr	r3, [pc, #360]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a59      	ldr	r2, [pc, #356]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe fff0 	bl	8002328 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe ffec 	bl	8002328 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0d7      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b4b      	ldr	r3, [pc, #300]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x368>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe ffda 	bl	8002328 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe ffd6 	bl	8002328 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0c1      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b40      	ldr	r3, [pc, #256]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80ad 	beq.w	8003510 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d060      	beq.n	8003484 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d145      	bne.n	8003456 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_RCC_OscConfig+0x4b4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe ffaa 	bl	8002328 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe ffa6 	bl	8002328 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e093      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	071b      	lsls	r3, r3, #28
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x4b4>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fe ff7b 	bl	8002328 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe ff77 	bl	8002328 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e064      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x452>
 8003454:	e05c      	b.n	8003510 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_RCC_OscConfig+0x4b4>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe ff64 	bl	8002328 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe ff60 	bl	8002328 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e04d      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x480>
 8003482:	e045      	b.n	8003510 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e040      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
 8003498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800349c:	4b1f      	ldr	r3, [pc, #124]	@ (800351c <HAL_RCC_OscConfig+0x538>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d030      	beq.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d129      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d122      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d119      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d10f      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e041      	b.n	80035b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe fc9a 	bl	8001e80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f9b8 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_TIM_PWM_Start+0x24>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e022      	b.n	800362a <HAL_TIM_PWM_Start+0x6a>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d109      	bne.n	80035fe <HAL_TIM_PWM_Start+0x3e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e015      	b.n	800362a <HAL_TIM_PWM_Start+0x6a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d109      	bne.n	8003618 <HAL_TIM_PWM_Start+0x58>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e008      	b.n	800362a <HAL_TIM_PWM_Start+0x6a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07c      	b.n	800372c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0x82>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003640:	e013      	b.n	800366a <HAL_TIM_PWM_Start+0xaa>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0x92>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003650:	e00b      	b.n	800366a <HAL_TIM_PWM_Start+0xaa>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003660:	e003      	b.n	800366a <HAL_TIM_PWM_Start+0xaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2201      	movs	r2, #1
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fb8a 	bl	8003d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2d      	ldr	r2, [pc, #180]	@ (8003734 <HAL_TIM_PWM_Start+0x174>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_PWM_Start+0xcc>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2c      	ldr	r2, [pc, #176]	@ (8003738 <HAL_TIM_PWM_Start+0x178>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_TIM_PWM_Start+0xd0>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_TIM_PWM_Start+0xd2>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a22      	ldr	r2, [pc, #136]	@ (8003734 <HAL_TIM_PWM_Start+0x174>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d01d      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1f      	ldr	r2, [pc, #124]	@ (800373c <HAL_TIM_PWM_Start+0x17c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <HAL_TIM_PWM_Start+0x180>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <HAL_TIM_PWM_Start+0x184>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	@ (8003738 <HAL_TIM_PWM_Start+0x178>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_TIM_PWM_Start+0x188>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x136>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a16      	ldr	r2, [pc, #88]	@ (800374c <HAL_TIM_PWM_Start+0x18c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d010      	beq.n	800372a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	e007      	b.n	800372a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40010000 	.word	0x40010000
 8003738:	40010400 	.word	0x40010400
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40014000 	.word	0x40014000
 800374c:	40001800 	.word	0x40001800

08003750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800376a:	2302      	movs	r3, #2
 800376c:	e0ae      	b.n	80038cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	f200 809f 	bhi.w	80038bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800377e:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080038bd 	.word	0x080038bd
 800378c:	080038bd 	.word	0x080038bd
 8003790:	080038bd 	.word	0x080038bd
 8003794:	080037f9 	.word	0x080037f9
 8003798:	080038bd 	.word	0x080038bd
 800379c:	080038bd 	.word	0x080038bd
 80037a0:	080038bd 	.word	0x080038bd
 80037a4:	0800383b 	.word	0x0800383b
 80037a8:	080038bd 	.word	0x080038bd
 80037ac:	080038bd 	.word	0x080038bd
 80037b0:	080038bd 	.word	0x080038bd
 80037b4:	0800387b 	.word	0x0800387b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f934 	bl	8003a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	619a      	str	r2, [r3, #24]
      break;
 80037f6:	e064      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f984 	bl	8003b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	619a      	str	r2, [r3, #24]
      break;
 8003838:	e043      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f9d9 	bl	8003bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0208 	orr.w	r2, r2, #8
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0204 	bic.w	r2, r2, #4
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	61da      	str	r2, [r3, #28]
      break;
 8003878:	e023      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fa2d 	bl	8003ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	021a      	lsls	r2, r3, #8
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	61da      	str	r2, [r3, #28]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a43      	ldr	r2, [pc, #268]	@ (8003a04 <TIM_Base_SetConfig+0x130>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <TIM_Base_SetConfig+0x134>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a41      	ldr	r2, [pc, #260]	@ (8003a0c <TIM_Base_SetConfig+0x138>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a40      	ldr	r2, [pc, #256]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d027      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a32      	ldr	r2, [pc, #200]	@ (8003a04 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d023      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <TIM_Base_SetConfig+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <TIM_Base_SetConfig+0x138>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2f      	ldr	r2, [pc, #188]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d017      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <TIM_Base_SetConfig+0x140>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2c      	ldr	r2, [pc, #176]	@ (8003a1c <TIM_Base_SetConfig+0x148>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2b      	ldr	r2, [pc, #172]	@ (8003a20 <TIM_Base_SetConfig+0x14c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <TIM_Base_SetConfig+0x150>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <TIM_Base_SetConfig+0x154>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
  }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	40001800 	.word	0x40001800
 8003a24:	40001c00 	.word	0x40001c00
 8003a28:	40002000 	.word	0x40002000

08003a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 0201 	bic.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 0302 	bic.w	r3, r3, #2
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a20      	ldr	r2, [pc, #128]	@ (8003b04 <TIM_OC1_SetConfig+0xd8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_OC1_SetConfig+0x64>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <TIM_OC1_SetConfig+0xdc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10c      	bne.n	8003aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0308 	bic.w	r3, r3, #8
 8003a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <TIM_OC1_SetConfig+0xd8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_OC1_SetConfig+0x8e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	@ (8003b08 <TIM_OC1_SetConfig+0xdc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d111      	bne.n	8003ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	621a      	str	r2, [r3, #32]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40010400 	.word	0x40010400

08003b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 0210 	bic.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0320 	bic.w	r3, r3, #32
 8003b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <TIM_OC2_SetConfig+0xe4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC2_SetConfig+0x68>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <TIM_OC2_SetConfig+0xe8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10d      	bne.n	8003b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <TIM_OC2_SetConfig+0xe4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x94>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	@ (8003bf4 <TIM_OC2_SetConfig+0xe8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d113      	bne.n	8003bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40010400 	.word	0x40010400

08003bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a21      	ldr	r2, [pc, #132]	@ (8003cd8 <TIM_OC3_SetConfig+0xe0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d003      	beq.n	8003c5e <TIM_OC3_SetConfig+0x66>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a20      	ldr	r2, [pc, #128]	@ (8003cdc <TIM_OC3_SetConfig+0xe4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10d      	bne.n	8003c7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <TIM_OC3_SetConfig+0xe0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_OC3_SetConfig+0x92>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a15      	ldr	r2, [pc, #84]	@ (8003cdc <TIM_OC3_SetConfig+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d113      	bne.n	8003cb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <TIM_OC4_SetConfig+0xa4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC4_SetConfig+0x68>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a11      	ldr	r2, [pc, #68]	@ (8003d88 <TIM_OC4_SetConfig+0xa8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d109      	bne.n	8003d5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40010400 	.word	0x40010400

08003d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e05a      	b.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3c:	d01d      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40010400 	.word	0x40010400
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40001800 	.word	0x40001800

08003ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e042      	b.n	8003f68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fe f8b4 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	@ 0x24
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fdbd 	bl	8004a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d175      	bne.n	800407c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_UART_Transmit+0x2c>
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e06e      	b.n	800407e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2221      	movs	r2, #33	@ 0x21
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fae:	f7fe f9bb 	bl	8002328 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc8:	d108      	bne.n	8003fdc <HAL_UART_Transmit+0x6c>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e003      	b.n	8003fe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fe4:	e02e      	b.n	8004044 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2180      	movs	r1, #128	@ 0x80
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fb1f 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e03a      	b.n	800407e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	3302      	adds	r3, #2
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e007      	b.n	8004036 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3301      	adds	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1cb      	bne.n	8003fe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2140      	movs	r1, #64	@ 0x40
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 faeb 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e006      	b.n	800407e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b20      	cmp	r3, #32
 800409e:	d112      	bne.n	80040c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Receive_IT+0x26>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e00b      	b.n	80040c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	461a      	mov	r2, r3
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fb12 	bl	80046e6 <UART_Start_Receive_IT>
 80040c2:	4603      	mov	r3, r0
 80040c4:	e000      	b.n	80040c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b0ba      	sub	sp, #232	@ 0xe8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800410e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_UART_IRQHandler+0x66>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fbf2 	bl	8004918 <UART_Receive_IT>
      return;
 8004134:	e25b      	b.n	80045ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80de 	beq.w	80042fc <HAL_UART_IRQHandler+0x22c>
 8004140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800414c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004150:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80d1 	beq.w	80042fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_UART_IRQHandler+0xae>
 8004166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_UART_IRQHandler+0xd2>
 800418a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419a:	f043 0202 	orr.w	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0xf6>
 80041ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_UART_IRQHandler+0x126>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d105      	bne.n	80041ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0208 	orr.w	r2, r3, #8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 81f2 	beq.w	80045e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_UART_IRQHandler+0x14e>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb7d 	bl	8004918 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b40      	cmp	r3, #64	@ 0x40
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_UART_IRQHandler+0x17a>
 8004242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04f      	beq.n	80042ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa85 	bl	800475a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d141      	bne.n	80042e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800427c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800428a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800428e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1d9      	bne.n	800425e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d013      	beq.n	80042da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b6:	4a7e      	ldr	r2, [pc, #504]	@ (80044b0 <HAL_UART_IRQHandler+0x3e0>)
 80042b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe f9e3 	bl	800268a <HAL_DMA_Abort_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042d4:	4610      	mov	r0, r2
 80042d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e00e      	b.n	80042f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f994 	bl	8004608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e00a      	b.n	80042f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f990 	bl	8004608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e006      	b.n	80042f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f98c 	bl	8004608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042f6:	e175      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	bf00      	nop
    return;
 80042fa:	e173      	b.n	80045e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	f040 814f 	bne.w	80045a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8148 	beq.w	80045a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8141 	beq.w	80045a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	f040 80b6 	bne.w	80044b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8145 	beq.w	80045e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004366:	429a      	cmp	r2, r3
 8004368:	f080 813e 	bcs.w	80045e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004372:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437e:	f000 8088 	beq.w	8004492 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800439c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1d9      	bne.n	8004382 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e1      	bne.n	80043ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800441a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800441c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800442e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004430:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004434:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800443c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004474:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004476:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800447a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e3      	bne.n	8004450 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe f88c 	bl	80025aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8b7 	bl	800461c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ae:	e09b      	b.n	80045e8 <HAL_UART_IRQHandler+0x518>
 80044b0:	08004821 	.word	0x08004821
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 808e 	beq.w	80045ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8089 	beq.w	80045ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004500:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004504:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800450c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e3      	bne.n	80044da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	623b      	str	r3, [r7, #32]
   return(result);
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004536:	633a      	str	r2, [r7, #48]	@ 0x30
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e3      	bne.n	8004512 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60fb      	str	r3, [r7, #12]
   return(result);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	617b      	str	r3, [r7, #20]
   return(result);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e3      	bne.n	8004558 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f83d 	bl	800461c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045a2:	e023      	b.n	80045ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_UART_IRQHandler+0x4f4>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f943 	bl	8004848 <UART_Transmit_IT>
    return;
 80045c2:	e014      	b.n	80045ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <HAL_UART_IRQHandler+0x51e>
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f983 	bl	80048e8 <UART_EndTransmit_IT>
    return;
 80045e2:	e004      	b.n	80045ee <HAL_UART_IRQHandler+0x51e>
    return;
 80045e4:	bf00      	nop
 80045e6:	e002      	b.n	80045ee <HAL_UART_IRQHandler+0x51e>
      return;
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <HAL_UART_IRQHandler+0x51e>
      return;
 80045ec:	bf00      	nop
  }
}
 80045ee:	37e8      	adds	r7, #232	@ 0xe8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004644:	e03b      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d037      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fd fe6b 	bl	8002328 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	6a3a      	ldr	r2, [r7, #32]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <UART_WaitOnFlagUntilTimeout+0x30>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e03a      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d023      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x8a>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b80      	cmp	r3, #128	@ 0x80
 800467a:	d020      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x8a>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d01d      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d116      	bne.n	80046be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f857 	bl	800475a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2208      	movs	r2, #8
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e00f      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d0b4      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	4613      	mov	r3, r2
 80046f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2222      	movs	r2, #34	@ 0x22
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0220 	orr.w	r2, r2, #32
 800474a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475a:	b480      	push	{r7}
 800475c:	b095      	sub	sp, #84	@ 0x54
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004782:	643a      	str	r2, [r7, #64]	@ 0x40
 8004784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004788:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e5      	bne.n	8004796 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d119      	bne.n	8004806 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f023 0310 	bic.w	r3, r3, #16
 80047e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047f2:	61ba      	str	r2, [r7, #24]
 80047f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004814:	bf00      	nop
 8004816:	3754      	adds	r7, #84	@ 0x54
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff fee4 	bl	8004608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b21      	cmp	r3, #33	@ 0x21
 800485a:	d13e      	bne.n	80048da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004864:	d114      	bne.n	8004890 <UART_Transmit_IT+0x48>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d110      	bne.n	8004890 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004882:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]
 800488e:	e008      	b.n	80048a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	1c59      	adds	r1, r3, #1
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6211      	str	r1, [r2, #32]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fe73 	bl	80045f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	@ 0x30
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b22      	cmp	r3, #34	@ 0x22
 800492a:	f040 80ae 	bne.w	8004a8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004936:	d117      	bne.n	8004968 <UART_Receive_IT+0x50>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d113      	bne.n	8004968 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	b29a      	uxth	r2, r3
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	629a      	str	r2, [r3, #40]	@ 0x28
 8004966:	e026      	b.n	80049b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497a:	d007      	beq.n	800498c <UART_Receive_IT+0x74>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <UART_Receive_IT+0x82>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e008      	b.n	80049ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d15d      	bne.n	8004a86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0220 	bic.w	r2, r2, #32
 80049d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d135      	bne.n	8004a7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	613b      	str	r3, [r7, #16]
   return(result);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f023 0310 	bic.w	r3, r3, #16
 8004a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a36:	623a      	str	r2, [r7, #32]
 8004a38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	69f9      	ldr	r1, [r7, #28]
 8004a3c:	6a3a      	ldr	r2, [r7, #32]
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e5      	bne.n	8004a16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d10a      	bne.n	8004a6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fdd1 	bl	800461c <HAL_UARTEx_RxEventCallback>
 8004a7a:	e002      	b.n	8004a82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fc ff2d 	bl	80018dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e002      	b.n	8004a8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3730      	adds	r7, #48	@ 0x30
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a98:	b0c0      	sub	sp, #256	@ 0x100
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab0:	68d9      	ldr	r1, [r3, #12]
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	ea40 0301 	orr.w	r3, r0, r1
 8004abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004aec:	f021 010c 	bic.w	r1, r1, #12
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004afa:	430b      	orrs	r3, r1
 8004afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0e:	6999      	ldr	r1, [r3, #24]
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	ea40 0301 	orr.w	r3, r0, r1
 8004b1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b8f      	ldr	r3, [pc, #572]	@ (8004d60 <UART_SetConfig+0x2cc>)
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d005      	beq.n	8004b34 <UART_SetConfig+0xa0>
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d64 <UART_SetConfig+0x2d0>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d104      	bne.n	8004b3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b34:	f7fe f898 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8004b38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b3c:	e003      	b.n	8004b46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b3e:	f7fe f87f 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004b42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b50:	f040 810c 	bne.w	8004d6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	1891      	adds	r1, r2, r2
 8004b6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b6e:	415b      	adcs	r3, r3
 8004b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b76:	4621      	mov	r1, r4
 8004b78:	eb12 0801 	adds.w	r8, r2, r1
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	eb43 0901 	adc.w	r9, r3, r1
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b96:	4690      	mov	r8, r2
 8004b98:	4699      	mov	r9, r3
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	eb18 0303 	adds.w	r3, r8, r3
 8004ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	eb49 0303 	adc.w	r3, r9, r3
 8004baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	18db      	adds	r3, r3, r3
 8004bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc8:	4613      	mov	r3, r2
 8004bca:	eb42 0303 	adc.w	r3, r2, r3
 8004bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bd8:	f7fb ff68 	bl	8000aac <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4b61      	ldr	r3, [pc, #388]	@ (8004d68 <UART_SetConfig+0x2d4>)
 8004be2:	fba3 2302 	umull	r2, r3, r3, r2
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	011c      	lsls	r4, r3, #4
 8004bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c04:	415b      	adcs	r3, r3
 8004c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c12:	4649      	mov	r1, r9
 8004c14:	eb43 0b01 	adc.w	fp, r3, r1
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c2c:	4692      	mov	sl, r2
 8004c2e:	469b      	mov	fp, r3
 8004c30:	4643      	mov	r3, r8
 8004c32:	eb1a 0303 	adds.w	r3, sl, r3
 8004c36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	18db      	adds	r3, r3, r3
 8004c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5e:	4613      	mov	r3, r2
 8004c60:	eb42 0303 	adc.w	r3, r2, r3
 8004c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c6e:	f7fb ff1d 	bl	8000aac <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	4b3b      	ldr	r3, [pc, #236]	@ (8004d68 <UART_SetConfig+0x2d4>)
 8004c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2264      	movs	r2, #100	@ 0x64
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	1acb      	subs	r3, r1, r3
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c8e:	4b36      	ldr	r3, [pc, #216]	@ (8004d68 <UART_SetConfig+0x2d4>)
 8004c90:	fba3 2302 	umull	r2, r3, r3, r2
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c9c:	441c      	add	r4, r3
 8004c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	1891      	adds	r1, r2, r2
 8004cb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cb8:	415b      	adcs	r3, r3
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	1851      	adds	r1, r2, r1
 8004cc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	414b      	adcs	r3, r1
 8004cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cd8:	4659      	mov	r1, fp
 8004cda:	00cb      	lsls	r3, r1, #3
 8004cdc:	4651      	mov	r1, sl
 8004cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	00ca      	lsls	r2, r1, #3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	4642      	mov	r2, r8
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	eb42 0303 	adc.w	r3, r2, r3
 8004cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d14:	460b      	mov	r3, r1
 8004d16:	18db      	adds	r3, r3, r3
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	eb42 0303 	adc.w	r3, r2, r3
 8004d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d2a:	f7fb febf 	bl	8000aac <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4b0d      	ldr	r3, [pc, #52]	@ (8004d68 <UART_SetConfig+0x2d4>)
 8004d34:	fba3 1302 	umull	r1, r3, r3, r2
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	2164      	movs	r1, #100	@ 0x64
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	3332      	adds	r3, #50	@ 0x32
 8004d46:	4a08      	ldr	r2, [pc, #32]	@ (8004d68 <UART_SetConfig+0x2d4>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	f003 0207 	and.w	r2, r3, #7
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4422      	add	r2, r4
 8004d5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d5c:	e106      	b.n	8004f6c <UART_SetConfig+0x4d8>
 8004d5e:	bf00      	nop
 8004d60:	40011000 	.word	0x40011000
 8004d64:	40011400 	.word	0x40011400
 8004d68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d7e:	4642      	mov	r2, r8
 8004d80:	464b      	mov	r3, r9
 8004d82:	1891      	adds	r1, r2, r2
 8004d84:	6239      	str	r1, [r7, #32]
 8004d86:	415b      	adcs	r3, r3
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d8e:	4641      	mov	r1, r8
 8004d90:	1854      	adds	r4, r2, r1
 8004d92:	4649      	mov	r1, r9
 8004d94:	eb43 0501 	adc.w	r5, r3, r1
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	00eb      	lsls	r3, r5, #3
 8004da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da6:	00e2      	lsls	r2, r4, #3
 8004da8:	4614      	mov	r4, r2
 8004daa:	461d      	mov	r5, r3
 8004dac:	4643      	mov	r3, r8
 8004dae:	18e3      	adds	r3, r4, r3
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004db4:	464b      	mov	r3, r9
 8004db6:	eb45 0303 	adc.w	r3, r5, r3
 8004dba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dda:	4629      	mov	r1, r5
 8004ddc:	008b      	lsls	r3, r1, #2
 8004dde:	4621      	mov	r1, r4
 8004de0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de4:	4621      	mov	r1, r4
 8004de6:	008a      	lsls	r2, r1, #2
 8004de8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004dec:	f7fb fe5e 	bl	8000aac <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4b60      	ldr	r3, [pc, #384]	@ (8004f78 <UART_SetConfig+0x4e4>)
 8004df6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	011c      	lsls	r4, r3, #4
 8004dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	1891      	adds	r1, r2, r2
 8004e16:	61b9      	str	r1, [r7, #24]
 8004e18:	415b      	adcs	r3, r3
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e20:	4641      	mov	r1, r8
 8004e22:	1851      	adds	r1, r2, r1
 8004e24:	6139      	str	r1, [r7, #16]
 8004e26:	4649      	mov	r1, r9
 8004e28:	414b      	adcs	r3, r1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e38:	4659      	mov	r1, fp
 8004e3a:	00cb      	lsls	r3, r1, #3
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e42:	4651      	mov	r1, sl
 8004e44:	00ca      	lsls	r2, r1, #3
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e54:	464b      	mov	r3, r9
 8004e56:	460a      	mov	r2, r1
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e78:	4649      	mov	r1, r9
 8004e7a:	008b      	lsls	r3, r1, #2
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e82:	4641      	mov	r1, r8
 8004e84:	008a      	lsls	r2, r1, #2
 8004e86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e8a:	f7fb fe0f 	bl	8000aac <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	4b38      	ldr	r3, [pc, #224]	@ (8004f78 <UART_SetConfig+0x4e4>)
 8004e96:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2264      	movs	r2, #100	@ 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	3332      	adds	r3, #50	@ 0x32
 8004ea8:	4a33      	ldr	r2, [pc, #204]	@ (8004f78 <UART_SetConfig+0x4e4>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eb4:	441c      	add	r4, r3
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ebe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ec0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	1891      	adds	r1, r2, r2
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	415b      	adcs	r3, r3
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	1851      	adds	r1, r2, r1
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	4649      	mov	r1, r9
 8004edc:	414b      	adcs	r3, r1
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004eec:	4659      	mov	r1, fp
 8004eee:	00cb      	lsls	r3, r1, #3
 8004ef0:	4651      	mov	r1, sl
 8004ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	00ca      	lsls	r2, r1, #3
 8004efa:	4610      	mov	r0, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	4642      	mov	r2, r8
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f06:	464b      	mov	r3, r9
 8004f08:	460a      	mov	r2, r1
 8004f0a:	eb42 0303 	adc.w	r3, r2, r3
 8004f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f28:	4649      	mov	r1, r9
 8004f2a:	008b      	lsls	r3, r1, #2
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f32:	4641      	mov	r1, r8
 8004f34:	008a      	lsls	r2, r1, #2
 8004f36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f3a:	f7fb fdb7 	bl	8000aac <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <UART_SetConfig+0x4e4>)
 8004f44:	fba3 1302 	umull	r1, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	2164      	movs	r1, #100	@ 0x64
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	3332      	adds	r3, #50	@ 0x32
 8004f56:	4a08      	ldr	r2, [pc, #32]	@ (8004f78 <UART_SetConfig+0x4e4>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 020f 	and.w	r2, r3, #15
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4422      	add	r2, r4
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f72:	46bd      	mov	sp, r7
 8004f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f78:	51eb851f 	.word	0x51eb851f

08004f7c <siprintf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b500      	push	{lr}
 8004f80:	b09c      	sub	sp, #112	@ 0x70
 8004f82:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f8c:	4809      	ldr	r0, [pc, #36]	@ (8004fb4 <siprintf+0x38>)
 8004f8e:	9107      	str	r1, [sp, #28]
 8004f90:	9104      	str	r1, [sp, #16]
 8004f92:	4909      	ldr	r1, [pc, #36]	@ (8004fb8 <siprintf+0x3c>)
 8004f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f98:	9105      	str	r1, [sp, #20]
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	a902      	add	r1, sp, #8
 8004fa0:	f000 f9a2 	bl	80052e8 <_svfiprintf_r>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	b01c      	add	sp, #112	@ 0x70
 8004fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb0:	b003      	add	sp, #12
 8004fb2:	4770      	bx	lr
 8004fb4:	20000034 	.word	0x20000034
 8004fb8:	ffff0208 	.word	0xffff0208

08004fbc <memset>:
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <__errno>:
 8004fcc:	4b01      	ldr	r3, [pc, #4]	@ (8004fd4 <__errno+0x8>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000034 	.word	0x20000034

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4d0d      	ldr	r5, [pc, #52]	@ (8005010 <__libc_init_array+0x38>)
 8004fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8005014 <__libc_init_array+0x3c>)
 8004fde:	1b64      	subs	r4, r4, r5
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	42a6      	cmp	r6, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8005018 <__libc_init_array+0x40>)
 8004fea:	4c0c      	ldr	r4, [pc, #48]	@ (800501c <__libc_init_array+0x44>)
 8004fec:	f000 fc66 	bl	80058bc <_init>
 8004ff0:	1b64      	subs	r4, r4, r5
 8004ff2:	10a4      	asrs	r4, r4, #2
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005000:	4798      	blx	r3
 8005002:	3601      	adds	r6, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	f855 3b04 	ldr.w	r3, [r5], #4
 800500a:	4798      	blx	r3
 800500c:	3601      	adds	r6, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	08005950 	.word	0x08005950
 8005014:	08005950 	.word	0x08005950
 8005018:	08005950 	.word	0x08005950
 800501c:	08005954 	.word	0x08005954

08005020 <__retarget_lock_acquire_recursive>:
 8005020:	4770      	bx	lr

08005022 <__retarget_lock_release_recursive>:
 8005022:	4770      	bx	lr

08005024 <memcpy>:
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	f100 33ff 	add.w	r3, r0, #4294967295
 800502c:	d100      	bne.n	8005030 <memcpy+0xc>
 800502e:	4770      	bx	lr
 8005030:	b510      	push	{r4, lr}
 8005032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503a:	4291      	cmp	r1, r2
 800503c:	d1f9      	bne.n	8005032 <memcpy+0xe>
 800503e:	bd10      	pop	{r4, pc}

08005040 <_free_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4605      	mov	r5, r0
 8005044:	2900      	cmp	r1, #0
 8005046:	d041      	beq.n	80050cc <_free_r+0x8c>
 8005048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504c:	1f0c      	subs	r4, r1, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfb8      	it	lt
 8005052:	18e4      	addlt	r4, r4, r3
 8005054:	f000 f8e0 	bl	8005218 <__malloc_lock>
 8005058:	4a1d      	ldr	r2, [pc, #116]	@ (80050d0 <_free_r+0x90>)
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	b933      	cbnz	r3, 800506c <_free_r+0x2c>
 800505e:	6063      	str	r3, [r4, #4]
 8005060:	6014      	str	r4, [r2, #0]
 8005062:	4628      	mov	r0, r5
 8005064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005068:	f000 b8dc 	b.w	8005224 <__malloc_unlock>
 800506c:	42a3      	cmp	r3, r4
 800506e:	d908      	bls.n	8005082 <_free_r+0x42>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	1821      	adds	r1, r4, r0
 8005074:	428b      	cmp	r3, r1
 8005076:	bf01      	itttt	eq
 8005078:	6819      	ldreq	r1, [r3, #0]
 800507a:	685b      	ldreq	r3, [r3, #4]
 800507c:	1809      	addeq	r1, r1, r0
 800507e:	6021      	streq	r1, [r4, #0]
 8005080:	e7ed      	b.n	800505e <_free_r+0x1e>
 8005082:	461a      	mov	r2, r3
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b10b      	cbz	r3, 800508c <_free_r+0x4c>
 8005088:	42a3      	cmp	r3, r4
 800508a:	d9fa      	bls.n	8005082 <_free_r+0x42>
 800508c:	6811      	ldr	r1, [r2, #0]
 800508e:	1850      	adds	r0, r2, r1
 8005090:	42a0      	cmp	r0, r4
 8005092:	d10b      	bne.n	80050ac <_free_r+0x6c>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	4401      	add	r1, r0
 8005098:	1850      	adds	r0, r2, r1
 800509a:	4283      	cmp	r3, r0
 800509c:	6011      	str	r1, [r2, #0]
 800509e:	d1e0      	bne.n	8005062 <_free_r+0x22>
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	6053      	str	r3, [r2, #4]
 80050a6:	4408      	add	r0, r1
 80050a8:	6010      	str	r0, [r2, #0]
 80050aa:	e7da      	b.n	8005062 <_free_r+0x22>
 80050ac:	d902      	bls.n	80050b4 <_free_r+0x74>
 80050ae:	230c      	movs	r3, #12
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	e7d6      	b.n	8005062 <_free_r+0x22>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	1821      	adds	r1, r4, r0
 80050b8:	428b      	cmp	r3, r1
 80050ba:	bf04      	itt	eq
 80050bc:	6819      	ldreq	r1, [r3, #0]
 80050be:	685b      	ldreq	r3, [r3, #4]
 80050c0:	6063      	str	r3, [r4, #4]
 80050c2:	bf04      	itt	eq
 80050c4:	1809      	addeq	r1, r1, r0
 80050c6:	6021      	streq	r1, [r4, #0]
 80050c8:	6054      	str	r4, [r2, #4]
 80050ca:	e7ca      	b.n	8005062 <_free_r+0x22>
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	20000324 	.word	0x20000324

080050d4 <sbrk_aligned>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005114 <sbrk_aligned+0x40>)
 80050d8:	460c      	mov	r4, r1
 80050da:	6831      	ldr	r1, [r6, #0]
 80050dc:	4605      	mov	r5, r0
 80050de:	b911      	cbnz	r1, 80050e6 <sbrk_aligned+0x12>
 80050e0:	f000 fba6 	bl	8005830 <_sbrk_r>
 80050e4:	6030      	str	r0, [r6, #0]
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 fba1 	bl	8005830 <_sbrk_r>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	d103      	bne.n	80050fa <sbrk_aligned+0x26>
 80050f2:	f04f 34ff 	mov.w	r4, #4294967295
 80050f6:	4620      	mov	r0, r4
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	1cc4      	adds	r4, r0, #3
 80050fc:	f024 0403 	bic.w	r4, r4, #3
 8005100:	42a0      	cmp	r0, r4
 8005102:	d0f8      	beq.n	80050f6 <sbrk_aligned+0x22>
 8005104:	1a21      	subs	r1, r4, r0
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fb92 	bl	8005830 <_sbrk_r>
 800510c:	3001      	adds	r0, #1
 800510e:	d1f2      	bne.n	80050f6 <sbrk_aligned+0x22>
 8005110:	e7ef      	b.n	80050f2 <sbrk_aligned+0x1e>
 8005112:	bf00      	nop
 8005114:	20000320 	.word	0x20000320

08005118 <_malloc_r>:
 8005118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800511c:	1ccd      	adds	r5, r1, #3
 800511e:	f025 0503 	bic.w	r5, r5, #3
 8005122:	3508      	adds	r5, #8
 8005124:	2d0c      	cmp	r5, #12
 8005126:	bf38      	it	cc
 8005128:	250c      	movcc	r5, #12
 800512a:	2d00      	cmp	r5, #0
 800512c:	4606      	mov	r6, r0
 800512e:	db01      	blt.n	8005134 <_malloc_r+0x1c>
 8005130:	42a9      	cmp	r1, r5
 8005132:	d904      	bls.n	800513e <_malloc_r+0x26>
 8005134:	230c      	movs	r3, #12
 8005136:	6033      	str	r3, [r6, #0]
 8005138:	2000      	movs	r0, #0
 800513a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005214 <_malloc_r+0xfc>
 8005142:	f000 f869 	bl	8005218 <__malloc_lock>
 8005146:	f8d8 3000 	ldr.w	r3, [r8]
 800514a:	461c      	mov	r4, r3
 800514c:	bb44      	cbnz	r4, 80051a0 <_malloc_r+0x88>
 800514e:	4629      	mov	r1, r5
 8005150:	4630      	mov	r0, r6
 8005152:	f7ff ffbf 	bl	80050d4 <sbrk_aligned>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	4604      	mov	r4, r0
 800515a:	d158      	bne.n	800520e <_malloc_r+0xf6>
 800515c:	f8d8 4000 	ldr.w	r4, [r8]
 8005160:	4627      	mov	r7, r4
 8005162:	2f00      	cmp	r7, #0
 8005164:	d143      	bne.n	80051ee <_malloc_r+0xd6>
 8005166:	2c00      	cmp	r4, #0
 8005168:	d04b      	beq.n	8005202 <_malloc_r+0xea>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	4639      	mov	r1, r7
 800516e:	4630      	mov	r0, r6
 8005170:	eb04 0903 	add.w	r9, r4, r3
 8005174:	f000 fb5c 	bl	8005830 <_sbrk_r>
 8005178:	4581      	cmp	r9, r0
 800517a:	d142      	bne.n	8005202 <_malloc_r+0xea>
 800517c:	6821      	ldr	r1, [r4, #0]
 800517e:	1a6d      	subs	r5, r5, r1
 8005180:	4629      	mov	r1, r5
 8005182:	4630      	mov	r0, r6
 8005184:	f7ff ffa6 	bl	80050d4 <sbrk_aligned>
 8005188:	3001      	adds	r0, #1
 800518a:	d03a      	beq.n	8005202 <_malloc_r+0xea>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	442b      	add	r3, r5
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	f8d8 3000 	ldr.w	r3, [r8]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	bb62      	cbnz	r2, 80051f4 <_malloc_r+0xdc>
 800519a:	f8c8 7000 	str.w	r7, [r8]
 800519e:	e00f      	b.n	80051c0 <_malloc_r+0xa8>
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	1b52      	subs	r2, r2, r5
 80051a4:	d420      	bmi.n	80051e8 <_malloc_r+0xd0>
 80051a6:	2a0b      	cmp	r2, #11
 80051a8:	d917      	bls.n	80051da <_malloc_r+0xc2>
 80051aa:	1961      	adds	r1, r4, r5
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	6025      	str	r5, [r4, #0]
 80051b0:	bf18      	it	ne
 80051b2:	6059      	strne	r1, [r3, #4]
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	bf08      	it	eq
 80051b8:	f8c8 1000 	streq.w	r1, [r8]
 80051bc:	5162      	str	r2, [r4, r5]
 80051be:	604b      	str	r3, [r1, #4]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f82f 	bl	8005224 <__malloc_unlock>
 80051c6:	f104 000b 	add.w	r0, r4, #11
 80051ca:	1d23      	adds	r3, r4, #4
 80051cc:	f020 0007 	bic.w	r0, r0, #7
 80051d0:	1ac2      	subs	r2, r0, r3
 80051d2:	bf1c      	itt	ne
 80051d4:	1a1b      	subne	r3, r3, r0
 80051d6:	50a3      	strne	r3, [r4, r2]
 80051d8:	e7af      	b.n	800513a <_malloc_r+0x22>
 80051da:	6862      	ldr	r2, [r4, #4]
 80051dc:	42a3      	cmp	r3, r4
 80051de:	bf0c      	ite	eq
 80051e0:	f8c8 2000 	streq.w	r2, [r8]
 80051e4:	605a      	strne	r2, [r3, #4]
 80051e6:	e7eb      	b.n	80051c0 <_malloc_r+0xa8>
 80051e8:	4623      	mov	r3, r4
 80051ea:	6864      	ldr	r4, [r4, #4]
 80051ec:	e7ae      	b.n	800514c <_malloc_r+0x34>
 80051ee:	463c      	mov	r4, r7
 80051f0:	687f      	ldr	r7, [r7, #4]
 80051f2:	e7b6      	b.n	8005162 <_malloc_r+0x4a>
 80051f4:	461a      	mov	r2, r3
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	d1fb      	bne.n	80051f4 <_malloc_r+0xdc>
 80051fc:	2300      	movs	r3, #0
 80051fe:	6053      	str	r3, [r2, #4]
 8005200:	e7de      	b.n	80051c0 <_malloc_r+0xa8>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	4630      	mov	r0, r6
 8005208:	f000 f80c 	bl	8005224 <__malloc_unlock>
 800520c:	e794      	b.n	8005138 <_malloc_r+0x20>
 800520e:	6005      	str	r5, [r0, #0]
 8005210:	e7d6      	b.n	80051c0 <_malloc_r+0xa8>
 8005212:	bf00      	nop
 8005214:	20000324 	.word	0x20000324

08005218 <__malloc_lock>:
 8005218:	4801      	ldr	r0, [pc, #4]	@ (8005220 <__malloc_lock+0x8>)
 800521a:	f7ff bf01 	b.w	8005020 <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	2000031c 	.word	0x2000031c

08005224 <__malloc_unlock>:
 8005224:	4801      	ldr	r0, [pc, #4]	@ (800522c <__malloc_unlock+0x8>)
 8005226:	f7ff befc 	b.w	8005022 <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	2000031c 	.word	0x2000031c

08005230 <__ssputs_r>:
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	688e      	ldr	r6, [r1, #8]
 8005236:	461f      	mov	r7, r3
 8005238:	42be      	cmp	r6, r7
 800523a:	680b      	ldr	r3, [r1, #0]
 800523c:	4682      	mov	sl, r0
 800523e:	460c      	mov	r4, r1
 8005240:	4690      	mov	r8, r2
 8005242:	d82d      	bhi.n	80052a0 <__ssputs_r+0x70>
 8005244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005248:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800524c:	d026      	beq.n	800529c <__ssputs_r+0x6c>
 800524e:	6965      	ldr	r5, [r4, #20]
 8005250:	6909      	ldr	r1, [r1, #16]
 8005252:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005256:	eba3 0901 	sub.w	r9, r3, r1
 800525a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800525e:	1c7b      	adds	r3, r7, #1
 8005260:	444b      	add	r3, r9
 8005262:	106d      	asrs	r5, r5, #1
 8005264:	429d      	cmp	r5, r3
 8005266:	bf38      	it	cc
 8005268:	461d      	movcc	r5, r3
 800526a:	0553      	lsls	r3, r2, #21
 800526c:	d527      	bpl.n	80052be <__ssputs_r+0x8e>
 800526e:	4629      	mov	r1, r5
 8005270:	f7ff ff52 	bl	8005118 <_malloc_r>
 8005274:	4606      	mov	r6, r0
 8005276:	b360      	cbz	r0, 80052d2 <__ssputs_r+0xa2>
 8005278:	6921      	ldr	r1, [r4, #16]
 800527a:	464a      	mov	r2, r9
 800527c:	f7ff fed2 	bl	8005024 <memcpy>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	6126      	str	r6, [r4, #16]
 800528e:	6165      	str	r5, [r4, #20]
 8005290:	444e      	add	r6, r9
 8005292:	eba5 0509 	sub.w	r5, r5, r9
 8005296:	6026      	str	r6, [r4, #0]
 8005298:	60a5      	str	r5, [r4, #8]
 800529a:	463e      	mov	r6, r7
 800529c:	42be      	cmp	r6, r7
 800529e:	d900      	bls.n	80052a2 <__ssputs_r+0x72>
 80052a0:	463e      	mov	r6, r7
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	4632      	mov	r2, r6
 80052a6:	4641      	mov	r1, r8
 80052a8:	f000 faa8 	bl	80057fc <memmove>
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	1b9b      	subs	r3, r3, r6
 80052b0:	60a3      	str	r3, [r4, #8]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	4433      	add	r3, r6
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052be:	462a      	mov	r2, r5
 80052c0:	f000 fac6 	bl	8005850 <_realloc_r>
 80052c4:	4606      	mov	r6, r0
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d1e0      	bne.n	800528c <__ssputs_r+0x5c>
 80052ca:	6921      	ldr	r1, [r4, #16]
 80052cc:	4650      	mov	r0, sl
 80052ce:	f7ff feb7 	bl	8005040 <_free_r>
 80052d2:	230c      	movs	r3, #12
 80052d4:	f8ca 3000 	str.w	r3, [sl]
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	e7e9      	b.n	80052ba <__ssputs_r+0x8a>
	...

080052e8 <_svfiprintf_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	4698      	mov	r8, r3
 80052ee:	898b      	ldrh	r3, [r1, #12]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	b09d      	sub	sp, #116	@ 0x74
 80052f4:	4607      	mov	r7, r0
 80052f6:	460d      	mov	r5, r1
 80052f8:	4614      	mov	r4, r2
 80052fa:	d510      	bpl.n	800531e <_svfiprintf_r+0x36>
 80052fc:	690b      	ldr	r3, [r1, #16]
 80052fe:	b973      	cbnz	r3, 800531e <_svfiprintf_r+0x36>
 8005300:	2140      	movs	r1, #64	@ 0x40
 8005302:	f7ff ff09 	bl	8005118 <_malloc_r>
 8005306:	6028      	str	r0, [r5, #0]
 8005308:	6128      	str	r0, [r5, #16]
 800530a:	b930      	cbnz	r0, 800531a <_svfiprintf_r+0x32>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	b01d      	add	sp, #116	@ 0x74
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531a:	2340      	movs	r3, #64	@ 0x40
 800531c:	616b      	str	r3, [r5, #20]
 800531e:	2300      	movs	r3, #0
 8005320:	9309      	str	r3, [sp, #36]	@ 0x24
 8005322:	2320      	movs	r3, #32
 8005324:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005328:	f8cd 800c 	str.w	r8, [sp, #12]
 800532c:	2330      	movs	r3, #48	@ 0x30
 800532e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054cc <_svfiprintf_r+0x1e4>
 8005332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005336:	f04f 0901 	mov.w	r9, #1
 800533a:	4623      	mov	r3, r4
 800533c:	469a      	mov	sl, r3
 800533e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005342:	b10a      	cbz	r2, 8005348 <_svfiprintf_r+0x60>
 8005344:	2a25      	cmp	r2, #37	@ 0x25
 8005346:	d1f9      	bne.n	800533c <_svfiprintf_r+0x54>
 8005348:	ebba 0b04 	subs.w	fp, sl, r4
 800534c:	d00b      	beq.n	8005366 <_svfiprintf_r+0x7e>
 800534e:	465b      	mov	r3, fp
 8005350:	4622      	mov	r2, r4
 8005352:	4629      	mov	r1, r5
 8005354:	4638      	mov	r0, r7
 8005356:	f7ff ff6b 	bl	8005230 <__ssputs_r>
 800535a:	3001      	adds	r0, #1
 800535c:	f000 80a7 	beq.w	80054ae <_svfiprintf_r+0x1c6>
 8005360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005362:	445a      	add	r2, fp
 8005364:	9209      	str	r2, [sp, #36]	@ 0x24
 8005366:	f89a 3000 	ldrb.w	r3, [sl]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 809f 	beq.w	80054ae <_svfiprintf_r+0x1c6>
 8005370:	2300      	movs	r3, #0
 8005372:	f04f 32ff 	mov.w	r2, #4294967295
 8005376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800537a:	f10a 0a01 	add.w	sl, sl, #1
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	9307      	str	r3, [sp, #28]
 8005382:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005386:	931a      	str	r3, [sp, #104]	@ 0x68
 8005388:	4654      	mov	r4, sl
 800538a:	2205      	movs	r2, #5
 800538c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005390:	484e      	ldr	r0, [pc, #312]	@ (80054cc <_svfiprintf_r+0x1e4>)
 8005392:	f7fa ff45 	bl	8000220 <memchr>
 8005396:	9a04      	ldr	r2, [sp, #16]
 8005398:	b9d8      	cbnz	r0, 80053d2 <_svfiprintf_r+0xea>
 800539a:	06d0      	lsls	r0, r2, #27
 800539c:	bf44      	itt	mi
 800539e:	2320      	movmi	r3, #32
 80053a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a4:	0711      	lsls	r1, r2, #28
 80053a6:	bf44      	itt	mi
 80053a8:	232b      	movmi	r3, #43	@ 0x2b
 80053aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053ae:	f89a 3000 	ldrb.w	r3, [sl]
 80053b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b4:	d015      	beq.n	80053e2 <_svfiprintf_r+0xfa>
 80053b6:	9a07      	ldr	r2, [sp, #28]
 80053b8:	4654      	mov	r4, sl
 80053ba:	2000      	movs	r0, #0
 80053bc:	f04f 0c0a 	mov.w	ip, #10
 80053c0:	4621      	mov	r1, r4
 80053c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053c6:	3b30      	subs	r3, #48	@ 0x30
 80053c8:	2b09      	cmp	r3, #9
 80053ca:	d94b      	bls.n	8005464 <_svfiprintf_r+0x17c>
 80053cc:	b1b0      	cbz	r0, 80053fc <_svfiprintf_r+0x114>
 80053ce:	9207      	str	r2, [sp, #28]
 80053d0:	e014      	b.n	80053fc <_svfiprintf_r+0x114>
 80053d2:	eba0 0308 	sub.w	r3, r0, r8
 80053d6:	fa09 f303 	lsl.w	r3, r9, r3
 80053da:	4313      	orrs	r3, r2
 80053dc:	9304      	str	r3, [sp, #16]
 80053de:	46a2      	mov	sl, r4
 80053e0:	e7d2      	b.n	8005388 <_svfiprintf_r+0xa0>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	1d19      	adds	r1, r3, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	9103      	str	r1, [sp, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bfbb      	ittet	lt
 80053ee:	425b      	neglt	r3, r3
 80053f0:	f042 0202 	orrlt.w	r2, r2, #2
 80053f4:	9307      	strge	r3, [sp, #28]
 80053f6:	9307      	strlt	r3, [sp, #28]
 80053f8:	bfb8      	it	lt
 80053fa:	9204      	strlt	r2, [sp, #16]
 80053fc:	7823      	ldrb	r3, [r4, #0]
 80053fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005400:	d10a      	bne.n	8005418 <_svfiprintf_r+0x130>
 8005402:	7863      	ldrb	r3, [r4, #1]
 8005404:	2b2a      	cmp	r3, #42	@ 0x2a
 8005406:	d132      	bne.n	800546e <_svfiprintf_r+0x186>
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	9203      	str	r2, [sp, #12]
 8005410:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005414:	3402      	adds	r4, #2
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054dc <_svfiprintf_r+0x1f4>
 800541c:	7821      	ldrb	r1, [r4, #0]
 800541e:	2203      	movs	r2, #3
 8005420:	4650      	mov	r0, sl
 8005422:	f7fa fefd 	bl	8000220 <memchr>
 8005426:	b138      	cbz	r0, 8005438 <_svfiprintf_r+0x150>
 8005428:	9b04      	ldr	r3, [sp, #16]
 800542a:	eba0 000a 	sub.w	r0, r0, sl
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	4082      	lsls	r2, r0
 8005432:	4313      	orrs	r3, r2
 8005434:	3401      	adds	r4, #1
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800543c:	4824      	ldr	r0, [pc, #144]	@ (80054d0 <_svfiprintf_r+0x1e8>)
 800543e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005442:	2206      	movs	r2, #6
 8005444:	f7fa feec 	bl	8000220 <memchr>
 8005448:	2800      	cmp	r0, #0
 800544a:	d036      	beq.n	80054ba <_svfiprintf_r+0x1d2>
 800544c:	4b21      	ldr	r3, [pc, #132]	@ (80054d4 <_svfiprintf_r+0x1ec>)
 800544e:	bb1b      	cbnz	r3, 8005498 <_svfiprintf_r+0x1b0>
 8005450:	9b03      	ldr	r3, [sp, #12]
 8005452:	3307      	adds	r3, #7
 8005454:	f023 0307 	bic.w	r3, r3, #7
 8005458:	3308      	adds	r3, #8
 800545a:	9303      	str	r3, [sp, #12]
 800545c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545e:	4433      	add	r3, r6
 8005460:	9309      	str	r3, [sp, #36]	@ 0x24
 8005462:	e76a      	b.n	800533a <_svfiprintf_r+0x52>
 8005464:	fb0c 3202 	mla	r2, ip, r2, r3
 8005468:	460c      	mov	r4, r1
 800546a:	2001      	movs	r0, #1
 800546c:	e7a8      	b.n	80053c0 <_svfiprintf_r+0xd8>
 800546e:	2300      	movs	r3, #0
 8005470:	3401      	adds	r4, #1
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	4619      	mov	r1, r3
 8005476:	f04f 0c0a 	mov.w	ip, #10
 800547a:	4620      	mov	r0, r4
 800547c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005480:	3a30      	subs	r2, #48	@ 0x30
 8005482:	2a09      	cmp	r2, #9
 8005484:	d903      	bls.n	800548e <_svfiprintf_r+0x1a6>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0c6      	beq.n	8005418 <_svfiprintf_r+0x130>
 800548a:	9105      	str	r1, [sp, #20]
 800548c:	e7c4      	b.n	8005418 <_svfiprintf_r+0x130>
 800548e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005492:	4604      	mov	r4, r0
 8005494:	2301      	movs	r3, #1
 8005496:	e7f0      	b.n	800547a <_svfiprintf_r+0x192>
 8005498:	ab03      	add	r3, sp, #12
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	462a      	mov	r2, r5
 800549e:	4b0e      	ldr	r3, [pc, #56]	@ (80054d8 <_svfiprintf_r+0x1f0>)
 80054a0:	a904      	add	r1, sp, #16
 80054a2:	4638      	mov	r0, r7
 80054a4:	f3af 8000 	nop.w
 80054a8:	1c42      	adds	r2, r0, #1
 80054aa:	4606      	mov	r6, r0
 80054ac:	d1d6      	bne.n	800545c <_svfiprintf_r+0x174>
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	065b      	lsls	r3, r3, #25
 80054b2:	f53f af2d 	bmi.w	8005310 <_svfiprintf_r+0x28>
 80054b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054b8:	e72c      	b.n	8005314 <_svfiprintf_r+0x2c>
 80054ba:	ab03      	add	r3, sp, #12
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	462a      	mov	r2, r5
 80054c0:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <_svfiprintf_r+0x1f0>)
 80054c2:	a904      	add	r1, sp, #16
 80054c4:	4638      	mov	r0, r7
 80054c6:	f000 f879 	bl	80055bc <_printf_i>
 80054ca:	e7ed      	b.n	80054a8 <_svfiprintf_r+0x1c0>
 80054cc:	08005914 	.word	0x08005914
 80054d0:	0800591e 	.word	0x0800591e
 80054d4:	00000000 	.word	0x00000000
 80054d8:	08005231 	.word	0x08005231
 80054dc:	0800591a 	.word	0x0800591a

080054e0 <_printf_common>:
 80054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	4616      	mov	r6, r2
 80054e6:	4698      	mov	r8, r3
 80054e8:	688a      	ldr	r2, [r1, #8]
 80054ea:	690b      	ldr	r3, [r1, #16]
 80054ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bfb8      	it	lt
 80054f4:	4613      	movlt	r3, r2
 80054f6:	6033      	str	r3, [r6, #0]
 80054f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054fc:	4607      	mov	r7, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	b10a      	cbz	r2, 8005506 <_printf_common+0x26>
 8005502:	3301      	adds	r3, #1
 8005504:	6033      	str	r3, [r6, #0]
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	0699      	lsls	r1, r3, #26
 800550a:	bf42      	ittt	mi
 800550c:	6833      	ldrmi	r3, [r6, #0]
 800550e:	3302      	addmi	r3, #2
 8005510:	6033      	strmi	r3, [r6, #0]
 8005512:	6825      	ldr	r5, [r4, #0]
 8005514:	f015 0506 	ands.w	r5, r5, #6
 8005518:	d106      	bne.n	8005528 <_printf_common+0x48>
 800551a:	f104 0a19 	add.w	sl, r4, #25
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	6832      	ldr	r2, [r6, #0]
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	42ab      	cmp	r3, r5
 8005526:	dc26      	bgt.n	8005576 <_printf_common+0x96>
 8005528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	3b00      	subs	r3, #0
 8005530:	bf18      	it	ne
 8005532:	2301      	movne	r3, #1
 8005534:	0692      	lsls	r2, r2, #26
 8005536:	d42b      	bmi.n	8005590 <_printf_common+0xb0>
 8005538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800553c:	4641      	mov	r1, r8
 800553e:	4638      	mov	r0, r7
 8005540:	47c8      	blx	r9
 8005542:	3001      	adds	r0, #1
 8005544:	d01e      	beq.n	8005584 <_printf_common+0xa4>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	6922      	ldr	r2, [r4, #16]
 800554a:	f003 0306 	and.w	r3, r3, #6
 800554e:	2b04      	cmp	r3, #4
 8005550:	bf02      	ittt	eq
 8005552:	68e5      	ldreq	r5, [r4, #12]
 8005554:	6833      	ldreq	r3, [r6, #0]
 8005556:	1aed      	subeq	r5, r5, r3
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	bf0c      	ite	eq
 800555c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005560:	2500      	movne	r5, #0
 8005562:	4293      	cmp	r3, r2
 8005564:	bfc4      	itt	gt
 8005566:	1a9b      	subgt	r3, r3, r2
 8005568:	18ed      	addgt	r5, r5, r3
 800556a:	2600      	movs	r6, #0
 800556c:	341a      	adds	r4, #26
 800556e:	42b5      	cmp	r5, r6
 8005570:	d11a      	bne.n	80055a8 <_printf_common+0xc8>
 8005572:	2000      	movs	r0, #0
 8005574:	e008      	b.n	8005588 <_printf_common+0xa8>
 8005576:	2301      	movs	r3, #1
 8005578:	4652      	mov	r2, sl
 800557a:	4641      	mov	r1, r8
 800557c:	4638      	mov	r0, r7
 800557e:	47c8      	blx	r9
 8005580:	3001      	adds	r0, #1
 8005582:	d103      	bne.n	800558c <_printf_common+0xac>
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558c:	3501      	adds	r5, #1
 800558e:	e7c6      	b.n	800551e <_printf_common+0x3e>
 8005590:	18e1      	adds	r1, r4, r3
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	2030      	movs	r0, #48	@ 0x30
 8005596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800559a:	4422      	add	r2, r4
 800559c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055a4:	3302      	adds	r3, #2
 80055a6:	e7c7      	b.n	8005538 <_printf_common+0x58>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4622      	mov	r2, r4
 80055ac:	4641      	mov	r1, r8
 80055ae:	4638      	mov	r0, r7
 80055b0:	47c8      	blx	r9
 80055b2:	3001      	adds	r0, #1
 80055b4:	d0e6      	beq.n	8005584 <_printf_common+0xa4>
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7d9      	b.n	800556e <_printf_common+0x8e>
	...

080055bc <_printf_i>:
 80055bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055c0:	7e0f      	ldrb	r7, [r1, #24]
 80055c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055c4:	2f78      	cmp	r7, #120	@ 0x78
 80055c6:	4691      	mov	r9, r2
 80055c8:	4680      	mov	r8, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	469a      	mov	sl, r3
 80055ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055d2:	d807      	bhi.n	80055e4 <_printf_i+0x28>
 80055d4:	2f62      	cmp	r7, #98	@ 0x62
 80055d6:	d80a      	bhi.n	80055ee <_printf_i+0x32>
 80055d8:	2f00      	cmp	r7, #0
 80055da:	f000 80d2 	beq.w	8005782 <_printf_i+0x1c6>
 80055de:	2f58      	cmp	r7, #88	@ 0x58
 80055e0:	f000 80b9 	beq.w	8005756 <_printf_i+0x19a>
 80055e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055ec:	e03a      	b.n	8005664 <_printf_i+0xa8>
 80055ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055f2:	2b15      	cmp	r3, #21
 80055f4:	d8f6      	bhi.n	80055e4 <_printf_i+0x28>
 80055f6:	a101      	add	r1, pc, #4	@ (adr r1, 80055fc <_printf_i+0x40>)
 80055f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005669 	.word	0x08005669
 8005604:	080055e5 	.word	0x080055e5
 8005608:	080055e5 	.word	0x080055e5
 800560c:	080055e5 	.word	0x080055e5
 8005610:	080055e5 	.word	0x080055e5
 8005614:	08005669 	.word	0x08005669
 8005618:	080055e5 	.word	0x080055e5
 800561c:	080055e5 	.word	0x080055e5
 8005620:	080055e5 	.word	0x080055e5
 8005624:	080055e5 	.word	0x080055e5
 8005628:	08005769 	.word	0x08005769
 800562c:	08005693 	.word	0x08005693
 8005630:	08005723 	.word	0x08005723
 8005634:	080055e5 	.word	0x080055e5
 8005638:	080055e5 	.word	0x080055e5
 800563c:	0800578b 	.word	0x0800578b
 8005640:	080055e5 	.word	0x080055e5
 8005644:	08005693 	.word	0x08005693
 8005648:	080055e5 	.word	0x080055e5
 800564c:	080055e5 	.word	0x080055e5
 8005650:	0800572b 	.word	0x0800572b
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6032      	str	r2, [r6, #0]
 800565c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005664:	2301      	movs	r3, #1
 8005666:	e09d      	b.n	80057a4 <_printf_i+0x1e8>
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	1d19      	adds	r1, r3, #4
 800566e:	6031      	str	r1, [r6, #0]
 8005670:	0606      	lsls	r6, r0, #24
 8005672:	d501      	bpl.n	8005678 <_printf_i+0xbc>
 8005674:	681d      	ldr	r5, [r3, #0]
 8005676:	e003      	b.n	8005680 <_printf_i+0xc4>
 8005678:	0645      	lsls	r5, r0, #25
 800567a:	d5fb      	bpl.n	8005674 <_printf_i+0xb8>
 800567c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005680:	2d00      	cmp	r5, #0
 8005682:	da03      	bge.n	800568c <_printf_i+0xd0>
 8005684:	232d      	movs	r3, #45	@ 0x2d
 8005686:	426d      	negs	r5, r5
 8005688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800568c:	4859      	ldr	r0, [pc, #356]	@ (80057f4 <_printf_i+0x238>)
 800568e:	230a      	movs	r3, #10
 8005690:	e011      	b.n	80056b6 <_printf_i+0xfa>
 8005692:	6821      	ldr	r1, [r4, #0]
 8005694:	6833      	ldr	r3, [r6, #0]
 8005696:	0608      	lsls	r0, r1, #24
 8005698:	f853 5b04 	ldr.w	r5, [r3], #4
 800569c:	d402      	bmi.n	80056a4 <_printf_i+0xe8>
 800569e:	0649      	lsls	r1, r1, #25
 80056a0:	bf48      	it	mi
 80056a2:	b2ad      	uxthmi	r5, r5
 80056a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80056a6:	4853      	ldr	r0, [pc, #332]	@ (80057f4 <_printf_i+0x238>)
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	bf14      	ite	ne
 80056ac:	230a      	movne	r3, #10
 80056ae:	2308      	moveq	r3, #8
 80056b0:	2100      	movs	r1, #0
 80056b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056b6:	6866      	ldr	r6, [r4, #4]
 80056b8:	60a6      	str	r6, [r4, #8]
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	bfa2      	ittt	ge
 80056be:	6821      	ldrge	r1, [r4, #0]
 80056c0:	f021 0104 	bicge.w	r1, r1, #4
 80056c4:	6021      	strge	r1, [r4, #0]
 80056c6:	b90d      	cbnz	r5, 80056cc <_printf_i+0x110>
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	d04b      	beq.n	8005764 <_printf_i+0x1a8>
 80056cc:	4616      	mov	r6, r2
 80056ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80056d2:	fb03 5711 	mls	r7, r3, r1, r5
 80056d6:	5dc7      	ldrb	r7, [r0, r7]
 80056d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056dc:	462f      	mov	r7, r5
 80056de:	42bb      	cmp	r3, r7
 80056e0:	460d      	mov	r5, r1
 80056e2:	d9f4      	bls.n	80056ce <_printf_i+0x112>
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d10b      	bne.n	8005700 <_printf_i+0x144>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	07df      	lsls	r7, r3, #31
 80056ec:	d508      	bpl.n	8005700 <_printf_i+0x144>
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	6861      	ldr	r1, [r4, #4]
 80056f2:	4299      	cmp	r1, r3
 80056f4:	bfde      	ittt	le
 80056f6:	2330      	movle	r3, #48	@ 0x30
 80056f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005700:	1b92      	subs	r2, r2, r6
 8005702:	6122      	str	r2, [r4, #16]
 8005704:	f8cd a000 	str.w	sl, [sp]
 8005708:	464b      	mov	r3, r9
 800570a:	aa03      	add	r2, sp, #12
 800570c:	4621      	mov	r1, r4
 800570e:	4640      	mov	r0, r8
 8005710:	f7ff fee6 	bl	80054e0 <_printf_common>
 8005714:	3001      	adds	r0, #1
 8005716:	d14a      	bne.n	80057ae <_printf_i+0x1f2>
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	b004      	add	sp, #16
 800571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	f043 0320 	orr.w	r3, r3, #32
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	4833      	ldr	r0, [pc, #204]	@ (80057f8 <_printf_i+0x23c>)
 800572c:	2778      	movs	r7, #120	@ 0x78
 800572e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	6831      	ldr	r1, [r6, #0]
 8005736:	061f      	lsls	r7, r3, #24
 8005738:	f851 5b04 	ldr.w	r5, [r1], #4
 800573c:	d402      	bmi.n	8005744 <_printf_i+0x188>
 800573e:	065f      	lsls	r7, r3, #25
 8005740:	bf48      	it	mi
 8005742:	b2ad      	uxthmi	r5, r5
 8005744:	6031      	str	r1, [r6, #0]
 8005746:	07d9      	lsls	r1, r3, #31
 8005748:	bf44      	itt	mi
 800574a:	f043 0320 	orrmi.w	r3, r3, #32
 800574e:	6023      	strmi	r3, [r4, #0]
 8005750:	b11d      	cbz	r5, 800575a <_printf_i+0x19e>
 8005752:	2310      	movs	r3, #16
 8005754:	e7ac      	b.n	80056b0 <_printf_i+0xf4>
 8005756:	4827      	ldr	r0, [pc, #156]	@ (80057f4 <_printf_i+0x238>)
 8005758:	e7e9      	b.n	800572e <_printf_i+0x172>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	f023 0320 	bic.w	r3, r3, #32
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	e7f6      	b.n	8005752 <_printf_i+0x196>
 8005764:	4616      	mov	r6, r2
 8005766:	e7bd      	b.n	80056e4 <_printf_i+0x128>
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	6825      	ldr	r5, [r4, #0]
 800576c:	6961      	ldr	r1, [r4, #20]
 800576e:	1d18      	adds	r0, r3, #4
 8005770:	6030      	str	r0, [r6, #0]
 8005772:	062e      	lsls	r6, r5, #24
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	d501      	bpl.n	800577c <_printf_i+0x1c0>
 8005778:	6019      	str	r1, [r3, #0]
 800577a:	e002      	b.n	8005782 <_printf_i+0x1c6>
 800577c:	0668      	lsls	r0, r5, #25
 800577e:	d5fb      	bpl.n	8005778 <_printf_i+0x1bc>
 8005780:	8019      	strh	r1, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	6123      	str	r3, [r4, #16]
 8005786:	4616      	mov	r6, r2
 8005788:	e7bc      	b.n	8005704 <_printf_i+0x148>
 800578a:	6833      	ldr	r3, [r6, #0]
 800578c:	1d1a      	adds	r2, r3, #4
 800578e:	6032      	str	r2, [r6, #0]
 8005790:	681e      	ldr	r6, [r3, #0]
 8005792:	6862      	ldr	r2, [r4, #4]
 8005794:	2100      	movs	r1, #0
 8005796:	4630      	mov	r0, r6
 8005798:	f7fa fd42 	bl	8000220 <memchr>
 800579c:	b108      	cbz	r0, 80057a2 <_printf_i+0x1e6>
 800579e:	1b80      	subs	r0, r0, r6
 80057a0:	6060      	str	r0, [r4, #4]
 80057a2:	6863      	ldr	r3, [r4, #4]
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	2300      	movs	r3, #0
 80057a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ac:	e7aa      	b.n	8005704 <_printf_i+0x148>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	4632      	mov	r2, r6
 80057b2:	4649      	mov	r1, r9
 80057b4:	4640      	mov	r0, r8
 80057b6:	47d0      	blx	sl
 80057b8:	3001      	adds	r0, #1
 80057ba:	d0ad      	beq.n	8005718 <_printf_i+0x15c>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	079b      	lsls	r3, r3, #30
 80057c0:	d413      	bmi.n	80057ea <_printf_i+0x22e>
 80057c2:	68e0      	ldr	r0, [r4, #12]
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	4298      	cmp	r0, r3
 80057c8:	bfb8      	it	lt
 80057ca:	4618      	movlt	r0, r3
 80057cc:	e7a6      	b.n	800571c <_printf_i+0x160>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4632      	mov	r2, r6
 80057d2:	4649      	mov	r1, r9
 80057d4:	4640      	mov	r0, r8
 80057d6:	47d0      	blx	sl
 80057d8:	3001      	adds	r0, #1
 80057da:	d09d      	beq.n	8005718 <_printf_i+0x15c>
 80057dc:	3501      	adds	r5, #1
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	9903      	ldr	r1, [sp, #12]
 80057e2:	1a5b      	subs	r3, r3, r1
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	dcf2      	bgt.n	80057ce <_printf_i+0x212>
 80057e8:	e7eb      	b.n	80057c2 <_printf_i+0x206>
 80057ea:	2500      	movs	r5, #0
 80057ec:	f104 0619 	add.w	r6, r4, #25
 80057f0:	e7f5      	b.n	80057de <_printf_i+0x222>
 80057f2:	bf00      	nop
 80057f4:	08005925 	.word	0x08005925
 80057f8:	08005936 	.word	0x08005936

080057fc <memmove>:
 80057fc:	4288      	cmp	r0, r1
 80057fe:	b510      	push	{r4, lr}
 8005800:	eb01 0402 	add.w	r4, r1, r2
 8005804:	d902      	bls.n	800580c <memmove+0x10>
 8005806:	4284      	cmp	r4, r0
 8005808:	4623      	mov	r3, r4
 800580a:	d807      	bhi.n	800581c <memmove+0x20>
 800580c:	1e43      	subs	r3, r0, #1
 800580e:	42a1      	cmp	r1, r4
 8005810:	d008      	beq.n	8005824 <memmove+0x28>
 8005812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800581a:	e7f8      	b.n	800580e <memmove+0x12>
 800581c:	4402      	add	r2, r0
 800581e:	4601      	mov	r1, r0
 8005820:	428a      	cmp	r2, r1
 8005822:	d100      	bne.n	8005826 <memmove+0x2a>
 8005824:	bd10      	pop	{r4, pc}
 8005826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800582a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582e:	e7f7      	b.n	8005820 <memmove+0x24>

08005830 <_sbrk_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	@ (800584c <_sbrk_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fc fc9c 	bl	8002178 <_sbrk>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_sbrk_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_sbrk_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000318 	.word	0x20000318

08005850 <_realloc_r>:
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4680      	mov	r8, r0
 8005856:	4615      	mov	r5, r2
 8005858:	460c      	mov	r4, r1
 800585a:	b921      	cbnz	r1, 8005866 <_realloc_r+0x16>
 800585c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4611      	mov	r1, r2
 8005862:	f7ff bc59 	b.w	8005118 <_malloc_r>
 8005866:	b92a      	cbnz	r2, 8005874 <_realloc_r+0x24>
 8005868:	f7ff fbea 	bl	8005040 <_free_r>
 800586c:	2400      	movs	r4, #0
 800586e:	4620      	mov	r0, r4
 8005870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005874:	f000 f81a 	bl	80058ac <_malloc_usable_size_r>
 8005878:	4285      	cmp	r5, r0
 800587a:	4606      	mov	r6, r0
 800587c:	d802      	bhi.n	8005884 <_realloc_r+0x34>
 800587e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005882:	d8f4      	bhi.n	800586e <_realloc_r+0x1e>
 8005884:	4629      	mov	r1, r5
 8005886:	4640      	mov	r0, r8
 8005888:	f7ff fc46 	bl	8005118 <_malloc_r>
 800588c:	4607      	mov	r7, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	d0ec      	beq.n	800586c <_realloc_r+0x1c>
 8005892:	42b5      	cmp	r5, r6
 8005894:	462a      	mov	r2, r5
 8005896:	4621      	mov	r1, r4
 8005898:	bf28      	it	cs
 800589a:	4632      	movcs	r2, r6
 800589c:	f7ff fbc2 	bl	8005024 <memcpy>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7ff fbcc 	bl	8005040 <_free_r>
 80058a8:	463c      	mov	r4, r7
 80058aa:	e7e0      	b.n	800586e <_realloc_r+0x1e>

080058ac <_malloc_usable_size_r>:
 80058ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b0:	1f18      	subs	r0, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfbc      	itt	lt
 80058b6:	580b      	ldrlt	r3, [r1, r0]
 80058b8:	18c0      	addlt	r0, r0, r3
 80058ba:	4770      	bx	lr

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
